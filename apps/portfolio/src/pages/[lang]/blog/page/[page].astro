---


import PageHeadline from "@/components/atoms/PageHeadline.astro";
import BlogGridContainer from "@/components/molecules/BlogGridContainer.astro";
import Pagination from "@/components/molecules/Pagination.astro";
import Footer from "@/components/organisms/Footer.astro";
import { getArticles } from "@/core/article";
import { getExternalArticles } from "@/core/external-article";
import { type Lang, LOCALES, useTranslations } from "@/i18n";
import Layout from "@/layouts/Layout.astro";
import type { BlogPost } from "@/lib/blog-post.utils";

export async function getStaticPaths() {
	// Get all articles and external articles
	const allArticles = await getArticles();
	const allExternalArticles = await getExternalArticles();

	// Create paths for each language
	const paths = [];

	// Generate paths for all supported languages
	for (const lang of Object.keys(LOCALES)) {
		// Combine both types and filter articles for this language
		const allBlogPosts: BlogPost[] = [
			...allArticles.filter((post) => post.id.split("/")[0] === lang),
			...allExternalArticles.filter((post) => post.id.split("/")[0] === lang),
		];

		// Sort by date (newest first)
		const langArticles = allBlogPosts.sort(
			(a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf(),
		);

		// Define pagination config
		const postsPerPage = 16;
		const totalPages = Math.ceil(langArticles.length / postsPerPage);

		// Only generate pages starting from page 2 (page 1 is handled by index.astro)
		for (let i = 2; i <= totalPages; i++) {
			const pagePosts = langArticles.slice(
				(i - 1) * postsPerPage,
				i * postsPerPage,
			);

			// Skip if no posts for this page
			if (pagePosts.length === 0) continue;

			paths.push({
				params: {
					lang,
					page: i.toString(),
				},
				props: {
					page: {
						data: pagePosts,
						currentPage: i,
						lastPage: totalPages,
					},
				},
			});
		}
	}

	return paths;
}

// Get current locale from params for rendering
const { lang } = Astro.params;
const currentLocale = lang as Lang;
const t = useTranslations(currentLocale);

const title = t("blog.title");
const basePath = `/${currentLocale}/blog/page`;
const indexUrl = `/${currentLocale}/blog`;
const { page } = Astro.props;
---

<Layout title={title}>
	<div class="container mx-auto px-4 pt-24">
		<PageHeadline {title}>
			<p class="text-xl">
				{
					t({
						en: "Stay updated with the latest insights and developments",
						es: "Mantente actualizado con las Ãºltimas novedades y desarrollos",
					})
				}
			</p>
		</PageHeadline>
		<BlogGridContainer posts={page.data} />

		<Pagination
			currentPage={page.currentPage}
			lastPage={page.lastPage}
			urlPrev={page.currentPage > 2
				? `${basePath}/${page.currentPage - 1}`
				: indexUrl}
			urlNext={page.currentPage < page.lastPage
				? `${basePath}/${page.currentPage + 1}`
				: null}
			basePath={basePath}
			maxDisplayedPages={5}
			firstPageUrl={indexUrl}
		/>
	</div>
	<Footer />
</Layout>
