---


import PageHeadline from "@/components/atoms/PageHeadline.astro";
import BlogGridContainer from "@/components/molecules/BlogGridContainer.astro";
import Pagination from "@/components/molecules/Pagination.astro";
import Footer from "@/components/organisms/Footer.astro";
import { getArticles } from "@/core/article";
import { getCategories } from "@/core/category";
import { type Lang, LOCALES, useTranslations } from "@/i18n";
import Layout from "@/layouts/Layout.astro";

export async function getStaticPaths() {
	const paths = [];
	const allArticles = await getArticles();
	const postsPerPage = 16;

	for (const lang of Object.keys(LOCALES)) {
		const categories = await getCategories({ lang: lang as Lang });
		for (const category of categories) {
			const categoryArticles = allArticles
				.filter(
					(article) =>
						article.category.slug === category.slug &&
						article.id.startsWith(`${lang}/`),
				)
				.sort(
					(a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf(),
				);

			const totalPages = Math.ceil(categoryArticles.length / postsPerPage);

			for (let i = 2; i <= totalPages; i++) {
				const pagePosts = categoryArticles.slice(
					(i - 1) * postsPerPage,
					i * postsPerPage,
				);

				if (pagePosts.length > 0) {
					paths.push({
						params: {
							lang,
							category: category.slug,
							page: i.toString(),
						},
						props: {
							category,
							page: {
								data: pagePosts,
								currentPage: i,
								lastPage: totalPages,
							},
						},
					});
				}
			}
		}
	}
	return paths;
}

const { lang, category: categorySlug } = Astro.params;
const { category, page } = Astro.props;
const t = useTranslations(lang as Lang);

const basePath = `/${lang}/category/${categorySlug}/page`;
const indexUrl = `/${lang}/category/${categorySlug}`;
const title = `${t("category.title")}: ${category.title}`;
---

<Layout {title}>
	<div class="container mx-auto px-4 pt-24">
		<PageHeadline title={category.title}>
			<p class="text-xl">
				{t("category.description", { category: category.title })}
			</p>
		</PageHeadline>
		<BlogGridContainer posts={page.data} />
		<Pagination
			currentPage={page.currentPage}
			lastPage={page.lastPage}
			urlPrev={page.currentPage > 2 ? `${basePath}/${page.currentPage - 1}` : indexUrl}
			urlNext={page.currentPage < page.lastPage ? `${basePath}/${page.currentPage + 1}` : null}
			basePath={basePath}
			maxDisplayedPages={5}
			firstPageUrl={indexUrl}
		/>
	</div>
	<Footer />
</Layout>
