---


import PageHeadline from "@/components/atoms/PageHeadline.astro";
import BlogGridContainer from "@/components/molecules/BlogGridContainer.astro";
import Pagination from "@/components/molecules/Pagination.astro";
import Footer from "@/components/organisms/Footer.astro";
import { getArticles } from "@/core/article";
import { getCategories } from "@/core/category";
import { type Lang, LOCALES, useTranslations } from "@/i18n";
import Layout from "@/layouts/Layout.astro";

export async function getStaticPaths() {
	const paths = [];
	const allArticles = await getArticles();

	for (const lang of Object.keys(LOCALES)) {
		const categories = await getCategories({ lang: lang as Lang });
		for (const category of categories) {
			const categoryArticles = allArticles.filter(
				(article) =>
					article.category.slug === category.slug &&
					article.id.startsWith(`${lang}/`),
			);

			if (categoryArticles.length > 0) {
				paths.push({
					params: {
						lang: lang,
						category: category.slug,
					},
					props: { category },
				});
			}
		}
	}
	return paths;
}

const { lang, category: categorySlug } = Astro.params;
const { category } = Astro.props;

const t = useTranslations(lang as Lang);

const allArticles = await getArticles();
const categoryArticles = allArticles
	.filter(
		(article) =>
			article.category.slug === categorySlug &&
			article.id.startsWith(`${lang}/`),
	)
	.sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf());

const postsPerPage = 16;
const totalPages = Math.ceil(categoryArticles.length / postsPerPage);
const basePath = `/${lang}/category/${categorySlug}/page`;
const indexUrl = `/${lang}/category/${categorySlug}`;

const title = `${t("category.title")}: ${category.title}`;
---

<Layout {title}>
	<div class="container mx-auto px-4 pt-24">
		<PageHeadline title={category.title}>
			<p class="text-xl">
				{t("category.description", { category: category.title })}
			</p>
		</PageHeadline>
		<BlogGridContainer posts={categoryArticles.slice(0, postsPerPage)} />
		<Pagination
			currentPage={1}
			lastPage={totalPages}
			urlPrev={null}
			urlNext={totalPages > 1 ? `${basePath}/2` : null}
			basePath={basePath}
			maxDisplayedPages={5}
			firstPageUrl={indexUrl}
		/>
	</div>
	<Footer />
</Layout>
