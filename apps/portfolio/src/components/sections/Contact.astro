---
import { Icon } from "astro-icon/components";
import contactImage from "@/assets/images/contact.webp";
import HCaptcha from "@/components/atoms/HCaptcha.astro";
import Section from "@/components/atoms/Section.astro";
import Card from "@/components/molecules/Card.astro";
import { type Lang, useTranslations } from "@/i18n";
import OptimizedPicture from "../atoms/OptimizedPicture.astro";

const t = useTranslations(Astro.currentLocale as Lang);
---

<Section title={t("contact.title")} id="contact">
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 items-stretch">
    <div class="flex flex-col gap-8 h-full">
      <div class="flex flex-col gap-6">
        <h3 class="text-4xl font-bold text-foreground">
          {t("contact.subtitle")}
        </h3>
        <p class="text-foreground-muted text-lg">
          {t("contact.description")}
        </p>
      </div>
      <div class="mt-auto w-full flex justify-center lg:justify-start">
        <OptimizedPicture
          src={contactImage}
          alt={t("contact.image_alt")}
          class="w-full max-w-md h-auto object-contain"
        />
      </div>
    </div>

    <Card class="h-full">
      <form
        id="contact-form"
        class="space-y-6"
        novalidate
      >
        <fieldset class="space-y-4">
          <legend class="sr-only">{t("contact.form_title")}</legend>
          <!-- Honeypot to reduce spam (should remain empty) -->
          <label for="_gotcha" class="sr-only">Do not fill out this field</label>
          <input
            type="text"
            name="_gotcha"
            id="_gotcha"
            autocomplete="off"
            tabindex="-1"
            style="position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden;"
          />

          <div>
            <label
              for="name"
              class="block mb-2 text-sm font-medium text-[color:var(--color-foreground-muted)]"
              >{t("contact.name")}</label
            >
            <input
              data-test="contact-name"
              type="text"
              id="name"
              name="name"
              placeholder={t("contact.name_placeholder")}
              required
              class="w-full px-4 py-3 border rounded-md bg-[color:var(--color-background-secondary)] text-[color:var(--color-foreground)] border-[color:var(--color-border)] placeholder:text-[color:var(--color-foreground-subtle)] focus:outline-none focus:border-[color:var(--color-primary)] focus:ring-2 focus:ring-[color:var(--color-primary)]/20 transition-colors"
              aria-describedby="name-error"
            />
            <p
              id="name-error"
              class="text-red-500 text-sm mt-1 min-h-[1.25rem]"
              aria-live="polite"
            >
            </p>
          </div>

          <div>
            <label
              for="email"
              class="block mb-2 text-sm font-medium text-[color:var(--color-foreground-muted)]"
              >{t("contact.email")}</label
            >
            <input
              data-test="contact-email"
              type="email"
              id="email"
              name="email"
              placeholder={t("contact.email_placeholder")}
              required
              class="w-full px-4 py-3 border rounded-md bg-[color:var(--color-background-secondary)] text-[color:var(--color-foreground)] border-[color:var(--color-border)] placeholder:text-[color:var(--color-foreground-subtle)] focus:outline-none focus:border-[color:var(--color-primary)] focus:ring-2 focus:ring-[color:var(--color-primary)]/20 transition-colors"
              aria-describedby="email-error"
            />
            <p
              id="email-error"
              class="text-red-500 text-sm mt-1 min-h-[1.25rem]"
              aria-live="polite"
            >
            </p>
          </div>

          <div>
            <label
              for="subject"
              class="block mb-2 text-sm font-medium text-[color:var(--color-foreground-muted)]"
              >{t("contact.subject")}</label
            >
            <input
              data-test="contact-subject"
              type="text"
              id="subject"
              name="subject"
              placeholder={t("contact.subject_placeholder")}
              required
              class="w-full px-4 py-3 border rounded-md bg-[color:var(--color-background-secondary)] text-[color:var(--color-foreground)] border-[color:var(--color-border)] placeholder:text-[color:var(--color-foreground-subtle)] focus:outline-none focus:border-[color:var(--color-primary)] focus:ring-2 focus:ring-[color:var(--color-primary)]/20 transition-colors"
              aria-describedby="subject-error"
            />
            <p
              id="subject-error"
              class="text-red-500 text-sm mt-1 min-h-[1.25rem]"
              aria-live="polite"
            >
            </p>
          </div>

          <div>
            <label
              for="message"
              class="block mb-2 text-sm font-medium text-[color:var(--color-foreground-muted)]"
              >{t("contact.message")}</label
            >
            <textarea
              data-test="contact-message"
              id="message"
              name="message"
              rows="4"
              placeholder={t("contact.message_placeholder")}
              required
              minlength="10"
              class="w-full px-4 py-3 border rounded-md bg-[color:var(--color-background-secondary)] text-[color:var(--color-foreground)] border-[color:var(--color-border)] placeholder:text-[color:var(--color-foreground-subtle)] focus:outline-none focus:border-[color:var(--color-primary)] focus:ring-2 focus:ring-[color:var(--color-primary)]/20 transition-colors"
              aria-describedby="message-error"></textarea>
            <p
              id="message-error"
              class="text-red-500 text-sm mt-1 min-h-[1.25rem]"
              aria-live="polite"
            >
            </p>
          </div>
        </fieldset>

        <!-- hCaptcha verification -->
        <div class="flex justify-center">
          <HCaptcha id="contact-captcha" />
        </div>

        <div class="flex flex-col items-center">
          <button
            data-test="contact-submit"
            type="submit"
            class="inline-flex items-center justify-center px-6 py-3 border rounded-md bg-transparent text-[color:var(--color-primary)] border-[color:var(--color-primary)] font-medium cursor-pointer transition hover:bg-[color:var(--color-primary)]/15 disabled:opacity-60 disabled:cursor-not-allowed">
            <Icon name="lucide:send" class="w-5 h-5 mr-2" />
            {t("contact.send_button")}
            </button>
          <div id="form-status" class="mt-4 text-center h-6" aria-live="polite">
          </div>
        </div>
      </form>
    </Card>
  </div>
</Section>

<style>
  /* Additional styles for contact form validation */
  input:focus:invalid,
  textarea:focus:invalid {
    border-color: #ef4444; /* red-500 */
    --tw-ring-color: rgb(239 68 68 / 0.2);
    box-shadow: 0 0 0 2px var(--tw-ring-color);
  }

  input:focus:valid,
  textarea:focus:valid {
    border-color: #22c55e; /* green-500 */
  }
</style>

<script>
	import { contactService } from "@/services";

	// Contact form submission handler
	const form = document.getElementById("contact-form") as HTMLFormElement;
	const formStatus = document.getElementById("form-status") as HTMLDivElement;
	const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;

	// Get all input fields
	const nameInput = document.getElementById("name") as HTMLInputElement;
	const emailInput = document.getElementById("email") as HTMLInputElement;
	const subjectInput = document.getElementById("subject") as HTMLInputElement;
	const messageInput = document.getElementById("message") as HTMLTextAreaElement;
	const honeypotInput = document.getElementById("_gotcha") as HTMLInputElement;
	const captchaContainer = document.getElementById("contact-captcha") as HTMLDivElement;

	// Get error message elements
	const nameError = document.getElementById("name-error") as HTMLParagraphElement;
	const emailError = document.getElementById("email-error") as HTMLParagraphElement;
	const subjectError = document.getElementById("subject-error") as HTMLParagraphElement;
	const messageError = document.getElementById("message-error") as HTMLParagraphElement;

	// Type definitions are now in HCaptcha.astro component

	if (form && submitButton) {
		// Get translations
		const currentLocale = document.documentElement.lang || "en";
		const translations = {
			en: {
				sending: "Sending...",
				success: "Message sent successfully!",
				error: "Failed to send message. Please try again.",
				nameRequired: "Name is required",
				emailRequired: "Email is required",
				emailInvalid: "Please enter a valid email address",
				subjectRequired: "Subject is required",
				messageRequired: "Message is required",
				messageTooShort: "Message must be at least 10 characters",
			},
			es: {
				sending: "Enviando...",
				success: "¡Mensaje enviado exitosamente!",
				error: "No se pudo enviar el mensaje. Por favor, inténtalo de nuevo.",
				nameRequired: "El nombre es obligatorio",
				emailRequired: "El correo electrónico es obligatorio",
				emailInvalid: "Por favor, introduce un correo electrónico válido",
				subjectRequired: "El asunto es obligatorio",
				messageRequired: "El mensaje es obligatorio",
				messageTooShort: "El mensaje debe tener al menos 10 caracteres",
			},
		};

			const t = translations[currentLocale as keyof typeof translations] || translations.en;

		// Email validation
		const validateEmail = (email: string): boolean => {
			const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
			return re.test(email);
		};

		// Get hCaptcha token
		const getCaptchaToken = (): string | null => {
			if (window.getCaptchaToken) {
				return window.getCaptchaToken("contact-captcha");
			}
			return null;
		};

		// Clear error message
		const clearError = (errorElement: HTMLElement, inputElement: HTMLElement) => {
			errorElement.textContent = "";
			inputElement.classList.remove("border-red-500");
		};

		// Show error message
		const showError = (errorElement: HTMLElement, inputElement: HTMLElement, message: string) => {
			errorElement.textContent = message;
			inputElement.classList.add("border-red-500");
		};

		// Add input event listeners to clear errors
		nameInput.addEventListener("input", () => clearError(nameError, nameInput));
		emailInput.addEventListener("input", () => clearError(emailError, emailInput));
		subjectInput.addEventListener("input", () => clearError(subjectError, subjectInput));
		messageInput.addEventListener("input", () => clearError(messageError, messageInput));

		// Form submission
		form.addEventListener("submit", async (e) => {
			e.preventDefault();

			// Clear all errors
			clearError(nameError, nameInput);
			clearError(emailError, emailInput);
			clearError(subjectError, subjectInput);
			clearError(messageError, messageInput);

			// Get form values
			const name = nameInput.value.trim();
			const email = emailInput.value.trim();
			const subject = subjectInput.value.trim();
			const message = messageInput.value.trim();
			const _gotcha = honeypotInput.value;
			const hcaptchaToken = getCaptchaToken();

			// Validate fields
			let hasErrors = false;

			if (!name) {
				showError(nameError, nameInput, t.nameRequired);
				hasErrors = true;
			}

			if (!email) {
				showError(emailError, emailInput, t.emailRequired);
				hasErrors = true;
			} else if (!validateEmail(email)) {
				showError(emailError, emailInput, t.emailInvalid);
				hasErrors = true;
			}

			if (!subject) {
				showError(subjectError, subjectInput, t.subjectRequired);
				hasErrors = true;
			}

			if (!message) {
				showError(messageError, messageInput, t.messageRequired);
				hasErrors = true;
			} else if (message.length < 10) {
				showError(messageError, messageInput, t.messageTooShort);
				hasErrors = true;
			}

			// Validate captcha
			if (!hcaptchaToken) {
				formStatus.textContent = "Please complete the captcha verification";
				formStatus.className = "mt-4 text-center h-6 text-red-600 font-medium";
				hasErrors = true;
			}

			if (hasErrors) {
				return;
			}

			// Disable button and show loading state
			submitButton.disabled = true;
			const originalButtonText = submitButton.innerHTML;
			submitButton.innerHTML = `<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-current inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
				<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
				<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
			</svg>${t.sending}`;

			try {
				// Use the contact service
				const result = await contactService.submitContact({
					name,
					email,
					subject,
					message,
					_gotcha,
					hcaptchaToken: hcaptchaToken || undefined,
				});

				if (result.success) {
					// Success
					formStatus.textContent = result.message || t.success;
					formStatus.className = "mt-4 text-center h-6 text-green-600 font-medium";
					form.reset();

					// Reset captcha
					if (window.resetCaptcha) {
						window.resetCaptcha("contact-captcha");
					}

					// Hide success message after 5 seconds
					setTimeout(() => {
						formStatus.textContent = "";
						formStatus.className = "mt-4 text-center h-6";
					}, 5000);
				} else {
					// Error
					formStatus.textContent = result.message || t.error;
					formStatus.className = "mt-4 text-center h-6 text-red-600 font-medium";
				}
			} catch (error) {
				console.error("Contact form error:", error);
				formStatus.textContent = t.error;
				formStatus.className = "mt-4 text-center h-6 text-red-600 font-medium";
			} finally {
				// Re-enable button
				submitButton.disabled = false;
				submitButton.innerHTML = originalButtonText;
			}
		});
	}
</script>
