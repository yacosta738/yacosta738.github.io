---
import Section from "@atoms/Section.astro";
import { Icon } from "astro-icon/components";
/**
 * Skills section component - Enhanced with domain grouping.
 * This component renders a section that displays skills organized by technical domains.
 * Each domain shows relevant skills with icons and keywords.
 *
 * @prop {Skill[]} [skills=[]] - An array of skill objects to display.
 */
import Card from "@/components/molecules/Card.astro";
import HighlightsList from "@/components/molecules/HighlightsList.astro";
import Typography from "@/components/atoms/Typography.astro";
import type Skill from "@/core/resume/skill/skill.model";
import type SkillLibrary from "@/core/skill/skill-library.model";
import { getSkills } from "@/core/skill/skill-library.service";
import { type Lang, useTranslations } from "@/i18n";

interface Props {
	skills?: Skill[];
}

const { skills = [] } = Astro.props as Props;
const currentLocale = Astro.params.lang as Lang;
const t = useTranslations(currentLocale);

const matchedSkills: SkillLibrary[] = await getSkills({ icon: true });
const skillMap = new Map(
	matchedSkills.map((skill: SkillLibrary) => [skill.name.toLowerCase(), skill]),
);

// Define domain groupings with icons
const domains = [
	{
		key: "backend",
		icon: "lucide:server",
		keywords: ["Backend", "API", "Microservices", "Spring", "Kotlin", "Java", "Node.js", "REST", "GraphQL"]
	},
	{
		key: "cloud",
		icon: "lucide:cloud",
		keywords: ["AWS", "Cloud", "Docker", "Kubernetes", "Terraform", "CI/CD", "DevOps", "Azure", "GCP"]
	},
	{
		key: "architecture",
		icon: "lucide:layers",
		keywords: ["Architecture", "DDD", "CQRS", "Event-Driven", "Design Patterns", "Clean Architecture", "SOLID"]
	},
	{
		key: "quality",
		icon: "lucide:test-tube",
		keywords: ["Testing", "TDD", "Quality", "Testcontainers", "JUnit", "CodeQL", "Observability", "Monitoring"]
	}
];

// Group skills by domain
const groupSkillsByDomain = () => {
	const grouped: Record<string, Skill[]> = {};
	
	domains.forEach(domain => {
		grouped[domain.key] = skills.filter(skill => {
			const skillKeywords = skill.keywords?.map(k => k.toLowerCase()) || [];
			const domainKeywords = domain.keywords.map(k => k.toLowerCase());
			
			// Check if skill name or any keyword matches domain keywords
			const nameMatch = domainKeywords.some(dk => skill.name.toLowerCase().includes(dk));
			const keywordMatch = skillKeywords.some(sk => 
				domainKeywords.some(dk => sk.includes(dk) || dk.includes(sk))
			);
			
			return nameMatch || keywordMatch;
		});
	});
	
	return grouped;
};

const groupedSkills = groupSkillsByDomain();
---

{skills.length > 0 && (
  <Section title={t("skills")}>
    <div class="space-y-12">
      {domains.map(domain => {
        const domainSkills = groupedSkills[domain.key];
        if (!domainSkills || domainSkills.length === 0) return null;
        
        return (
          <div class="domain-group">
            <div class="flex items-center gap-3 mb-6">
              <div class="p-2 rounded-lg bg-brand-accent/10 text-brand-accent">
                <Icon name={domain.icon} class="w-6 h-6" aria-hidden="true" />
              </div>
              <Typography as="h3" variant="subtitle" class="text-2xl font-bold text-foreground">
                {t(`skills.domain.${domain.key}`)}
              </Typography>
            </div>
            
            <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {domainSkills.map(({ name, keywords = [] }) => {
                const matchedSkill = skillMap.get(name.toLowerCase());
                return (
                  <li>
                    <Card class="h-full hover:border-brand-accent/30 transition-colors">
                      <div class="flex items-start gap-3">
                        <div class="text-brand-accent flex-shrink-0 mt-1">
                          {matchedSkill?.icon && (
                            <Icon name={matchedSkill.icon} class="w-5 h-5" aria-hidden="true" />
                          )}
                        </div>
                        <div class="flex-1 min-w-0">
                          <h4 class="font-semibold text-foreground text-base leading-tight mb-2">
                            {name}
                          </h4>
                          {keywords.length > 0 && (
                            <HighlightsList highlights={keywords.slice(0, 4)} columns={2} />
                          )}
                        </div>
                      </div>
                    </Card>
                  </li>
                );
              })}
            </ul>
          </div>
        );
      })}
    </div>
  </Section>
)}

<style>
  .domain-group {
    scroll-margin-top: 2rem;
  }
</style>
