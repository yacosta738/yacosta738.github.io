---
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";
import { type Lang, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";

interface Props extends HTMLAttributes<"button"> {
	email: string;
	class?: string;
}
const currentLocale = Astro.currentLocale as Lang;
const t = useTranslations(currentLocale);

const { email, class: className } = Astro.props;

const obfuscatedEmail = email
	? Buffer.from(email.split("").reverse().join("")).toString("base64")
	: null;
---

<obfuscate-email
    data-email={obfuscatedEmail}
    class={cn(className)}
>
    <button aria-label={t("copy.email.address")} type="button">
        <Icon name="lucide:mail" class="size-5" />
    </button>
    <span class="tooltip">{t("email.copied")}</span>
</obfuscate-email>

<style>
    obfuscate-email {
        position: relative;
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        color: var(--color-foreground);
        transition: opacity 0.2s ease-in-out;
    }

    obfuscate-email:hover {
        color: var(--color-brand-accent);
    }

    :global(.dark) obfuscate-email {
        color: var(--color-foreground-muted);
    }

    :global(.dark) obfuscate-email:hover {
        color: var(--color-brand-accent);
    }

    obfuscate-email button {
        background: transparent;
        border: none;
        cursor: pointer;
        color: inherit;
        padding: 0.25rem 0;
        margin: 0;
        display: inline-flex;
        align-items: center;
        transition: color 0.2s ease-in-out;
        vertical-align: baseline;
        line-height: 1;
    }

    obfuscate-email .tooltip {
        position: absolute;
        top: -2.5rem;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgb(31 41 55);
        color: white;
        font-size: 0.75rem;
        border-radius: 0.25rem;
        padding: 0.25rem 0.5rem;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.2s ease-in-out;
        white-space: nowrap;
        z-index: 10;
    }

    obfuscate-email .tooltip.show {
        opacity: 1;
    }
</style>

<script>
    class ObfuscateEmail extends HTMLElement {
        connectedCallback() {
            const button = this.querySelector("button");
            const tooltip = this.querySelector(".tooltip");

            if (!button || !tooltip) return;

            const decodeBase64 = (base64String: string): string => {
                try {
                    const binaryString = window.atob(base64String);
                    const bytes = new Uint8Array(binaryString.length);
                    for (let i = 0; i < binaryString.length; i++) {
                        bytes[i] = binaryString.charCodeAt(i);
                    }
                    return new TextDecoder().decode(bytes);
                } catch (e) {
                    console.error("Failed to decode base64 string:", e);
                    return "";
                }
            };

            button.addEventListener("click", async () => {
                const obfuscatedEmail = this.getAttribute("data-email") || "";
                const decodedEmail = decodeBase64(obfuscatedEmail);
                const originalEmail = decodedEmail.split("").reverse().join("");

                try {
                    await navigator.clipboard.writeText(originalEmail);
                    tooltip.classList.add("show");
                    setTimeout(() => {
                        tooltip.classList.remove("show");
                    }, 2000);
                } catch (err) {
                    console.error("Failed to copy email:", err);
                }
            });
        }
    }
    customElements.define("obfuscate-email", ObfuscateEmail);
</script>
