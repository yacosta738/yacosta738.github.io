---
/**
 * Timeline component.
 * A versatile component for rendering a vertical timeline of events. It can display
 * items with titles, subtitles, dates, summaries, and highlights.
 *
 * @prop {TimelineItem[]} items - An array of items to display in the timeline.
 * @prop {boolean} [showDates=true] - Whether to display the dates for each item.
 * @prop {Lang} [locale="en"] - The locale ('en' or 'es') for date formatting.
 * @prop {"default" | "compact"} [variant="default"] - The visual variant of the timeline.
 */
import type { Lang } from "@/i18n";

export interface TimelineItem {
	title: string;
	subtitle?: string;
	startDate?: Date;
	endDate?: Date | null;
	summary?: string;
	highlights?: string[];
}

// Props interface
interface Props {
	items: TimelineItem[];
	showDates?: boolean;
	locale?: Lang;
	variant?: "default" | "compact";
}

const {
	items,
	showDates = true,
	locale = "en",
	variant = "default",
} = Astro.props as Props;

/**
 * Formats a date for the timeline (e.g., "MAY, 2020").
 * @param {Date} date - The date to format.
 * @param {Lang} locale - The locale to use.
 * @returns {string} The formatted date string.
 */
const formatTimelineDate = (date: Date, locale: Lang): string => {
	const options: Intl.DateTimeFormatOptions = {
		year: "numeric",
		month: "short",
	};
	const formatted = date.toLocaleDateString(
		locale === "es" ? "es-ES" : "en-US",
		options,
	);
	const [month, year] = formatted.split(" ");
	return `${month.toUpperCase().replace(".", "")}, ${year}`;
};
---

<div class="timeline" data-variant={variant}>
	{items.map((item) => (
		<div class="timeline-item">
			{showDates && item.startDate && (
				<div class="timeline-date">
					{formatTimelineDate(item.startDate, locale)}
					{item.endDate && (
						<div class="timeline-end-date">
							{formatTimelineDate(item.endDate, locale)}
						</div>
					)}
				</div>
			)}
			
			<div class="timeline-connector">
				<div class="timeline-line"></div>
				<div class="timeline-dot"></div>
			</div>
			
			<div class="timeline-content">
				<h4 class="timeline-title">{item.title}</h4>
				{item.subtitle && (
					<p class="timeline-subtitle">{item.subtitle}</p>
				)}
				{item.summary && (
					<p class="timeline-summary">{item.summary}</p>
				)}
				{item.highlights && item.highlights.length > 0 && (
					<ul class="timeline-highlights">
						{item.highlights.map((highlight) => (
							<li>{highlight}</li>
						))}
					</ul>
				)}
			</div>
		</div>
	))}
</div>

<style>
	:root {
		--green: #64ffda;
		--navy: #0a192f;
		--light-navy: #112240;
		--lightest-navy: #233554;
		--slate: #8892b0;
		--light-slate: #a8b2d1;
		--lightest-slate: #ccd6f6;
		--white: #e6f1ff;
		--font-mono: 'SF Mono', 'Fira Code', 'Fira Mono', 'Roboto Mono', monospace;
		--font-sans: 'Calibre', 'Inter', 'San Francisco', 'SF Pro Text', -apple-system, system-ui, sans-serif;
		--fz-xs: 13px;
		--fz-sm: 14px;
		--fz-md: 16px;
		--fz-lg: 18px;
		--fz-xl: 20px;
		--fz-xxl: 22px;
		--brand-accent: #10b981;
	}

	/* Dark mode variables */
	.dark {
		--green: var(--brand-accent);
		--navy: #0f172a;
		--light-navy: #1e293b;
		--lightest-navy: #334155;
		--slate: #64748b;
		--light-slate: #94a3b8;
		--lightest-slate: #e2e8f0;
		--white: #f8fafc;
	}

	/* Timeline Styles */
	.timeline {
		position: relative;
		margin-top: 10px;
	}

	.timeline-item {
		display: grid;
		grid-template-columns: 120px 60px 1fr;
		gap: 0;
		margin-bottom: 30px;
		position: relative;
	}

	/* No dates variant */
	.timeline[data-variant="compact"] .timeline-item,
	.timeline:not([data-show-dates]) .timeline-item {
		grid-template-columns: 60px 1fr;
	}

	.timeline[data-variant="compact"] .timeline-date,
	.timeline:not([data-show-dates]) .timeline-date {
		display: none;
	}

	.timeline-date {
		text-align: right;
		padding-right: 20px;
		color: var(--green);
		font-family: var(--font-mono);
		font-size: var(--fz-xs);
		font-weight: 600;
		line-height: 1.2;
	}

	.timeline-end-date {
		margin-top: 5px;
		font-size: 11px;
		opacity: 0.8;
	}

	.timeline-connector {
		position: relative;
		display: flex;
		justify-content: center;
		align-items: flex-start;
		padding-top: 5px;
	}

	.timeline-line {
		position: absolute;
		width: 2px;
		height: 100%;
		background: linear-gradient(180deg, var(--green), rgba(100, 255, 218, 0.2));
		top: 0;
	}

	.timeline-dot {
		position: relative;
		z-index: 10;
		width: 12px;
		height: 12px;
		background: var(--green);
		border: 3px solid var(--navy);
		border-radius: 50%;
		box-shadow: 0 0 0 3px var(--green);
	}

	.timeline-content {
		padding-left: 20px;
	}

	.timeline-title {
		margin: 0 0 8px 0;
		font-size: var(--fz-lg);
		font-weight: 500;
		color: var(--lightest-slate);
	}

	.timeline-subtitle {
		margin: 0 0 8px 0;
		font-size: var(--fz-sm);
		color: var(--green);
		font-family: var(--font-mono);
	}

	.timeline-summary {
		margin: 0 0 15px 0;
		color: var(--slate);
		font-size: var(--fz-sm);
		line-height: 1.5;
	}

	.timeline-highlights {
		padding: 0;
		margin: 0;
		list-style: none;
		font-size: var(--fz-sm);
	}

	.timeline-highlights li {
		position: relative;
		padding-left: 20px;
		margin-bottom: 8px;
		color: var(--slate);
		line-height: 1.5;
	}

	.timeline-highlights li:before {
		content: "â–¸";
		position: absolute;
		left: 0;
		color: var(--green);
		font-size: 10px;
		line-height: inherit;
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.timeline-item {
			grid-template-columns: 100px 40px 1fr;
		}

		.timeline[data-variant="compact"] .timeline-item,
		.timeline:not([data-show-dates]) .timeline-item {
			grid-template-columns: 40px 1fr;
		}

		.timeline-date {
			padding-right: 15px;
		}

		.timeline-content {
			padding-left: 15px;
		}
	}

	@media (max-width: 600px) {
		.timeline-item {
			grid-template-columns: 1fr;
			gap: 15px;
		}

		.timeline-date {
			text-align: left;
			padding-right: 0;
		}

		.timeline-connector {
			display: none;
		}

		.timeline-content {
			padding-left: 0;
			border-left: 3px solid var(--green);
			padding-left: 15px;
		}
	}

	@media (max-width: 480px) {
		.timeline-content {
			padding-left: 12px;
		}
	}
</style>