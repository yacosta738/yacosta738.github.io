---
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";
import { type Lang, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";

interface Props extends HTMLAttributes<"div"> {
	placeholder?: string;
	showImages?: boolean;
	buttonLabel?: string;
}

const {
	placeholder = undefined,
	showImages = false,
	buttonLabel = undefined,
	class: className,
	...attrs
} = Astro.props;

// Internationalization
const currentLocale: Lang = (Astro.params?.lang ??
	Astro.currentLocale ??
	"en") as Lang;
const t = useTranslations(currentLocale);
const _placeholder = placeholder ?? t("search.placeholder");
const _buttonLabel = buttonLabel ?? t("search.button");
---

<enhanced-search 
  class={cn("search-container", className)} 
  data-placeholder={_placeholder}
  data-show-images={showImages}
  data-search-searching={t("search.searching")}
  data-search-advanced={t("search.advanced_coming_soon")}
  data-search-unavailable={t("search.unavailable")}
  {...attrs}
>
	<!-- Trigger Button -->
  <button
    data-open-modal
    disabled
    aria-label={_buttonLabel}
    aria-keyshortcuts="Control+K"
    class="search-trigger"
  >
		<!-- <SearchIcon size={20} /> -->
    <Icon name="mdi:magnify" size={20} />
  <span class="search-label hidden md:block" aria-hidden="true">{_buttonLabel}</span>
		<kbd class="search-shortcut hidden md:flex">
			<kbd class="shortcut-key">Ctrl</kbd><kbd>K</kbd>
		</kbd>
	</button>

	<!-- Modal Dialog -->
	<dialog aria-label={buttonLabel} class="search-modal">
		<div class="dialog-frame">
			<!-- Close button for mobile -->
      <button data-close-modal class="close-button md:hidden">
        {t("search.cancel")}
      </button>
			<!-- Search Container -->
      {import.meta.env.DEV ? (
        <div class="dev-warning">
          <p>{t("search.dev_unavailable")}</p>
        </div>
      ) : (
				<div class="search-content">
					<div id="enhanced-search__content"></div>
				</div>
			)}
		</div>
	</dialog>
</enhanced-search>

<!-- Platform detection script (inline to avoid flash) -->
<script is:inline>
  (() => {
    const openBtn = document.querySelector('button[data-open-modal]');
    const shortcut = openBtn?.querySelector('.search-shortcut');
    if (!openBtn || !(shortcut instanceof HTMLElement)) return;
    const platformKey = shortcut.querySelector('.shortcut-key');

    // navigator.platform is deprecated; prefer userAgentData.platform when available,
    // fall back to navigator.userAgent. Avoid direct access to navigator.platform to
    // prevent TypeScript deprecation warnings.
    const uaPlatform =
      navigator.userAgentData?.platform ||
      navigator.userAgent ||
      '';

    if (platformKey && /(Mac|iPhone|iPod|iPad)/i.test(uaPlatform)) {
      platformKey.textContent = 'âŒ˜';
      openBtn.setAttribute('aria-keyshortcuts', 'Meta+K');
    }
  })();
</script>

<script>
	class EnhancedSearch extends HTMLElement {
		constructor() {
			super();
			const openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!;
			const closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!;
			const dialog = this.querySelector('dialog')!;
			const dialogFrame = this.querySelector('.dialog-frame')!;

			/** Close modal if user clicks on a link or outside of the modal */
			const onClick = (event: MouseEvent) => {
				const target = event.target as HTMLElement;
				const isLink = target && 'href' in target && typeof target.href === 'string';
				if (
					isLink ||
					(document.body.contains(target) &&
						!dialogFrame.contains(target))
				) {
					closeModal();
				}
			};

			const openModal = (event?: MouseEvent) => {
				dialog.showModal();
				document.body.toggleAttribute('data-search-modal-open', true);
				this.querySelector('input')?.focus();
				event?.stopPropagation();
				window.addEventListener('click', onClick);
			};

			const closeModal = () => dialog.close();

			openBtn.addEventListener('click', openModal);
			openBtn.disabled = false;
			closeBtn?.addEventListener('click', closeModal);

			dialog.addEventListener('close', () => {
				document.body.toggleAttribute('data-search-modal-open', false);
				window.removeEventListener('click', onClick);
			});

			// Listen for keyboard shortcuts
			window.addEventListener('keydown', (e) => {
				if ((e.metaKey === true || e.ctrlKey === true) && e.key === 'k') {
					dialog.open ? closeModal() : openModal();
					e.preventDefault();
				}
			});

			// Initialize Pagefind when needed
			this.initializeSearch();
		}

		async initializeSearch() {
			if (import.meta.env.DEV) return;

			const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
			onIdle(async () => {
				try {
					// Construct the correct path for pagefind-ui.js
					const baseUrl = import.meta.env.BASE_URL || '/';
					// Ensure we don't create protocol-relative URLs like //pagefind/...
					const pagefindPath = baseUrl === '/' ? '/pagefind/pagefind-ui.js' : `${baseUrl}/pagefind/pagefind-ui.js`.replace(/\/+/g, '/');
					
					// Load pagefind-ui.js as a script since it's not an ES module
					await new Promise((resolve, reject) => {
						const script = document.createElement('script');
						script.src = pagefindPath;
						script.onload = resolve;
						script.onerror = reject;
						document.head.appendChild(script);
					});

					// Now PagefindUI should be available on window
					if (!window.PagefindUI) throw new Error('PagefindUI not found on window');
					
					const host = this.closest('enhanced-search') as HTMLElement | null;
					if (!host) return;

					const searchContent = this.querySelector('#enhanced-search__content');
					if (!searchContent) return;

					new window.PagefindUI({
						element: searchContent,
						showImages: host.dataset.showImages === 'true',
						placeholder: host.dataset.placeholder,
						translations: {
							placeholder: host.dataset.placeholder,
							search_label: host.dataset.placeholder,
						}
					});
				} catch (error) {
					console.warn('Failed to initialize search:', error);
					this.fallbackToSimpleSearch();
				}
			});
		}

		fallbackToSimpleSearch() {
      const searchContent = this.querySelector('#enhanced-search__content');
    // `closest` returns Element | null; cast to HTMLElement to access `dataset` safely.
    const host = this.closest('enhanced-search') as HTMLElement | null;
    const unavailableMsg = host?.dataset.searchUnavailable || 'Search not available';
      if (searchContent) {
        searchContent.innerHTML = `<p class="text-center text-foreground-muted p-4">${unavailableMsg}</p>`;
      }
		}
	}

	customElements.define('enhanced-search', EnhancedSearch);
</script>

<style is:global>
  /* Enhanced Search Container */
  enhanced-search {
    display: contents;
  }

  /* Search Trigger Button */
  .search-trigger {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border: 0;
    background-color: transparent;
    color: var(--color-foreground);
    cursor: pointer;
    height: 2.5rem;
    font-size: 0.9rem;
    padding: 0;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
    min-width: 2.5rem;
    justify-content: center;
  }

  .search-trigger:hover {
    color: var(--color-brand-accent);
    background-color: var(--color-background-secondary);
  }

  .search-trigger:focus {
    outline: 2px solid var(--color-brand-accent);
    outline-offset: 2px;
  }

  /* Desktop trigger styles */
  @media (min-width: 768px) {
    .search-trigger {
      border: 1px solid var(--color-border);
      padding: 0.5rem 0.75rem;
      background-color: var(--color-background);
      color: var(--color-foreground-muted);
      width: 100%;
      max-width: 20rem;
      justify-content: flex-start;
    }

    .search-trigger:hover {
      border-color: var(--color-brand-accent);
      color: var(--color-foreground);
      background-color: var(--color-background);
    }

    .search-trigger .search-shortcut {
      margin-left: auto;
    }
  }

  /* Search Label */
  .search-label {
    font-weight: 500;
  }

  /* Keyboard Shortcut */
  .search-shortcut {
    display: none;
    align-items: center;
    gap: 0.125rem;
    font-size: 0.75rem;
    color: var(--color-foreground-muted);
  }

  .search-shortcut kbd {
    background-color: var(--color-background-secondary);
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    padding: 0.125rem 0.25rem;
    font-family: inherit;
    font-size: 0.75rem;
    line-height: 1;
  }

  @media (min-width: 768px) {
    .search-shortcut {
      display: flex;
    }
  }

  /* Modal Dialog */
  .search-modal {
    margin: 0;
    background-color: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: 0.75rem;
    width: 100%;
    max-width: 100%;
    height: 100%;
    max-height: 100%;
    box-shadow: 
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    padding: 0;
  }

  .search-modal[open] {
    display: flex;
  }

  .search-modal::backdrop {
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(6px);
  }

  /* Dialog Frame */
  .dialog-frame {
    position: relative;
    overflow: hidden;
    flex-direction: column;
    flex-grow: 1;
    gap: 1rem;
    padding: 1rem;
    display: flex;
    height: 100%;
  }

  /* Close Button */
  .close-button {
    position: absolute;
    z-index: 10;
    top: 1rem;
    right: 1rem;
    align-items: center;
    height: 2.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    border-radius: 0.375rem;
    background: var(--color-background);
    cursor: pointer;
    color: var(--color-foreground);
    font-size: 0.875rem;
    display: flex;
  }

  .close-button:hover {
    background-color: var(--color-background-secondary);
  }

  /* Desktop Modal Styles */
  @media (min-width: 768px) {
    .search-modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      margin: 0;
      width: 90%;
      max-width: 48rem;
      height: max-content;
      min-height: 24rem;
      max-height: calc(100vh - 8rem);
    }

    .dialog-frame {
      padding: 2rem;
    }

    .close-button {
      display: none;
    }
  }

  /* Search Content */
  .search-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    min-height: 0;
  }

  /* Dev Warning */
  .dev-warning {
    margin: auto;
    text-align: center;
    color: var(--color-foreground-muted);
    padding: 2rem;
  }

  /* Pagefind UI Customization */
  #enhanced-search__content {
    --pagefind-ui-primary: var(--color-brand-accent);
    --pagefind-ui-text: var(--color-foreground);
    --pagefind-ui-background: var(--color-background);
    --pagefind-ui-border: var(--color-border);
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-border-radius: 0.5rem;
    --pagefind-ui-tag: var(--color-background-secondary);
    --pagefind-ui-font: inherit;
  }

  /* Style search result highlights (mark elements) */
  #enhanced-search__content :global(mark) {
    /* Fallback for browsers without color-mix support */
    background-color: rgba(100, 255, 218, 0.25); /* brand-accent with 25% opacity */
    background-color: color-mix(in srgb, var(--color-brand-accent) 25%, transparent);
    color: var(--color-foreground);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  /* Override pagefind styles */
  :global([data-search-modal-open]) {
    overflow: hidden;
  }

  #enhanced-search__content :global(.pagefind-ui__search-input) {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    color: var(--color-foreground);
    font-size: 1rem;
    padding: 0.75rem 1rem;
    transition: all 0.2s ease;
    width: 100%;
    margin-bottom: 1rem;
  }

  #enhanced-search__content :global(.pagefind-ui__search-input:focus) {
    outline: none;
    border-color: var(--color-brand-accent);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-brand-accent) 15%, transparent);
  }

  #enhanced-search__content :global(.pagefind-ui__results) {
    border: 0;
    background: transparent;
    max-height: 50vh;
    overflow-y: auto;
    flex: 1;
    min-height: 0;
  }

  #enhanced-search__content :global(.pagefind-ui__result) {
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1rem;
    margin-bottom: 0.5rem;
    background: var(--color-background);
    transition: all 0.2s ease;
  }

  #enhanced-search__content :global(.pagefind-ui__result:hover) {
    border-color: var(--color-brand-accent);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  #enhanced-search__content :global(.pagefind-ui__result-link) {
    padding: 0;
    display: block;
    color: var(--color-foreground);
    text-decoration: none;
  }

  #enhanced-search__content :global(.pagefind-ui__result-title) {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-foreground);
  }

  #enhanced-search__content :global(.pagefind-ui__result-excerpt) {
    color: var(--color-foreground-muted);
    font-size: 0.875rem;
    line-height: 1.5;
  }

  #enhanced-search__content :global(.pagefind-ui__result-nested) {
    margin-left: 1rem;
    border-left: 2px solid var(--color-border);
    padding-left: 1rem;
    margin-top: 0.5rem;
  }

  /* Dark mode adjustments */
  :global(.dark) #enhanced-search__content :global(.pagefind-ui__search-input) {
    background: var(--color-background-secondary);
    border-color: var(--color-border);
    color: var(--color-foreground);
  }

  :global(.dark) #enhanced-search__content :global(.pagefind-ui__result) {
    background: var(--color-background-secondary);
  }

  /* Dark mode highlight styling */
  :global(.dark) #enhanced-search__content :global(mark) {
    /* Fallback for browsers without color-mix support */
    background-color: rgba(100, 255, 218, 0.35); /* brand-accent with 35% opacity */
    background-color: color-mix(in srgb, var(--color-brand-accent) 35%, transparent);
    color: var(--color-foreground);
  }

  /* Animation for modal */
  .search-modal {
    animation: modalFadeIn 0.2s ease-out;
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Desktop animation with centering */
  @media (min-width: 768px) {
    @keyframes modalFadeIn {
      from {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
      }
    }
  }

  /* Respect reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .search-trigger,
    #enhanced-search__content :global(.pagefind-ui__result),
    .search-modal {
      transition: none !important;
      animation: none !important;
    }
  }

  /* Focus management */
  #enhanced-search__content :global(.pagefind-ui__result-link:focus) {
    outline: 2px solid var(--color-brand-accent);
    outline-offset: 2px;
  }

  /* Loading states */
  .search-trigger[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Mobile specific adjustments */
  @media (max-width: 767px) {
    .search-trigger {
      width: 2.5rem;
      height: 2.5rem;
    }
    
    .search-modal {
      border-radius: 0;
      border: none;
    }
    
    .dialog-frame {
      padding: 1rem;
      gap: 0.75rem;
    }
    
    #enhanced-search__content :global(.pagefind-ui__search-input) {
      font-size: 16px; /* Prevents zoom on iOS */
    }

    #enhanced-search__content :global(.pagefind-ui__results) {
      max-height: calc(100vh - 12rem);
    }
  }

  /* Ensure text and selection inside the Pagefind UI are visible in dark mode.
     Some pagefind styles or browser selection defaults may produce low-contrast
     combinations when the site uses a dark theme. These rules are scoped to the
     search container to avoid affecting other parts of the site. */
  :global(#enhanced-search__content) {
    /* Force readable colors for titles and excerpts (defensive) */
  }

  :global(.dark) #enhanced-search__content :global(.pagefind-ui__result-title),
  :global(.dark) #enhanced-search__content :global(.pagefind-ui__result-excerpt),
  :global(.dark) #enhanced-search__content :global(.pagefind-ui__result-link) {
    color: var(--color-foreground) !important;
  }

  /* Selection styles scoped to the search content */
  :global(#enhanced-search__content) ::selection {
    background: color-mix(in srgb, var(--color-brand-accent) 25%, transparent);
    color: var(--color-foreground) !important;
  }

  :global(.dark) :global(#enhanced-search__content) ::selection {
    background: color-mix(in srgb, var(--color-brand-accent) 35%, transparent);
    color: var(--color-primary-foreground) !important;
  }
</style>