---
/**
 * LocaleSuggest component.
 * A toast notification that suggests a different language to the user if their
 * browser language doesn't match the current page's language but is available
 * on the site. It uses localStorage to remember the user's choice.
 *
 * @prop {"bottom-left" | "bottom-right" | "top-left" | "top-right" | "bottom-center"} [position="bottom-left"] - The position of the toast on the screen.
 */
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";
import BaseToast from "@/components/atoms/BaseToast.astro";
import { type Lang, LOCALES } from "@/i18n";

interface Props extends HTMLAttributes<"div"> {
	position?:
		| "bottom-left"
		| "bottom-right"
		| "top-left"
		| "top-right"
		| "bottom-center";
}

const { position = "bottom-left", ...attr } = Astro.props;
const currentLocale = Astro.currentLocale as Lang;
---

<BaseToast 
  id="js-languageSuggest" 
  position={position}
  variant="glass"
  size="md"
  showCloseButton={true}
  closeButtonId="js-close"
  closeButtonLabel="Close"
  class="hidden"
  {...attr}
>
  <div class="flex items-center gap-3">
    <div class="shrink-0">
      <Icon name="tabler:language" class="size-5 text-emerald-400 dark:text-[#34d399]" />
    </div>

    <div class="grow">
      <p class="text-sm text-gray-800 dark:text-[#e2e8f0] font-medium">
        <span class="font-normal" id="js-suggestionText"></span>
        <a id="js-link" href="#" class="text-emerald-600 dark:text-[#34d399] hover:text-emerald-700 dark:hover:text-emerald-300 underline-offset-2 hover:underline font-semibold transition-colors duration-200" aria-label="Cambiar idioma">
          <span id="js-linkText"></span>
        </a>
      </p>
    </div>
  </div>
</BaseToast>

<script is:inline define:vars={{ currentLocale, LOCALES }}>
  function initLanguageSuggest() {
    const browserLang = navigator.language.toLowerCase();
    const suggest = document.getElementById("js-languageSuggest");
    
    if (!suggest) return;

    // Translation texts
    const translations = {
      en: { 
        suggestion: "This page is also available in English", 
        close: "Close" 
      },
      es: { 
        suggestion: "Esta página también está disponible en español", 
        close: "Cerrar" 
      },
    };

    // Get the appropriate translation
    function getTranslation() {
      if (translations[browserLang]) {
        return translations[browserLang];
      }
      const baseLang = browserLang.split("-")[0];
      if (translations[baseLang]) {
        return translations[baseLang];
      }
      return translations[currentLocale] || translations["en"];
    }

    const t = getTranslation();

    // Set UI texts
    const suggestionText = document.getElementById("js-suggestionText");
    if (suggestionText) {
      suggestionText.innerText = t.suggestion + ": ";
    }

    // Function to show suggestion
    const showSuggest = (lang) => {
      const pathnames = location.pathname.split("/");
      const link = document.getElementById("js-link");
      const linkText = document.getElementById("js-linkText");

      if (!link || !linkText) return;

      pathnames[1] = lang;
      link.href = pathnames.join("/");
      linkText.innerText = LOCALES[lang].label;

      // Show with animation first
      suggest.classList.remove("hidden");
      setTimeout(() => {
        suggest.classList.remove('translate-y-full', 'opacity-0');
        suggest.classList.add('translate-y-0', 'opacity-100');
        
        // Toast is now visible
      }, 100);
    };

    // Check if we should show the suggestion
    if (
      currentLocale === browserLang ||
      currentLocale === browserLang.split("-")[0] ||
      localStorage.getItem('languageSuggestDenied') ||
      localStorage.getItem('selectedLang')
    ) {
      return;
    } else if (Object.keys(LOCALES).includes(browserLang)) {
      showSuggest(browserLang);
    } else if (Object.keys(LOCALES).includes(browserLang.split("-")[0])) {
      showSuggest(browserLang.split("-")[0]);
    }

    const closeButton = document.getElementById("js-close");
    if (closeButton) {
      closeButton.addEventListener("click", () => {
        // Hide with animation
        suggest.classList.remove('translate-y-0', 'opacity-100');
        suggest.classList.add('translate-y-full', 'opacity-0');
        
        setTimeout(() => {
          suggest.classList.add("hidden");
        }, 500);
        
        localStorage.setItem('languageSuggestDenied', 'true');
      });
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSuggest);
  } else {
    initLanguageSuggest();
  }
</script>