---
import { getCollection, type CollectionEntry } from "astro:content";
import { type Article, jsonToArticle } from "@models:Article";
import BlogTemplate from "templates:BlogTemplate";
import ArticleSummary from "molecules:ArticleSummary";
import { getLangFromUrl, useTranslations } from "@i18n:utils";
import type { GetStaticPaths } from "astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export const getStaticPaths: GetStaticPaths = async () => {
	const categories: CollectionEntry<"categories">[] =
		await getCollection("categories");
	return categories.map((category) => ({
		params: { category: category.data.title },
	}));
};

const { category } = Astro.params;

const [categories, blogPosts] = await Promise.all([
	getCollection("categories"),
	getCollection("blog", ({ data }) => !data.draft),
]);

const currentCategory = categories.find((cat) => cat.data.title === category);
const posts: Article[] = currentCategory
	? await Promise.all(
			blogPosts
				.filter((post) =>
					post.data.categories?.some((cat) => cat.id === currentCategory.id),
				)
				.map(jsonToArticle),
		)
	: [];

const categoryPosts: Article[] = posts;
---

<BlogTemplate
	title={`${t('blog')} | ${category}`}
	description={`${t('blogDescription')} ${category}`}
>
	<div class="container mx-auto">
		{
			categoryPosts.map((post) => (
				<article class="mx-2 mb-20 border-b border-gray-400 md:mx-24">
					<ArticleSummary article={post} />
				</article>
			))
		}
		{
			categoryPosts.length === 0 && (
				<div class="container-inner mx-auto py-16 pl-10">
					<div class="text-center">
						<h1 class="text-3xl font-bold">{t('noArticlesFound')}</h1>
						<p class="text-gray-600">{t('tryAgain')}</p>
					</div>
				</div>
			)
		}
	</div>
</BlogTemplate>
