---
import { getCollection, type CollectionEntry } from 'astro:content';
import { type Article, jsonToArticle } from '@models:Article';
import BlogTemplate from 'templates:BlogTemplate';
import ArticleSummary from 'molecules:ArticleSummary';
import { getLangFromUrl, useTranslations } from '@i18n:utils';
import type { GetStaticPaths } from 'astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export const getStaticPaths: GetStaticPaths = async () => {
	const tags: CollectionEntry<'tags'>[] = await getCollection('tags');
	return tags.map((tag) => ({
		params: { tag: tag.data.title.toLowerCase() },
	}));
};

const { tag } = Astro.params;

const [tags, blogPosts] = await Promise.all([
	getCollection('tags'),
	getCollection('blog', ({ data }) => !data.draft),
]);

const currentTag = tags.find((t) => t.data.title.toLowerCase() === String(tag).toLowerCase());
const posts: Article[] = currentTag
	? await Promise.all(
			blogPosts
				.filter((post) => post.data.tags?.some((t: { id: string }) => t.id === currentTag.id))
				.map(jsonToArticle)
		)
	: [];
const tagPosts: Article[] = posts;
---

<BlogTemplate title={`${t('blog')} | ${tag}`} description={`${t('blogDescription')} ${tag}`}>
	<div class="container mx-auto">
		{
			tagPosts.map((post) => (
				<article class="mx-2 mb-20 border-b border-gray-400 md:mx-24">
					<ArticleSummary article={post} />
				</article>
			))
		}
		{
			tagPosts.length === 0 && (
				<div class="container-inner mx-auto py-16 pl-10">
					<div class="text-center">
						<h1 class="text-3xl font-bold">{t('noArticlesFound')}</h1>
						<p class="text-gray-600">{t('tryAgain')}</p>
					</div>
				</div>
			)
		}
	</div>
</BlogTemplate>
