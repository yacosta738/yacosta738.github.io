---
import { getCollection, getEntry } from "astro:content";
import i18next, { t, changeLanguage, setDefaultNamespace } from "i18next";
import { type Article, jsonToArticle } from "@models:Article";
import BlogTemplate from "templates:BlogTemplate";
import ArticleSummary from "molecules:ArticleSummary";

changeLanguage("es");

export async function getStaticPaths() {
    const publishedBlogEntriesPromises = (await getCollection("blog", ({ data }) => {
        return !data.draft && data.lang === i18next.language;
    })).map(async (publishedBlogEntry) => await jsonToArticle(publishedBlogEntry));
    const publishedBlogEntries = await Promise.all(publishedBlogEntriesPromises);
    const uniqueTags = [...new Set(publishedBlogEntries.map((post) => post.tags).flat())];
    return uniqueTags.map((tag) => {
        return {
            params: { tag: tag.toLowerCase() },
            props: { posts: publishedBlogEntries.filter((post) => post.tags.includes(tag)) }
        };
    });
}
interface Props {
    tag: string;
    posts: Article[];
}
const { tag } = Astro.params;
const { posts } = Astro.props;
setDefaultNamespace("blog");
---

<BlogTemplate title={`${t("blog")} | ${tag}`} description={`${t("blog-description")} ${tag}`}>
  <div class="tainer mx-auto">
    {
      posts.map((post) => (
        <article class="mx-2 mb-20 border-b border-gray-400 md:mx-24">
          <ArticleSummary article={post} />
        </article>
      ))
    }
    {
      posts.length === 0 && (
        <div class="container-inner mx-auto py-16 pl-10">
          <div class="text-center">
            <h1 class="text-3xl font-bold">{t("no-articles-found")}</h1>
            <p class="text-gray-600">{t("try-again")}</p>
          </div>
        </div>
      )
      }
      </div>
      </BlogTemplate>
