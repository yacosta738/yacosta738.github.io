---
import { getCollection } from 'astro:content';
import BlogTemplate from 'templates:BlogTemplate';
import { jsonToArticle, type Article } from '@models:Article';
import ArticleSummary from 'molecules:ArticleSummary';
import Paginator from 'molecules:Paginator';
import { getLangFromUrl, useTranslations } from '@i18n:utils';
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export const getStaticPaths = (async ({ paginate }) => {
	const allPosts = await getCollection('blog', ({ data }) => {
		return !data.draft;
	});

	const processedPosts = allPosts.map((post) => {
		const idParts = post.id.split('/');
		const lang = idParts[0] === 'es' ? 'es' : 'en';
		return {
			...post,
			lang,
		};
	});

	// Filter for English posts (those without 'es/' prefix)
	const englishPosts = processedPosts
		.filter((post) => post.lang === 'en')
		.map((post) => jsonToArticle(post));

	const sortedPosts = (await Promise.all(englishPosts)).sort((a, b) => {
		return new Date(b.date).getTime() - new Date(a.date).getTime();
	});

	return paginate(sortedPosts, { pageSize: 5 });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page } = Astro.props;
---

<BlogTemplate title={t('blog')} description={t('blogDescription')}>
	<div class="container mx-auto w-full">
		{
			page.data.map((article: Article) => (
				<article class="mx-2 mb-20 border-b border-gray-400 md:mx-24">
					<ArticleSummary article={article} />
				</article>
			))
		}
		{
			page.data.length === 0 && (
				<div class="container-inner mx-auto py-16 pl-10">
					<div class="text-center">
						<h1 class="text-3xl font-bold">{t('noArticlesFound')}</h1>
						<p class="text-gray-600">{t('tryAgain')}</p>
					</div>
				</div>
			)
		}
		<!-- pagination -->
		<Paginator page={page} />
	</div>
</BlogTemplate>
