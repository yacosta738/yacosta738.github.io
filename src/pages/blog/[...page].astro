---
import i18next, { t, changeLanguage, setDefaultNamespace } from "i18next";
import BlogTemplate from "templates:BlogTemplate";
import { type Article, jsonToArticle } from "@models:Article";
import ArticleSummary from "molecules:ArticleSummary";
import Paginator from "molecules:Paginator";
import SearchBox from "molecules:SearchBox";

changeLanguage("en");

const allPosts = await Astro.glob("./**/*.md");
const sortedPosts = allPosts
    .filter((post) => !post.frontmatter.draft && post.frontmatter.lang === i18next.language)
    .map((post) => jsonToArticle(post))
    .sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf());
export async function getStaticPaths({ paginate }) {
    // The getStaticPaths() function executes in its own isolated scope once, before any page loads. Therefore you canâ€™t reference anything from its parent scope, other than file imports. The compiler will warn if you break this requirement.
    const allPosts = await Astro.glob("./**/*.md");
    const sortedPosts = allPosts
        .filter((post) => !post.frontmatter.draft && post.frontmatter.lang === i18next.language)
        .map((post) => jsonToArticle(post))
        .sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf());
    return paginate(sortedPosts, {
        pageSize: 5
    });
}
const { page } = Astro.props;
setDefaultNamespace("blog");
---

<BlogTemplate title={t('blog')} description={t('blog-description')}>
	<SearchBox articles={sortedPosts} />
	<div class='container mx-auto'>
		{
			page.data.map((post: Article) => (
				<article class='mx-2 mb-20 border-b border-gray-400 md:mx-24'>
					<ArticleSummary article={post} />
				</article>
			))
		}
		{
			page.data.length === 0 && (
				<div class='container-inner mx-auto py-16 pl-10'>
					<div class='text-center'>
						<h1 class='text-3xl font-bold'>{t('no-articles-found')}</h1>
						<p class='text-gray-600'>{t('try-again')}</p>
					</div>
				</div>
			)
		}
		<!-- pagination -->
		<Paginator page={page} />
	</div>
</BlogTemplate>
