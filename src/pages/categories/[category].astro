---
import { getCollection, type CollectionEntry } from 'astro:content';
import { type Article, jsonToArticle } from '@models:Article';
import BlogTemplate from 'templates:BlogTemplate';
import ArticleSummary from 'molecules:ArticleSummary';
import { getLangFromUrl, useTranslations } from '@i18n:utils';
import type { GetStaticPaths } from 'astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Props {
	tag: string;
	posts: Article[];
}

export const getStaticPaths = (async () => {
	const allPosts = await getCollection('blog', ({ data }) => {
		return !data.draft;
	});

	const processedPosts = allPosts.map((post) => {
		const slugParts = post.slug.split('/');
		const lang = slugParts[0] === 'es' ? 'es' : 'en';
		return {
			...post,
			lang,
		};
	});

	// Filter for English posts only
	const englishPosts = processedPosts.filter((post) => post.lang === 'en');

	// Get unique categories
	const categories = [...new Set(englishPosts.flatMap((post) => post.data.categories || []))];

	return categories.map((category) => {
		const filteredPosts = englishPosts
			.filter((post) => post.data.categories?.includes(category))
			.map((post) => jsonToArticle(post));

		return {
			params: { category },
			props: { posts: filteredPosts, category },
		};
	});
}) satisfies GetStaticPaths;

const { category } = Astro.params;
const { posts } = Astro.props;
const categoryPosts = posts;
---

<BlogTemplate
	title={`${t('blog')} | ${category}`}
	description={`${t('blogDescription')} ${category}`}
>
	<div class="container mx-auto">
		{
			categoryPosts.map((post) => (
				<article class="mx-2 mb-20 border-b border-gray-400 md:mx-24">
					<ArticleSummary article={post} />
				</article>
			))
		}
		{
			categoryPosts.length === 0 && (
				<div class="container-inner mx-auto py-16 pl-10">
					<div class="text-center">
						<h1 class="text-3xl font-bold">{t('noArticlesFound')}</h1>
						<p class="text-gray-600">{t('tryAgain')}</p>
					</div>
				</div>
			)
		}
	</div>
</BlogTemplate>
