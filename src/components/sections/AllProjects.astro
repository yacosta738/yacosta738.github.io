---
/**
 * AllProjects section component.
 * This component displays a grid of "other noteworthy projects" - those not
 * marked as featured. It uses the `EnhancedProjectCard` for rendering and
 * includes a "Show More" button to dynamically load the rest of the projects.
 *
 * @prop {Project[]} [projects=[]] - An array of project objects from the resume.
 * @prop {number} [limit=6] - The number of projects to display initially.
 */
import EnhancedProjectCard from "@/components/molecules/EnhancedProjectCard.astro";
import type Project from "@/core/resume/project/project.model";
import {
	type EnhancedProject,
	getAllProjects,
} from "@/core/resume/project/project.service";
import { type Lang, tr, useTranslatedPath, useTranslations } from "@/i18n";

interface Props {
	projects?: Project[];
	limit?: number;
}

const { projects = [], limit = 6 } = Astro.props as Props;
const currentLocale = Astro.params.lang as Lang;
const t = useTranslations(currentLocale);
const translatePath = useTranslatedPath(currentLocale);

const allEnhancedProjects: EnhancedProject[] = await getAllProjects(projects);
const otherProjects = allEnhancedProjects.filter(
	(project) => !project.metadata?.featured,
);
const initialProjects = otherProjects.slice(0, limit);
const hasMoreProjects = otherProjects.length > limit;

const translated = (
	key: string,
	params: Record<string, unknown> = {},
	fallback = "",
) => {
	return tr(t, key, params, fallback);
};
---

{otherProjects.length > 0 && (
  <section class="projects-section flex flex-col items-center">
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-4 text-foreground">
      {translated('otherNoteworthyProjects', {}, 'Other Noteworthy Projects')}
    </h2>
    <a href={translatePath('/projects')} class="archive-link text-primary hover:underline mb-12">
      {translated('viewArchive', {}, 'View the Archive')}
    </a>

    <ul 
      class="projects-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 w-full mb-12 max-w-7xl"
      id="projects-grid"
      style="grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));"
    >
      {
        initialProjects.map((project) => (
          <li class="project-item opacity-0" data-project-item>
            <EnhancedProjectCard
              name={project.name}
              description={project.description}
              tech={project.metadata?.tech || []}
              url={project.metadata?.url || project.url}
              github={project.metadata?.repository || project.github}
              isActive={project.isActive}
              class="h-full"
            />
          </li>
        ))
      }

      {hasMoreProjects && (
        <template id="additional-projects">
          {
            otherProjects.slice(limit).map((project) => (
              <li class="project-item hidden opacity-0" data-additional-project data-project-item>
                <EnhancedProjectCard
                  name={project.name}
                  description={project.description}
                  tech={project.metadata?.tech || []}
                  url={project.metadata?.url || project.url}
                  github={project.metadata?.repository || project.github}
                  isActive={project.isActive}
                  class="h-full"
                />
              </li>
            ))
          }
        </template>
      )}
    </ul>

    {hasMoreProjects && (
      <button
        id="toggle-projects-btn"
        class="more-button px-8 py-3 border-2 border-primary text-primary bg-transparent hover:bg-primary hover:text-primary-foreground transition-all duration-300 rounded font-medium text-sm uppercase tracking-wide flex items-center justify-center gap-2"
        data-show-text={translated('showMore', {}, 'Show More')}
        data-hide-text={translated('showLess', {}, 'Show Less')}
        aria-expanded="false"
      >
        <span id="toggle-btn-text">{translated('showMore', {}, 'Show More')}</span>
        <span id="toggle-btn-spinner" class="hidden w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin"></span>
      </button>
    )}
  </section>
)}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('toggle-projects-btn');
    const btnText = document.getElementById('toggle-btn-text');
    const btnSpinner = document.getElementById('toggle-btn-spinner');
    const projectsGrid = document.getElementById('projects-grid');
    const projectItems = document.querySelectorAll('[data-project-item]');
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    if (!prefersReducedMotion) {
      projectItems.forEach((item, index) => {
        setTimeout(() => {
          (item as HTMLElement).style.animation = `fadeInUp 0.6s ease-out ${index * 100}ms both`;
          (item as HTMLElement).classList.remove('opacity-0');
        }, index * 100);
      });
    } else {
      projectItems.forEach((item) => {
        (item as HTMLElement).classList.remove('opacity-0');
      });
    }

    if (toggleBtn && projectsGrid && btnText && btnSpinner) {
      let isExpanded = false;
      let isLoading = false;

      const updateButtonVisibility = () => {
        const additionalProjects = projectsGrid.querySelectorAll('[data-additional-project]');
        const allProjectsShown = Array.from(additionalProjects).every(
          (project) => !project.classList.contains('hidden')
        );

        // Hide button if all projects are shown
        if (allProjectsShown) {
          toggleBtn.style.display = 'none';
        } else {
          toggleBtn.style.display = '';
        }
      };

      toggleBtn.addEventListener('click', () => {
        if (isLoading) return;
        isLoading = true;
        btnSpinner.classList.remove('hidden');
        btnText.classList.add('opacity-50');
        toggleBtn.setAttribute('aria-busy', 'true');

        setTimeout(() => {
          const additionalProjects = projectsGrid.querySelectorAll('[data-additional-project]');
          const showText = toggleBtn.getAttribute('data-show-text') || 'Show More';
          const hideText = toggleBtn.getAttribute('data-hide-text') || 'Show Less';

          if (!isExpanded) {
            additionalProjects.forEach((project, index) => {
              const element = project as HTMLElement;
              element.classList.remove('hidden');
              if (!prefersReducedMotion) {
                setTimeout(() => {
                  element.style.animation = `fadeInUp 0.6s ease-out ${index * 100}ms both`;
                  element.classList.remove('opacity-0');
                }, index * 50);
              } else {
                element.classList.remove('opacity-0');
              }
            });
            btnText.textContent = hideText;
            isExpanded = true;
            updateButtonVisibility();
          } else {
            additionalProjects.forEach((project) => {
              const element = project as HTMLElement;
              if (!prefersReducedMotion) {
                element.style.animation = 'fadeOutDown 0.3s ease-in both';
                setTimeout(() => {
                  element.classList.add('hidden', 'opacity-0');
                  element.style.animation = '';
                }, 300);
              } else {
                element.classList.add('hidden', 'opacity-0');
              }
            });
            btnText.textContent = showText;
            isExpanded = false;
            updateButtonVisibility();
          }
          btnSpinner.classList.add('hidden');
          btnText.classList.remove('opacity-50');
          toggleBtn.removeAttribute('aria-busy');
          isLoading = false;
        }, 500); // Simulate loading
      });

      // Update visibility on load
      updateButtonVisibility();
    }
  });
</script>

<style>
  .projects-section {
    --transition-timing: cubic-bezier(0.645, 0.045, 0.355, 1);
  }

  .projects-grid {
    position: relative;
  }

  @media (max-width: 1080px) {
    .projects-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)) !important;
    }
  }

  .more-button {
    font-family: var(--font-mono, 'Courier New', monospace);
    letter-spacing: 0.05em;
    transition: all 0.25s var(--transition-timing);
  }

  .more-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 30px -15px rgba(var(--primary-rgb, 100 116 139), 0.4);
  }

  .archive-link::after {
    bottom: 0.1em;
  }
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translate3d(0, 30px, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }

  @keyframes fadeOutDown {
    from {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
    to {
      opacity: 0;
      transform: translate3d(0, 20px, 0);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .more-button:hover {
      transform: none;
    }
    
    .project-item {
      animation: none !important;
    }
    
    @keyframes fadeInUp {
      from, to {
        opacity: 1;
        transform: none;
      }
    }
    
    @keyframes fadeOutDown {
      from, to {
        opacity: 0;
        transform: none;
      }
    }
  }
  .more-button:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .projects-grid {
    grid-gap: 15px;
  }

  @media (min-width: 768px) {
    .projects-grid {
      grid-gap: 20px;
    }
  }
</style>