---
import { Role } from '@models:Job'
import AchievementDetails from 'molecules:AchievementDetails'

export interface Props {
	roles: Role[]
}

const { roles = [] } = Astro.props

const rolesOrdered =
	[...roles]?.sort((a, b) => {
		const aDate = new Date(a.startDate ?? Date.now())
		const bDate = new Date(b.startDate ?? Date.now())
		return bDate.getTime() - aDate.getTime()
	}) ?? roles

const hasMultipleRoles = rolesOrdered.length > 1
---

{
	hasMultipleRoles ? (
		<ol class='relative border-l border-light-slate dark:border-gray-700 mx-4 px-4'>
			{rolesOrdered.map((rol) => (
				<li class='mb-10 ml-8'>
					<span class='absolute flex items-center justify-center w-6 h-6 bg-red-100 rounded-full -left-3 ring-2 ring-navy dark:ring-gray-900 dark:bg-blue-900'>
						<svg
							aria-hidden='true'
							class='w-3 h-3 text-blue-800 dark:text-blue-300'
							fill='currentColor'
							viewBox='0 0 20 20'
							xmlns='http://www.w3.org/2000/svg'
						>
							<path
								fill-rule='evenodd'
								d='M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z'
								clip-rule='evenodd'
							/>
						</svg>
					</span>
					<AchievementDetails rol={rol} hasMultipleRoles={hasMultipleRoles} />
				</li>
			))}
		</ol>
	) : (
		<div class='flex flex-col items-center justify-center px-14'>
			<AchievementDetails rol={rolesOrdered[0]} hasMultipleRoles={hasMultipleRoles} />
		</div>
	)
}
