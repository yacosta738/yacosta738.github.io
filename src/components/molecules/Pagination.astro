---
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";

export interface Props extends HTMLAttributes<"nav"> {
	currentPage: number;
	lastPage: number;
	urlPrev: string | null;
	urlNext: string | null;
	basePath: string;
	maxDisplayedPages: number;
	firstPageUrl?: string; // Add option to specify a different URL for the first page
}

const {
	currentPage,
	lastPage,
	urlPrev,
	urlNext,
	basePath,
	maxDisplayedPages = 5,
	firstPageUrl,
	...attrs
} = Astro.props;

const startPage = Math.max(
	1,
	Math.min(
		currentPage - Math.floor(maxDisplayedPages / 2),
		lastPage - maxDisplayedPages + 1,
	),
);
const endPage = Math.min(lastPage, startPage + maxDisplayedPages - 1);

function ensureTrailingSlash(path: string) {
	return path.endsWith("/") ? path : `${path}/`;
}

const computedBasePath = basePath ? ensureTrailingSlash(basePath) : "/page/";

// Generate page URLs, using firstPageUrl for page 1 if provided
function getPageUrl(pageNumber: number): string {
	if (pageNumber === 1 && firstPageUrl) {
		return firstPageUrl;
	}
	return `${computedBasePath}${pageNumber}`;
}
---

<nav
  class="mt-8 flex items-center justify-center gap-x-1"
  aria-label="Pagination"
  {...attrs}
>
  {
    urlPrev ? (
      <a
        href={urlPrev}
        aria-label="Previous page"
        class="inline-flex min-h-[38px] min-w-[38px] items-center justify-center gap-x-1.5 rounded-lg px-2.5 py-2 text-sm text-neutral-800 hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-hidden dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10"
      >
        <Icon name="tabler:chevron-left" class="icon-base" />
      </a>
    ) : (
      <span
        aria-disabled="true"
        class="inline-flex min-h-[38px] min-w-[38px] items-center justify-center gap-x-1.5 rounded-lg px-2.5 py-2 text-sm text-neutral-400 cursor-not-allowed"
      >
        <Icon name="tabler:chevron-left" class="icon-base" />
      </span>
    )
  }
  <ul class="flex items-center gap-x-1">
    {
      Array.from({ length: endPage - startPage + 1 }, (_, i) => {
        const pageNumber = startPage + i;
        const isActive = currentPage === pageNumber;
        const pageClass = `min-h-[38px] min-w-[38px] flex justify-center items-center py-2 px-3 text-sm rounded-lg ${isActive ? "bg-neutral-200 focus:bg-neutral-300 dark:bg-neutral-600 dark:focus:bg-neutral-500 dark:text-white" : "text-neutral-800 hover:bg-neutral-100 focus:outline-hidden focus:bg-neutral-100 dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10"}`;
        return (
          <li>
            <a
              href={getPageUrl(pageNumber)}
              class={pageClass}
              aria-current={isActive ? "page" : undefined}
            >
              {pageNumber}
            </a>
          </li>
        );
      })
    }
  </ul>
  {
    urlNext ? (
      <a
        href={urlNext}
        aria-label="Next page"
        class="inline-flex min-h-[38px] min-w-[38px] items-center justify-center gap-x-1.5 rounded-lg px-2.5 py-2 text-sm text-neutral-800 hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10"
      >
        <Icon name="tabler:chevron-right" class="icon-base" />
      </a>
    ) : (
      <span
        aria-disabled="true"
        class="inline-flex min-h-[38px] min-w-[38px] items-center justify-center gap-x-1.5 rounded-lg px-2.5 py-2 text-sm text-neutral-400 cursor-not-allowed"
      >
        <Icon name="tabler:chevron-right" class="icon-base" />
      </span>
    )
  }
</nav>
