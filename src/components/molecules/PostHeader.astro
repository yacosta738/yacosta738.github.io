---
import { getLangFromUrl, useTranslatedPath, useTranslations } from '@i18n:utils';
import type { Article } from '@models:Article';
import { urlize } from '@utils:utilities';
import { Icon } from 'astro-icon/components';

export interface Props {
	article: Article;
}
const { article } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
const t = useTranslations(lang);

const DAYS_BEFORE_FULL_DATE = 3 * 24 * 60 * 60 * 1000;
const formatDateRelativeToNow = (date: Date) => {
	const rtf = new Intl.RelativeTimeFormat(lang);
	const daysDiff = Math.round((date.getTime() - Date.now()) / 1000 / 60 / 60 / 24);
	return rtf.format(daysDiff, 'day');
};

const formatDate = (date: Date | string) => {
	if (typeof date === 'string') {
		date = new Date(date);
	}

	// if the date is 3 days ago or more, show the full date instead of the relative date
	if (date.getTime() < Date.now() - DAYS_BEFORE_FULL_DATE) {
		return date.toLocaleDateString('en', {
			year: 'numeric',
			month: 'long',
			day: 'numeric',
		});
	} else {
		return formatDateRelativeToNow(date);
	}
};
---

<ul
	class="relative mb-4 flex list-none flex-col items-center p-0 font-mono text-sm text-light-slate md:flex-row"
>
	{
		article.date && (
			<li class="mx-1 my-2 flex items-center whitespace-nowrap">
				<Icon name="mdi:calendar-month-outline" class="h-4" />
				<span class="mx-2">{formatDate(article.date)}</span>
			</li>
		)
	}
	{
		article.timeToRead && (
			<li class="mx-1 my-2 whitespace-nowrap">
				<span>{t('timeToRead', { timeToRead: article.timeToRead })}</span>
			</li>
		)
	}
	{
		article.author && (
			<li class="mx-1 my-2 whitespace-nowrap">
				<span class="mr-1">{t('author')}</span>
				<a href={translatePath(`/authors/${urlize(article.author)}`)} class="inline-link">
					{article.author}
				</a>
			</li>
		)
	}
</ul>
