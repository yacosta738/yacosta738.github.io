---
import type { HTMLAttributes } from "astro/types";
import type Article from "@/core/article/article.model";
import {
	getSelectionStrategy,
	type SortingStrategy,
} from "@/core/article/article-selection.strategy";
import { type Lang, useTranslations } from "@/i18n";
import {
	type BlogPost,
	getBlogPostRel,
	getBlogPostTarget,
	getBlogPostUrl,
	isExternalArticle,
} from "@/lib/blog-post.utils";
import { cn } from "@/lib/utils";
import CtaNewsletterSubscription from "../organisms/CtaNewsletterSubscription.astro";
import ArticleCard from "./ArticleCard.astro";

const currentLocale = Astro.currentLocale as Lang;
const t = useTranslations(currentLocale);

interface Props extends HTMLAttributes<"div"> {
	posts: BlogPost[];
	selectionStrategy?: SortingStrategy;
}
const { posts, selectionStrategy = "newest", ...attrs } = Astro.props;

// Get the appropriate selection strategy using the Strategy pattern
const strategy = getSelectionStrategy(selectionStrategy);

// Separate featured and non-featured articles (only regular articles can be featured)
const featuredPosts = posts.filter(
	(post): post is Article =>
		!isExternalArticle(post) && "featured" in post && post.featured,
);
const regularPosts = posts.filter(
	(post) => isExternalArticle(post) || !("featured" in post) || !post.featured,
);

// Determine total number of articles to display
const totalPosts = posts.length;

// Calculate how many large layout positions we need
// Currently using the same logic: every 7th item starting from index 2
const largePositions: number[] = [];
for (let i = 2; i < totalPosts; i += 7) {
	largePositions.push(i);
}

// Use featured articles for large positions first, then fill with selected regular articles
let regularPostsToUse = [...regularPosts];
const largeArticles: BlogPost[] = [...featuredPosts];

// If we need more large articles than we have featured ones, select from regular posts
if (largePositions.length > featuredPosts.length) {
	const neededRegular = largePositions.length - featuredPosts.length;
	// Use our strategy to select articles (only from non-external articles for large display)
	const regularArticlesOnly = regularPosts.filter(
		(post): post is Article => !isExternalArticle(post),
	);
	const selectedRegular = strategy.select(regularArticlesOnly, neededRegular);
	largeArticles.push(...selectedRegular);

	// Remove the selected regular articles from the pool
	const selectedIds = new Set(selectedRegular.map((post) => post.id));
	regularPostsToUse = regularPostsToUse.filter(
		(post) => !selectedIds.has(post.id),
	);
}

// Combine all articles for display, ensuring large articles are placed in large positions
const finalDisplayPosts: BlogPost[] = [];
let largeIndex = 0;
let regularIndex = 0;

// Construct the final array with large articles in the correct positions
for (let i = 0; i < totalPosts; i++) {
	if (largePositions.includes(i) && largeIndex < largeArticles.length) {
		// This is a large position, use a large article
		finalDisplayPosts[i] = largeArticles[largeIndex];
		largeIndex++;
	} else if (regularIndex < regularPostsToUse.length) {
		// Regular position, use a regular article
		finalDisplayPosts[i] = regularPostsToUse[regularIndex];
		regularIndex++;
	}
	// Skip if we run out of articles
}
---

<div class={cn("backgrounds grid-container relative", attrs.class)} {...attrs}>
  <ul
    class="grid gap-5 md:grid-flow-row-dense md:grid-cols-2 lg:grid-cols-3"
    role="list"
    aria-label={t("news.articles")}
    aria-labelledby="articles"
  >
    {finalDisplayPosts.map((post, index) => {
      // Determine special grid classes based on position
      let specialClasses = "";

      // Apply large layout to positions defined in largePositions array
      if (largePositions.includes(index)) {
        specialClasses = "md:col-span-2 md:row-span-2";
      }

      // Set loading strategy: eager for first 6 articles that are likely in initial viewport
      const imageLoading = index < 6 ? "eager" : "lazy";

      // If this would be the 7th item (index 6), insert the submit site element instead
      if (index === 6) {
        return (
          <li class="md:col-span-2 lg:col-span-3">
            <aside
              class="flex flex-col items-center gap-6 py-6 rounded-lg shadow-md"
            >
              <CtaNewsletterSubscription
								formId="cta-newsletter-subscription-form"
								title={t("cta.title")}
								description={t("cta.description")}
								/>
            </aside>
          </li>
        );
      }

      // Get the URL and link attributes for the post
      const postUrl = getBlogPostUrl(post, currentLocale);
      const target = getBlogPostTarget(post);
      const rel = getBlogPostRel(post);

      return (
        <li class={specialClasses}>
          <ArticleCard
            image={post.cover}
            title={post.title}
            description={post.description}
            url={postUrl}
            loading={imageLoading}
            data-external={isExternalArticle(post) ? 'true' : 'false'}
            data-target={target}
            data-rel={rel}
          />
        </li>
      );
    })}
  </ul>
</div>

<style>
  .grid-container {
    display: grid;
    grid-template-columns: 1fr min(var(--container-width, 1280px),calc(100% - (2 * var(--container-gutter-size, 24px)))) 1fr;
    grid-column-gap: var(--container-gutter-size, 24px);
    overflow: clip;
    width: 100%;
    row-gap: 6rem;
    padding-bottom: 6rem
}

@media (min-width: 768px) {
    .grid-container {
        row-gap:8rem;
        padding-bottom: 8rem
    }
}

@media (min-width: 1024px) {
    .grid-container {
        row-gap:10rem;
        padding-bottom: 10rem
    }
}

.grid-container>* {
    grid-column: 2
}

.grid-container>.bleed-full {
    grid-column: 1 / -1
}

.grid-container>.bleed-start {
    grid-column: 1 / 3
}

.grid-container>.bleed-end {
    grid-column: 2 / -1
}

.grid-container>.bleed-none {
    grid-column: 2!important
}

</style>