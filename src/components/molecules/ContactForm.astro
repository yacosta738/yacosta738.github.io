---
import { getLangFromUrl, useTranslations } from '@i18n:utils';
type Props = {
	siteKey: string;
	contactForm: string;
	contactFormToken: string;
};
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Crear un objeto con las traducciones necesarias
const translations = {
	messageSent: t('messageSent'),
	recaptchaError: t('recaptchaError'),
	recaptchaFailed: t('recaptchaFailed'),
	formError: t('formError'),
	formSubmissionFailed: t('formSubmissionFailed'),
};

const { siteKey, contactForm, contactFormToken } = Astro.props;
---

<form class="card p-5 space-y-4 bg-neutral text-neutral-content m-auto w-full" id="contact-form">
	<div>
		<label for="form-name" class="text-sm font-bold uppercase text-lightest-slate">
			{t('yourFullName')}
		</label>
		<input
			id="form-name"
			class="focus:shadow-outline mt-2 w-full rounded-lg border-2 border-green-500 bg-transparent p-3 text-green-500 focus:outline-none"
			name="name"
			required
			type="text"
			placeholder="John Doe"
		/>
	</div>
	<div class="mt-8">
		<label for="form-email" class="text-sm font-bold uppercase text-lightest-slate">
			{t('yourEmail')}
		</label>
		<input
			id="form-email"
			class="focus:shadow-outline mt-2 w-full rounded-lg border-2 border-green-500 bg-transparent p-3 text-green-500 focus:outline-none"
			placeholder="johndoe@gmail.com"
			name="email"
			required
			type="email"
		/>
	</div>
	<div class="mt-8">
		<label for="form-subject" class="text-sm font-bold uppercase text-lightest-slate">
			{t('subject')}
		</label>
		<input
			id="form-subject"
			class="focus:shadow-outline mt-2 w-full rounded-lg border-2 border-green-500 bg-transparent p-3 text-green-500 focus:outline-none"
			placeholder={t('subjectPlaceholder')}
			name="subject"
			spellcheck="true"
			required
			type="text"
		/>
	</div>
	<div class="mt-8">
		<label for="form-message" class="text-sm font-bold uppercase text-lightest-slate">
			{t('message')}
		</label>
		<textarea
			id="form-message"
			placeholder={t('messagePlaceholder')}
			name="message"
			required
			spellcheck="true"
			class="focus:shadow-outline mt-2 h-32 w-full rounded-lg border-2 border-green-500 bg-transparent p-3 text-green-500 focus:outline-none"
		></textarea>
	</div>
	<div class="mt-8">
		<button
			type="submit"
			class="g-recaptcha big-button w-full"
			data-sitekey={siteKey}
			data-callback="onSubmit"
			data-testid="submit-button"
		>
			{t('sendMessage')}
		</button>
	</div>
</form>

<!-- Toast notification component -->
<div
	id="toast-notification"
	class="fixed top-4 right-4 z-50 invisible opacity-0 transition-all duration-300 ease-in-out"
>
	<div class="flex items-center p-4 rounded-lg shadow-lg min-w-[280px]">
		<div class="flex-1 toast-message"></div>
		<button onclick="closeToast()" class="ml-4">
			<span class="text-2xl">&times;</span>
		</button>
	</div>
</div>

<script is:inline src="https://www.google.com/recaptcha/api.js" async defer></script>
<script define:vars={{ contactForm, translations, contactFormToken }}>
	const closeToast = () => {
		const toast = document.getElementById('toast-notification');
		toast.classList.remove('visible', 'opacity-100');
		toast.classList.add('invisible', 'opacity-0');
	};

	const showToast = (message, isError = false) => {
		const toast = document.getElementById('toast-notification');
		const toastMessage = toast.querySelector('.toast-message');

		toast.querySelector('div').className =
			`flex items-center p-1 rounded-lg shadow-lg min-w-[280px] border ${
				isError
					? 'border-red-500 bg-red-500/50 text-white'
					: 'border-green-500 bg-green-500/50 text-white'
			}`;

		toastMessage.textContent = message;

		// Mostrar el toast
		toast.classList.remove('invisible', 'opacity-0');
		toast.classList.add('visible', 'opacity-100');

		// Auto ocultar despuÃ©s de 5 segundos
		setTimeout(closeToast, 5000);
	};

	window.onSubmit = async (token) => {
		const form = document.getElementById('contact-form');

		try {
			if (!token) {
				showToast(translations.recaptchaFailed, true);
				return;
			}

			const recaptchaResponse = await fetch('/api/recaptcha', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ token }),
			});

			const gResponse = await recaptchaResponse.json();

			if (!gResponse.success) {
				const errorMessage = gResponse['error-codes']?.join(', ') || 'Verification failed';
				showToast(`${translations.recaptchaError} ${errorMessage}`, true);
				return;
			}

			const formData = new FormData(form);
			const data = Object.fromEntries(formData.entries());
			const response = await fetch(contactForm, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'yap-token': contactFormToken,
				},
				body: JSON.stringify(data),
			});

			if (response.ok) {
				showToast(translations.messageSent);
				form.reset();
			} else {
				throw new Error(translations.formSubmissionFailed);
			}
		} catch (error) {
			showToast(translations.formError, true);
			console.error(error);
		}
	};
</script>

<style>
	#toast-notification {
		transform: translateX(0);
	}

	#toast-notification.invisible {
		transform: translateX(100%);
	}
</style>
