---
import MenuButton from 'atoms:MenuButton'
import Menus from 'molecules:Menus'
import { t, setDefaultNamespace } from 'i18next'
import { DRAWER_MENU_ID, DRAWER_MENU_LABEL } from '@store:constants'
setDefaultNamespace('hero')
---
	<!-- drawer init and toggle -->
<MenuButton drawerTarget={DRAWER_MENU_ID} />
<drawer-menu data-identifier={DRAWER_MENU_ID} class='block lg:hidden fixed'>

	<!-- drawer component -->
	<div
		id={DRAWER_MENU_ID}
		class='fixed top-0 right-0 z-40 h-screen w-64 p-4 overflow-y-auto transition-transform translate-x-full bg-light-navy'
		tabindex='-1'
		aria-labelledby={DRAWER_MENU_LABEL}
	>
		<h5
			id='drawer-label'
			class='mb-4 inline-flex items-center text-base font-semibold text-gray-500 dark:text-gray-400'
		>
			<svg
				class='mr-2 h-5 w-5'
				fill='currentColor'
				viewBox='0 0 20 20'
				xmlns='http://www.w3.org/2000/svg'
				><path
					fill-rule='evenodd'
					d='M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z'
					clip-rule='evenodd'></path>
			</svg>
			{t('name')}
		</h5>
		<Menus drawer={true} />
	</div>
</drawer-menu>

<script>
	import { DRAWER_MENU_BUTTON_ID } from '@store:constants'
	import { Drawer } from 'flowbite'
	import type { DrawerOptions, DrawerInterface } from 'flowbite'

	class DrawerMenu extends HTMLElement {
		constructor() {
			super()
			const identifier = this.dataset.identifier
			// select the two elements that we'll work with
			const $drawerMenuButtonElement: HTMLElement | null =
				document.getElementById(DRAWER_MENU_BUTTON_ID)
			const $menuDrawerElement: HTMLElement | null = this.querySelector(`#${identifier}`)

			const classListDrawerMenuButton: string[] = [
				'active-menu',
				'z-[100]',
				'absolute',
				'top-0',
				'right-0'
			]

			const fallbackMenuDrawerId = 'drawer-menu'
			// options with default values
			const options: DrawerOptions = {
				placement: 'right',
				backdrop: true,
				bodyScrolling: false,
				edge: false,
				edgeOffset: '',
				backdropClasses: 'bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30',
				onHide: () => {
					$drawerMenuButtonElement?.classList.remove(...classListDrawerMenuButton)
					$drawerMenuButtonElement?.removeAttribute('data-drawer-dismiss')
					$drawerMenuButtonElement?.setAttribute(
						'data-drawer-show',
						$menuDrawerElement?.id || fallbackMenuDrawerId
					)
				},
				onShow: () => {
					$drawerMenuButtonElement?.classList.add(...classListDrawerMenuButton)
					$drawerMenuButtonElement?.removeAttribute('data-drawer-show')
					$drawerMenuButtonElement?.setAttribute(
						'data-drawer-dismiss',
						$menuDrawerElement?.id || fallbackMenuDrawerId
					)
				},
				onToggle: () => {
					$drawerMenuButtonElement?.classList.toggle('active-menu')
				}
			}
			if ($menuDrawerElement) {
				// create a new modal instance
				const menuDrawer: DrawerInterface = new Drawer($menuDrawerElement, options)

				// toggle the visibility of the modal when clicking on the button
				$drawerMenuButtonElement?.addEventListener('click', () => menuDrawer.toggle())
			}
		}
	}
	customElements.define('drawer-menu', DrawerMenu)
</script>
