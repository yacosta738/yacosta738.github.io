---
import { Icon } from 'astro-icon/components';
import { socialMedia } from 'store/constants';
import { getLangFromUrl, useTranslations } from '@i18n:index';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const portfolioTechIcon = [
	'mdi:vuejs',
	'simple-icons:astro',
	'simple-icons:tailwindcss',
	'simple-icons:netlify',
];
---

<footer class="container m-5 mx-auto flex flex-col items-center justify-center lg:flex-row">
	<div class="flex flex-col items-center">
		<ul class="relative flex list-none flex-wrap p-0 md:hidden">
			{
				socialMedia.map(({ name, icon, url }) => (
					<li class="mx-1 my-2 whitespace-nowrap font-mono text-3xl text-light-slate">
						<a href={url} target="_blank" rel="noopener noreferrer" aria-label={name}>
							<Icon name={icon} class="h-8" />
						</a>
					</li>
				))
			}
		</ul>
		<p class="font-mono text-sm text-lightest-slate">
			{t('builtBy')}
			<a
				href="https://www.yunielacosta.com"
				target="_blank"
				rel="noopener noreferrer"
				class="text-light-slate">Yuniel Acosta</a
			>
		</p>
		<p class="my-2 font-mono text-xs text-light-slate">
			{t('designBy')}
		</p>
		<ul class="relative flex list-none flex-wrap p-0">
			{
				portfolioTechIcon.map((icon) => (
					<li class="mx-1 mt-2 whitespace-nowrap font-mono text-xs text-light-slate">
						<Icon name={icon} class="h-4" />
					</li>
				))
			}
		</ul>
		<div class="font-mono text-xs text-light-slate">
			<ascii-progress-bar id="year-progress" pattern="circles"></ascii-progress-bar>
		</div>
	</div>
</footer>

<script>
    import '@yacosta738/ascii-progress-bar/browser';

    const HOUR_IN_MS = 60 * 60 * 1000;
    
    class YearProgress {
		private intervalId: ReturnType<typeof setInterval> | undefined;
        
        private calculateProgress(): number {
            const now = new Date();
            const start = new Date(now.getFullYear(), 0, 1);
            const end = new Date(now.getFullYear() + 1, 0, 1);
            return ((now.getTime() - start.getTime()) / 
                   (end.getTime() - start.getTime())) * 100;
        }
        
        private update(): void {
            try {
                const progressBar = document.getElementById('year-progress');
                if (progressBar) {
                    const progress = this.calculateProgress();
                    progressBar.setAttribute('progress', progress.toFixed(2));
                }
            } catch (error) {
                console.error('Failed to update year progress:', error);
            }
        }
        
        public start(): void {
            this.update();
            this.intervalId = setInterval(() => this.update(), HOUR_IN_MS);
        }
        
        public stop(): void {
            if (this.intervalId) {
                clearInterval(this.intervalId);
            }
        }
    }

    // Initialize and start progress tracking
    const yearProgress = new YearProgress();
    yearProgress.start();

    // Cleanup on page unload
    window.addEventListener('unload', () => yearProgress.stop());
</script>
