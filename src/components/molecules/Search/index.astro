---
import { getDocSearchStrings } from '@i18n:search';
import { getCollection } from 'astro:content';
import { jsonToArticle, type Article } from '@models:Article';
import { getLangFromUrl } from '@i18n:index';
import type { DocSearchTranslation } from '@i18n:search-translation';
// @ts-expect-error
import SearchBox from './SearchBox.vue';
import type { AstroGlobal } from 'astro';

const { pathname } = Astro.url;
const isBlogRoot =
	pathname.endsWith('/blog') || pathname.endsWith('/blog/') || pathname.match(/\/posts\/\w+/);

const lang = getLangFromUrl(Astro.url);

const publishedBlogEntriesPromises = (
	await getCollection('blog', ({ data }) => {
		return !data.draft;
	})
).map(async (publishedBlogEntry) => {
	const slugParts = publishedBlogEntry.id.split('/');
	const entryLang = slugParts[0] === 'es' ? 'es' : 'en';
	return {
		...(await jsonToArticle(publishedBlogEntry)),
		lang: entryLang,
	};
});

const publishedBlogEntries = await Promise.all(publishedBlogEntriesPromises);
const sortedPublishedBlogEntries: Awaited<Article>[] = publishedBlogEntries
	.filter((post) => post.lang === lang)
	.sort((a, b) => {
		return new Date(b.date).getTime() - new Date(a.date).getTime();
	});

const docSearchStrings: DocSearchTranslation = getDocSearchStrings(Astro as unknown as AstroGlobal);
---

{
	isBlogRoot && (
		<SearchBox
			client:only="vue"
			id="search-articles"
			articles={sortedPublishedBlogEntries}
			translations={docSearchStrings}
		/>
	)
}
