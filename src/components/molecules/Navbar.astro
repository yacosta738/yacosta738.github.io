---
import Menus from "molecules:Menus";
import Drawer from "molecules:Drawer";
import { NAVBAR_HEADER } from "@store:constants";
import { getLangFromUrl, useTranslatedPath } from "@i18n:utils";
import Search from "./Search/index.astro";
import AppBannerNotifications from "molecules:AppBannerNotifications";

interface Props {
	id?: string;
}

const { id } = Astro.props;
const navbarHeaderId = `${NAVBAR_HEADER}-${id ?? crypto.randomUUID()}`;
const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
---

<div id={navbarHeaderId} class="fixed z-50 w-full">
	<AppBannerNotifications />
	<header>
		<nav
			id="acosta-navbar"
			class="relative flex w-full flex-wrap items-center justify-between py-2 md:py-4"
		>
			<a href={translatePath('/', lang)} class="border-none">
				<img
					src="/logo.svg"
					class="w-10"
					alt="yuniel acosta portfolio logo"
					height="10"
					width="10"
				/>
			</a>
			<Drawer />
			<div class="hidden lg:flex lg:justify-between lg:items-center">
				<Search />
				<Menus drawer={false} />
			</div>
		</nav>
	</header>
</div>
<script define:vars={{ navbarHeaderId }}>
	// Add navbar height calculation
	const updateNavbarHeight = () => {
		const navbar = document.getElementById(navbarHeaderId);
		if (navbar) {
			const height = navbar.offsetHeight;
			document.documentElement.style.setProperty('--navbar-height', `${height}px`);
		}
	};

	// Initial calculation
	updateNavbarHeight();
	// Update on resize
	window.addEventListener('resize', updateNavbarHeight);
	// Update when notifications change
	const observer = new MutationObserver(updateNavbarHeight);
	observer.observe(document.getElementById(navbarHeaderId), {
		childList: true,
		subtree: true,
	});

	// Existing scroll handling code
	let showNavbar = true;
	let scrollDirection = 'DOWN';
	let lastScrollPosition = 0;
	const navbar = document.getElementById(navbarHeaderId);
	const navbarClassList = navbar?.classList ?? new DOMTokenList();
	const navbarClassListAdd = navbarClassList.add.bind(navbarClassList);
	const navbarClassListRemove = navbarClassList.remove.bind(navbarClassList);

	const onScrollEnd = () => {
		if (showNavbar) {
			navbarClassListRemove('navbar--hidden');
		} else {
			navbarClassListAdd('navbar--hidden');
		}
		if (scrollDirection === 'UP' && lastScrollPosition !== 0) {
			navbarClassListAdd('navbar--show');
		} else {
			navbarClassListRemove('navbar--show');
		}
	};
	const onScroll = () => {
		const currentScrollPosition = window.scrollY || document.documentElement.scrollTop;
		if (currentScrollPosition < 0) return;

		showNavbar = currentScrollPosition < lastScrollPosition;
		scrollDirection = currentScrollPosition < lastScrollPosition ? 'UP' : 'DOWN';
		lastScrollPosition = currentScrollPosition;

		onScrollEnd();
	};

	window.addEventListener('scroll', onScroll);
</script>

<style scoped lang="scss">
	.navbar-menu {
		transition: all 530ms ease-out;
	}

	.navbar-menu-open {
		transform: translateX(0%);
	}

	.navbar-menu-close {
		transform: translateX(100%);
	}

	.ham {
		cursor: pointer;
		-webkit-tap-highlight-color: transparent;
		transition: transform 400ms;
		-moz-user-select: none;
		-webkit-user-select: none;
		-ms-user-select: none;
		user-select: none;
	}

	.hamRotate.active-menu {
		transform: rotate(45deg);
	}

	.hamRotate180.active-menu {
		transform: rotate(180deg);
	}

	.line {
		fill: none;
		transition:
			stroke-dasharray 400ms,
			stroke-dashoffset 400ms;
		stroke: #64ffda;
		stroke-width: 5.5;
		stroke-linecap: round;
	}

	.ham7 {
		.top {
			stroke-dasharray: 40 82;
		}

		.middle {
			stroke-dasharray: 30 111;
		}

		.bottom {
			stroke-dasharray: 20 161;
		}
	}

	.ham7.active-menu {
		.top {
			stroke-dasharray: 40 82;
			stroke-dashoffset: -62px;
		}

		.middle {
			stroke-dasharray: 40 60;
			stroke-dashoffset: 23px;
		}

		.bottom {
			stroke-dasharray: 40 82;
			stroke-dashoffset: -82px;
		}
	}
</style>
