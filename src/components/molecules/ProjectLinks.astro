---
/**
 * ProjectLinks component.
 * This component displays a set of links related to a project, such as GitHub,
 * an external project URL, and a call-to-action (CTA) button. It intelligently
 * renders only the links that are provided via props.
 *
 * @prop {string} projectName - The name of the project, used for ARIA labels.
 * @prop {string} [github] - The URL to the GitHub repository.
 * @prop {string | null} [external] - The URL to the live project.
 * @prop {string | null} [cta] - A URL for a special call-to-action link.
 * @prop {boolean} [isOdd=false] - Determines the alignment of the links.
 * @prop {Lang} lang - The current language for translations.
 */
import { Icon } from "astro-icon/components";
import { type Lang, tr, useTranslations } from "@/i18n";

interface Props {
	projectName: string;
	github?: string;
	external?: string | null;
	cta?: string | null;
	isOdd?: boolean;
	lang: Lang;
}

const {
	projectName,
	github,
	external,
	cta,
	isOdd = false,
	lang,
} = Astro.props as Props;
const t = useTranslations(lang);

const translated = (
	key: string,
	params: Record<string, unknown> = {},
	fallback = "",
) => {
	return tr(t, key, params, fallback);
};
---

<div class={`project-links ${isOdd ? 'odd' : ''}`}>
  {cta && (
    <a
      href={cta}
      target="_blank"
      rel="noopener noreferrer"
      class="cta"
      aria-label={`${translated('learnMore', {}, 'Learn More')}: ${projectName}`}
    >
      {translated('learnMore', {}, 'Learn More')}
    </a>
  )}
  
  {github && (
    <a
      href={github}
      target="_blank"
      rel="noopener noreferrer"
      aria-label={`${translated('viewSourceOnGitHub', {}, 'View source on GitHub')}: ${projectName}`}
      title={translated('viewSource', {}, 'View source')}
    >
      <Icon name="lucide:github" aria-hidden="true" />
    </a>
  )}
  
  {external && !cta && (
    <a
      href={external}
      target="_blank"
      rel="noopener noreferrer"
      class="external"
      aria-label={`${translated('viewExternalLink', {}, 'View external link')}: ${projectName}`}
      title={translated('viewExternalLink', {}, 'View external link')}
    >
      <Icon name="lucide:external-link" aria-hidden="true" />
    </a>
  )}
</div>

<style>
  /* Project Links */
  .project-links {
    display: flex;
    align-items: center;
    position: relative;
    margin-top: 10px;
    margin-left: -10px;
    color: var(--color-foreground);
  }

  .project-links a {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    color: var(--color-foreground);
    text-decoration: none;
    transition: color 0.25s cubic-bezier(0.645, 0.045, 0.355, 1);
  }

  .project-links a:hover,
  .project-links a:focus {
    color: var(--color-brand-accent);
    transform: translateY(-3px);
  }

  .project-links a.external svg {
    width: 22px;
    height: 22px;
    margin-top: -4px;
  }

  .project-links svg {
    width: 20px;
    height: 20px;
  }

  .project-links .cta {
    border: 1px solid var(--color-brand-accent);
    background-color: transparent;
    color: var(--color-brand-accent);
    border-radius: 4px;
    padding: 0.75rem 1rem;
    font-size: 0.813rem;
    font-family: var(--font-mono, 'SF Mono', 'Fira Code', 'Fira Mono', 'Roboto Mono', monospace);
    line-height: 1;
    text-decoration: none;
    transition: all 0.25s cubic-bezier(0.645, 0.045, 0.355, 1);
    margin: 10px;
  }

  .project-links .cta:hover,
  .project-links .cta:focus {
    background-color: rgba(100, 255, 218, 0.1);
    transform: translateY(-3px);
  }

  /* Right-aligned links for odd projects */
  .project-links.odd {
    justify-content: flex-end;
    margin-left: 0;
    margin-right: -10px;
  }

  @media (max-width: 768px) {
    .project-links.odd {
      justify-content: flex-start;
      margin-left: -10px;
      margin-right: 0;
    }
  }
</style>