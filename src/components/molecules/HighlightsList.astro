---
import type { HTMLAttributes } from "astro/types";

/**
 * HighlightsList component.
 * A reusable component that displays a list of highlights with consistent styling.
 *
 * @prop {string[]} highlights - A list of items to display as highlights.
 * @prop {number} [columns=1] - Number of columns to display the highlights in (1-3).
 */
interface Props extends HTMLAttributes<"ul"> {
	highlights: string[];
	columns?: 1 | 2 | 3;
}

const { highlights, columns = 1, class: className, ...attrs } = Astro.props;
---

{highlights && highlights.length > 0 && (
<ul class={`highlights ${className}`} {...attrs}>
		{highlights.map((highlight) => (
			<li>{highlight}</li>
		))}
	</ul>
)}

<style define:vars={{ columns }}>
	.highlights {
		padding: 0;
		margin: 0;
		list-style: none;
		font-size: var(--fz-md);
		
		/* CSS Grid implementation */
		display: grid;
		grid-template-columns: repeat(var(--columns), 1fr);
		gap: 0 1.5rem;
		direction: ltr;
	}

	.highlights li {
		position: relative;
		padding-inline-start: 30px;
		margin-block-end: 5px;
		color: var(--color-foreground-muted);
		line-height: 1.4;
		break-inside: avoid;
	}

	.highlights li:before {
		content: "â–¹";
		position: absolute;
		inset-inline-start: 0;
		top: 50%;
		transform: translateY(-50%);
		color: var(--color-brand-accent);
		font-size: var(--fz-sm);
		line-height: inherit;
	}

	/* Consistent alignment for all highlights regardless of card position */
	.highlights li {
		text-align: left;
	}

	.highlights li:last-child {
		margin-bottom: 0;
	}

	/* Light mode overrides */
	html:not(.dark) .highlights li {
		color: #64748b; /* readable gray for light mode */
	}

	html:not(.dark) .highlights li:before {
		color: var(--brand-accent);
	}

	@media (max-width: 768px) {
		.highlights {
			--columns: 1;
		}
	}
</style>