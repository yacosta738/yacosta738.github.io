---
import { IJob, Job } from '@models:Job'
import i18next, { t, setDefaultNamespace } from 'i18next'
import JobDetails from 'molecules:JobDetails'
import RoleDetails from 'molecules:RoleDetails'

const data = await Astro.glob<IJob>('../../data/jobs/**/*.json')
const jobs: Job[] = data
	.filter((job) => job.published && job.lang === i18next.language)
	.sort((a: IJob, b: IJob) => {
		const aDate = a?.createDate ? new Date(a.createDate) : new Date()
		const bDate = b?.createDate ? new Date(b.createDate) : new Date()
		return bDate.getTime() - aDate.getTime()
	})
	.map((job) => new Job(job))

	setDefaultNamespace('projects')
---

<astro-jobs>
	<section id='jobs' class='flex flex-col items-center justify-center max-w-screen-md'>
		<h2 class='numbered-heading'>{t('where-worked')}</h2>
		<div class='flex md:flex-row flex-col max-w-sm md:max-w-max'>
			<ul class='styled-tab-list' aria-label='Job tabs'>
				{
					jobs.length > 0 &&
						jobs.map((job) => (
							<li>
								<button id={`tab-${job.id}`} class='styled-tab-button'>
									<span>{job.company}</span>
								</button>
							</li>
						))
				}
				<li><div id='job-indicator' class='styled-high-light'></div></li>
			</ul>
			{
				jobs.map((job: IJob, i) => (
					<div
						id={`panel-${job.id}`}
						class='w-full h-auto pt-1 px-2 md:pt-2.5 md:pl-7'
						role='tabpanel'
						aria-labelledby={`tab-${job.id}`}
						hidden={Number.parseInt(localStorage.getItem('jobActiveTabId') ?? '0') !== i}
					>
						<JobDetails job={job} />
						<RoleDetails roles={job?.roles ?? []} />
					</div>
				))
			}
		</div>
	</section>
</astro-jobs>

<script>
	class AstroJobs extends HTMLElement {
		constructor() {
			super()
			const jobActiveTabIdKey = 'jobActiveTabId'
			const getActiveTabId = (): number => {
				if (!localStorage.getItem(jobActiveTabIdKey)) localStorage.setItem(jobActiveTabIdKey, '0')

				return Number.parseInt(localStorage.getItem(jobActiveTabIdKey) ?? '0')
			}
			const jobIndicator = this.querySelector('#job-indicator') as HTMLDivElement
			let activeTabId = getActiveTabId()
			const buttons = this.querySelectorAll('[id^="tab-"]') as NodeListOf<HTMLButtonElement>
			const panels = document.querySelectorAll('[id^="panel-"]') as NodeListOf<HTMLDivElement>
			buttons.forEach((button, i) => {
				button.setAttribute('tabIndex', `${activeTabId === i ? 0 : -1}`)
				button.addEventListener('click', () => {
					activeTabId = i
					localStorage.setItem(jobActiveTabIdKey, `${i}`)
					const sm = screen.width < 768
					jobIndicator.style.transform = sm
						? `translateX(calc(${activeTabId} * 120px))`
						: `translateY(calc(${activeTabId} * 42px))`
					button.classList.toggle('text-green-500', activeTabId === i)
					panels.forEach((panel, i) => {
						panel.setAttribute('tabIndex', `${activeTabId === i ? 0 : -1}`)
						panel.hidden = activeTabId !== i
					})
				})
			})
		}
	}
	customElements.define('astro-jobs', AstroJobs)
</script>

<style lang='scss' scoped>
	.styled-tab-list {
		position: relative;
		z-index: 3;
		width: max-content;
		padding: 0;
		margin: 0;
		list-style: none inside none;
		@media (max-width: 600px) {
			display: flex;
			overflow-x: auto;
			width: calc(100% + 100px);
			margin-left: -50px;
			margin-bottom: 30px;
		}
		@media (max-width: 480px) {
			width: calc(100% + 50px);
			margin-left: -25px;
			::-webkit-scrollbar {
				width: 1px;
				height: 1px;
			}
		}

		li {
			&:first-of-type {
				@media (max-width: 600px) {
					margin-left: 50px;
				}
				@media (max-width: 480px) {
					margin-left: 25px;
				}
			}

			&:last-of-type {
				@media (max-width: 600px) {
					padding-right: 50px;
				}
				@media (max-width: 480px) {
					padding-right: 25px;
				}
			}
		}
	}

	.styled-tab-button {
		display: inline-block;
		text-decoration: none;
		text-decoration-skip-ink: auto;
		color: inherit;
		position: relative;
		transition: var(--transition);
		cursor: pointer;

		&:hover,
		&:active,
		&:focus {
			color: var(--green);
			outline: 0;
		}

		display: flex;
		align-items: center;
		width: 100%;
		height: var(--tab-height);
		padding: 0 20px 2px;
		border-left: 2px solid var(--lightest-navy);
		background-color: transparent;
		font-family: var(--font-mono);
		font-size: var(--fz-xs);
		text-align: left;
		white-space: nowrap;

		@media (max-width: 768px) {
			padding: 0 15px 2px;
		}
		@media (max-width: 600px) {
			display: flex;
			justify-content: center;
			align-items: center;
			min-width: 120px;
			padding: 0 15px;
			border-left: 0;
			border-bottom: 2px solid var(--lightest-navy);
			text-align: center;
		}

		&:hover,
		&:focus {
			background-color: var(--light-navy);
		}
	}

	.styled-high-light {
		position: absolute;
		top: 0;
		left: 0;
		z-index: 10;
		width: 2px;
		height: var(--tab-height);
		border-radius: var(--border-radius);
		background: var(--green);
		transition-delay: 0.1s;

		@media (max-width: 600px) {
			top: auto;
			bottom: 0;
			width: 100%;
			max-width: var(--tab-width);
			height: 2px;
			margin-left: 50px;
		}
		@media (max-width: 480px) {
			margin-left: 25px;
		}
	}
</style>
