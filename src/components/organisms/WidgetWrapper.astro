---
import WidgetCategory from "@/components/molecules/WidgetCategory.astro";
import WidgetRecentPost from "@/components/molecules/WidgetRecentPost.astro";
import WidgetTagCloud from "@/components/molecules/WidgetTagCloud.astro";
import { getArticles } from "@/core/article";
import { getExternalArticles } from "@/core/external-article";
import { type Lang } from "@/i18n";
import type { BlogPost } from "@/lib/blog-post.utils";

const { pathname } = Astro.url;
const isBlogRoot = pathname.endsWith("/blog");
const currentLocale = Astro.currentLocale as Lang;

// Use the same logic as the blog index: combine internal and external articles,
// filter by current locale and sort newest-first.
const allArticles = await getArticles();
const allExternalArticles = await getExternalArticles();

const allBlogPosts = [
	...allArticles.filter((post) => post.id.split("/")[0] === currentLocale),
	...allExternalArticles.filter(
		(post) => post.id.split("/")[0] === currentLocale,
	),
];

const allPosts: BlogPost[] = allBlogPosts.sort(
	(a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf(),
);

const tags = allPosts.reduce(
	(acc: Map<string, { slug: string; title: string; count: number }>, post) => {
		if (!post.tags || post.tags.length === 0) {
			return acc;
		}
		for (const tag of post.tags) {
			const slug = (tag.slug || "").trim();
			if (!slug) {
				continue;
			}
			const title = tag.title?.trim() || tag.id?.trim() || slug;
			const existing = acc.get(slug);
			if (existing) {
				existing.count += 1;
				continue;
			}
			acc.set(slug, { slug, title, count: 1 });
		}
		return acc;
	},
	new Map<string, { slug: string; title: string; count: number }>(),
);
const tagList = Array.from(tags.values()).sort((a, b) =>
	a.title.localeCompare(b.title, undefined, { sensitivity: "base" }),
);

const categories = allPosts.reduce(
	(acc: Map<string, { slug: string; title: string; count: number }>, post) => {
		if (!post.category) {
			return acc;
		}
		const slug = (post.category.slug || "").trim();
		if (!slug) {
			return acc;
		}
		const title =
			post.category.title?.trim() || post.category.id?.trim() || slug;
		const existing = acc.get(slug);
		if (existing) {
			existing.count += 1;
			return acc;
		}
		acc.set(slug, { slug, title, count: 1 });
		return acc;
	},
	new Map<string, { slug: string; title: string; count: number }>(),
);
const categoryList = Array.from(categories.values());
---

<div id="widget-wrapper" class="w-full px-0 lg:w-full sticky top-8">
	<slot name="widget">
		{
			!isBlogRoot && (
				<div id="categoryWidget">
					<WidgetRecentPost recentPosts={allPosts.slice(0, 5)} />
				</div>
			)
		}
		<WidgetTagCloud tags={tagList} />
		<WidgetCategory categories={categoryList} />
	</slot>
</div>

<script>
// Only run in the browser
if (typeof window !== 'undefined') {
	const initWidgetBehavior = () => {
		const categoryEl = document.getElementById('categoryWidget');
		// if the url is /blog or es/blog, remove the category widget
		if (categoryEl) {
			const href = window.location?.href || '';
			const isBlogRoot = href.endsWith('/blog') || href.endsWith('/blog/');
			if (isBlogRoot) {
				categoryEl.classList.add('hidden');
			} else {
				categoryEl.classList.remove('hidden');
			}
		}

		const adjustTopOnNavbar = () => {
			const navbar = document.getElementById('navbar-header');
			const widgetWrapper = document.getElementById('widget-wrapper');
			// if navbar is not null and navbar has 'navbar--show' class, keep a comfortable top gap (top-8); otherwise tighten it (top-4)
			if (navbar && widgetWrapper) {
				if (navbar.classList.contains('navbar--show')) {
					widgetWrapper.classList.remove('top-4');
					widgetWrapper.classList.add('top-8');
				} else {
					widgetWrapper.classList.remove('top-8');
					widgetWrapper.classList.add('top-4');
				}
			}
		};

		// Run once after DOM is ready
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', () => {
				adjustTopOnNavbar();
			});
		} else {
			adjustTopOnNavbar();
		}

		window.addEventListener('scroll', adjustTopOnNavbar);
	};

	initWidgetBehavior();
}
</script>
