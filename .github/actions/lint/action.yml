name: 'Lint & Type Check'
description: 'Run Biome linting and TypeScript type checking'
author: 'yacosta738'

inputs:
  fix:
    description: 'Auto-fix issues (for local use)'
    required: false
    default: 'false'
  check-astro:
    description: 'Run Astro check'
    required: false
    default: 'true'

outputs:
  biome-status:
    description: 'Biome check status'
    value: ${{ steps.biome.outputs.status }}
  astro-status:
    description: 'Astro check status'
    value: ${{ steps.astro.outputs.status }}

runs:
  using: "composite"
  steps:
    - name: Setup Biome
      uses: biomejs/setup-biome@v2
      with:
        version: latest

    - name: Cache Biome
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
      with:
        path: |
          node_modules/.cache/biome
          .biome-cache
        key: ${{ runner.os }}-biome-${{ hashFiles('biome.json') }}
        restore-keys: |
          ${{ runner.os }}-biome-

    - name: Run Biome check
      id: biome
      shell: bash
      run: |
        echo "🔍 Running Biome checks..."
        
        if [ "${{ inputs.fix }}" == "true" ]; then
          echo "🔧 Auto-fixing issues..."
          biome check . --write
          STATUS=$?
        else
          echo "Running checks in CI mode..."
          biome ci . --diagnostic-level=error
          STATUS=$?
        fi
        
        if [ $STATUS -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ Biome checks passed"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "❌ Biome checks failed"
          exit 1
        fi

    - name: Run Astro check
      id: astro
      if: inputs.check-astro == 'true'
      shell: bash
      working-directory: apps/portfolio
      run: |
        echo "🔍 Running Astro type checks..."
        # Ensure node_modules are installed so `astro` and other local binaries are available.
        # Make sure pnpm is available. Prefer Corepack if present.
        if command -v corepack >/dev/null 2>&1; then
          echo "⚙️ Corepack detected, preparing pnpm from packageManager..."
          # Use the packageManager version declared in package.json if possible
          if [ -f package.json ]; then
            PM=$(node -e "console.log(require('./package.json').packageManager||'pnpm@latest')") || PM=pnpm@latest
            echo "🔧 Preparing $PM"
            corepack prepare "$PM" --activate || true
          else
            corepack prepare pnpm@latest --activate || true
          fi
        elif command -v pnpm >/dev/null 2>&1; then
          echo "⚙️ pnpm already available"
        else
          echo "⚠️ pnpm and corepack not found, installing pnpm via npm..."
          npm install -g pnpm@latest || true
        fi

        if [ -f pnpm-lock.yaml ] || [ -f package-lock.json ] || [ -f yarn.lock ]; then
          echo "📦 Installing dependencies (pnpm install)..."
          pnpm install --frozen-lockfile --ignore-scripts || pnpm install
        else
          echo "📦 No lockfile found, running pnpm install..."
          pnpm install
        fi

        pnpm check:astro
        STATUS=$?
        
        if [ $STATUS -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ Astro checks passed"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "❌ Astro checks failed"
          exit 1
        fi

    - name: Check accessibility
      shell: bash
      working-directory: apps/portfolio
      continue-on-error: true
      run: |
        echo "♿ Running accessibility checks..."
        pnpm check:a11y || echo "⚠️ Accessibility warnings found"

    - name: Generate lint summary
      shell: bash
      run: |
        echo "## 🔍 Lint & Type Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Biome**: ${{ steps.biome.outputs.status == 'success' && '✅' || '❌' }} ${{ steps.biome.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.check-astro }}" == "true" ]; then
          echo "- **Astro**: ${{ steps.astro.outputs.status == 'success' && '✅' || '❌' }} ${{ steps.astro.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        fi
