"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Collection = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactRedux = require("react-redux");

var _reactPolyglot = require("react-polyglot");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _urlHelper = require("../../lib/urlHelper");

var _Sidebar = _interopRequireDefault(require("./Sidebar"));

var _CollectionTop = _interopRequireDefault(require("./CollectionTop"));

var _EntriesCollection = _interopRequireDefault(require("./Entries/EntriesCollection"));

var _EntriesSearch = _interopRequireDefault(require("./Entries/EntriesSearch"));

var _CollectionControls = _interopRequireDefault(require("./CollectionControls"));

var _entries = require("../../actions/entries");

var _collections = require("../../reducers/collections");

var _entries2 = require("../../reducers/entries");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const CollectionContainer = (0, _styledBase.default)("div", {
  target: "e1yhfkro0",
  label: "CollectionContainer"
})("margin:", _netlifyCmsUiDefault.lengths.pageMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CollectionMain = (0, _styledBase.default)("main", {
  target: "e1yhfkro1",
  label: "CollectionMain"
})(process.env.NODE_ENV === "production" ? {
  name: "1r4jzjw",
  styles: "padding-left:280px;"
} : {
  name: "1r4jzjw",
  styles: "padding-left:280px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchResultContainer = (0, _styledBase.default)("div", {
  target: "e1yhfkro2",
  label: "SearchResultContainer"
})(_netlifyCmsUiDefault.components.cardTop, ";margin-bottom:22px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ3dDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBsZW5ndGhzLCBjb21wb25lbnRzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGdldE5ld0VudHJ5VXJsIH0gZnJvbSAnLi4vLi4vbGliL3VybEhlbHBlcic7XG5pbXBvcnQgU2lkZWJhciBmcm9tICcuL1NpZGViYXInO1xuaW1wb3J0IENvbGxlY3Rpb25Ub3AgZnJvbSAnLi9Db2xsZWN0aW9uVG9wJztcbmltcG9ydCBFbnRyaWVzQ29sbGVjdGlvbiBmcm9tICcuL0VudHJpZXMvRW50cmllc0NvbGxlY3Rpb24nO1xuaW1wb3J0IEVudHJpZXNTZWFyY2ggZnJvbSAnLi9FbnRyaWVzL0VudHJpZXNTZWFyY2gnO1xuaW1wb3J0IENvbGxlY3Rpb25Db250cm9scyBmcm9tICcuL0NvbGxlY3Rpb25Db250cm9scyc7XG5pbXBvcnQgeyBzb3J0QnlGaWVsZCwgZmlsdGVyQnlGaWVsZCwgY2hhbmdlVmlld1N0eWxlLCBncm91cEJ5RmllbGQgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2VudHJpZXMnO1xuaW1wb3J0IHtcbiAgc2VsZWN0U29ydGFibGVGaWVsZHMsXG4gIHNlbGVjdFZpZXdGaWx0ZXJzLFxuICBzZWxlY3RWaWV3R3JvdXBzLFxufSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBzZWxlY3RFbnRyaWVzU29ydCxcbiAgc2VsZWN0RW50cmllc0ZpbHRlcixcbiAgc2VsZWN0RW50cmllc0dyb3VwLFxuICBzZWxlY3RWaWV3U3R5bGUsXG59IGZyb20gJy4uLy4uL3JlZHVjZXJzL2VudHJpZXMnO1xuXG5jb25zdCBDb2xsZWN0aW9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiAke2xlbmd0aHMucGFnZU1hcmdpbn07XG5gO1xuXG5jb25zdCBDb2xsZWN0aW9uTWFpbiA9IHN0eWxlZC5tYWluYFxuICBwYWRkaW5nLWxlZnQ6IDI4MHB4O1xuYDtcblxuY29uc3QgU2VhcmNoUmVzdWx0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuICBtYXJnaW4tYm90dG9tOiAyMnB4O1xuYDtcblxuY29uc3QgU2VhcmNoUmVzdWx0SGVhZGluZyA9IHN0eWxlZC5oMWBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3BIZWFkaW5nfTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzU2VhcmNoUmVzdWx0czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNTaW5nbGVTZWFyY2hSZXN1bHQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIHNvcnRhYmxlRmllbGRzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgc29ydDogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgb25Tb3J0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgcmVuZGVyRW50cmllc0NvbGxlY3Rpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtLCB2aWV3U3R5bGUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFbnRyaWVzQ29sbGVjdGlvbiBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufSB2aWV3U3R5bGU9e3ZpZXdTdHlsZX0gZmlsdGVyVGVybT17ZmlsdGVyVGVybX0gLz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlckVudHJpZXNTZWFyY2ggPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzZWFyY2hUZXJtLCBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTaW5nbGVTZWFyY2hSZXN1bHQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFbnRyaWVzU2VhcmNoXG4gICAgICAgIGNvbGxlY3Rpb25zPXtpc1NpbmdsZVNlYXJjaFJlc3VsdCA/IGNvbGxlY3Rpb25zLmZpbHRlcihjID0+IGMgPT09IGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbnN9XG4gICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBjb2xsZWN0aW9ucyxcbiAgICAgIGNvbGxlY3Rpb25OYW1lLFxuICAgICAgaXNTZWFyY2hFbmFibGVkLFxuICAgICAgaXNTZWFyY2hSZXN1bHRzLFxuICAgICAgaXNTaW5nbGVTZWFyY2hSZXN1bHQsXG4gICAgICBzZWFyY2hUZXJtLFxuICAgICAgc29ydGFibGVGaWVsZHMsXG4gICAgICBvblNvcnRDbGljayxcbiAgICAgIHNvcnQsXG4gICAgICB2aWV3RmlsdGVycyxcbiAgICAgIHZpZXdHcm91cHMsXG4gICAgICBmaWx0ZXJUZXJtLFxuICAgICAgdCxcbiAgICAgIG9uRmlsdGVyQ2xpY2ssXG4gICAgICBvbkdyb3VwQ2xpY2ssXG4gICAgICBmaWx0ZXIsXG4gICAgICBncm91cCxcbiAgICAgIG9uQ2hhbmdlVmlld1N0eWxlLFxuICAgICAgdmlld1N0eWxlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IG5ld0VudHJ5VXJsID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpID8gZ2V0TmV3RW50cnlVcmwoY29sbGVjdGlvbk5hbWUpIDogJyc7XG4gICAgaWYgKG5ld0VudHJ5VXJsICYmIGZpbHRlclRlcm0pIHtcbiAgICAgIG5ld0VudHJ5VXJsID0gZ2V0TmV3RW50cnlVcmwoY29sbGVjdGlvbk5hbWUpO1xuICAgICAgaWYgKGZpbHRlclRlcm0pIHtcbiAgICAgICAgbmV3RW50cnlVcmwgPSBgJHtuZXdFbnRyeVVybH0/cGF0aD0ke2ZpbHRlclRlcm19YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWFyY2hSZXN1bHRLZXkgPVxuICAgICAgJ2NvbGxlY3Rpb24uY29sbGVjdGlvblRvcC5zZWFyY2hSZXN1bHRzJyArIChpc1NpbmdsZVNlYXJjaFJlc3VsdCA/ICdJbkNvbGxlY3Rpb24nIDogJycpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb2xsZWN0aW9uQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhclxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICBjb2xsZWN0aW9uPXsoIWlzU2VhcmNoUmVzdWx0cyB8fCBpc1NpbmdsZVNlYXJjaFJlc3VsdCkgJiYgY29sbGVjdGlvbn1cbiAgICAgICAgICBpc1NlYXJjaEVuYWJsZWQ9e2lzU2VhcmNoRW5hYmxlZH1cbiAgICAgICAgICBzZWFyY2hUZXJtPXtzZWFyY2hUZXJtfVxuICAgICAgICAgIGZpbHRlclRlcm09e2ZpbHRlclRlcm19XG4gICAgICAgIC8+XG4gICAgICAgIDxDb2xsZWN0aW9uTWFpbj5cbiAgICAgICAgICB7aXNTZWFyY2hSZXN1bHRzID8gKFxuICAgICAgICAgICAgPFNlYXJjaFJlc3VsdENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPFNlYXJjaFJlc3VsdEhlYWRpbmc+XG4gICAgICAgICAgICAgICAge3Qoc2VhcmNoUmVzdWx0S2V5LCB7IHNlYXJjaFRlcm0sIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpIH0pfVxuICAgICAgICAgICAgICA8L1NlYXJjaFJlc3VsdEhlYWRpbmc+XG4gICAgICAgICAgICA8L1NlYXJjaFJlc3VsdENvbnRhaW5lcj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPENvbGxlY3Rpb25Ub3AgY29sbGVjdGlvbj17Y29sbGVjdGlvbn0gbmV3RW50cnlVcmw9e25ld0VudHJ5VXJsfSAvPlxuICAgICAgICAgICAgICA8Q29sbGVjdGlvbkNvbnRyb2xzXG4gICAgICAgICAgICAgICAgdmlld1N0eWxlPXt2aWV3U3R5bGV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2VWaWV3U3R5bGU9e29uQ2hhbmdlVmlld1N0eWxlfVxuICAgICAgICAgICAgICAgIHNvcnRhYmxlRmllbGRzPXtzb3J0YWJsZUZpZWxkc31cbiAgICAgICAgICAgICAgICBvblNvcnRDbGljaz17b25Tb3J0Q2xpY2t9XG4gICAgICAgICAgICAgICAgc29ydD17c29ydH1cbiAgICAgICAgICAgICAgICB2aWV3RmlsdGVycz17dmlld0ZpbHRlcnN9XG4gICAgICAgICAgICAgICAgdmlld0dyb3Vwcz17dmlld0dyb3Vwc31cbiAgICAgICAgICAgICAgICB0PXt0fVxuICAgICAgICAgICAgICAgIG9uRmlsdGVyQ2xpY2s9e29uRmlsdGVyQ2xpY2t9XG4gICAgICAgICAgICAgICAgb25Hcm91cENsaWNrPXtvbkdyb3VwQ2xpY2t9XG4gICAgICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJ9XG4gICAgICAgICAgICAgICAgZ3JvdXA9e2dyb3VwfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aXNTZWFyY2hSZXN1bHRzID8gdGhpcy5yZW5kZXJFbnRyaWVzU2VhcmNoKCkgOiB0aGlzLnJlbmRlckVudHJpZXNDb2xsZWN0aW9uKCl9XG4gICAgICAgIDwvQ29sbGVjdGlvbk1haW4+XG4gICAgICA8L0NvbGxlY3Rpb25Db250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMgfSA9IHN0YXRlO1xuICBjb25zdCBpc1NlYXJjaEVuYWJsZWQgPSBzdGF0ZS5jb25maWcgJiYgc3RhdGUuY29uZmlnLnNlYXJjaCAhPSBmYWxzZTtcbiAgY29uc3QgeyBpc1NlYXJjaFJlc3VsdHMsIG1hdGNoLCB0IH0gPSBvd25Qcm9wcztcbiAgY29uc3QgeyBuYW1lLCBzZWFyY2hUZXJtID0gJycsIGZpbHRlclRlcm0gPSAnJyB9ID0gbWF0Y2gucGFyYW1zO1xuICBjb25zdCBjb2xsZWN0aW9uID0gbmFtZSA/IGNvbGxlY3Rpb25zLmdldChuYW1lKSA6IGNvbGxlY3Rpb25zLmZpcnN0KCk7XG4gIGNvbnN0IHNvcnQgPSBzZWxlY3RFbnRyaWVzU29ydChzdGF0ZS5lbnRyaWVzLCBjb2xsZWN0aW9uLmdldCgnbmFtZScpKTtcbiAgY29uc3Qgc29ydGFibGVGaWVsZHMgPSBzZWxlY3RTb3J0YWJsZUZpZWxkcyhjb2xsZWN0aW9uLCB0KTtcbiAgY29uc3Qgdmlld0ZpbHRlcnMgPSBzZWxlY3RWaWV3RmlsdGVycyhjb2xsZWN0aW9uKTtcbiAgY29uc3Qgdmlld0dyb3VwcyA9IHNlbGVjdFZpZXdHcm91cHMoY29sbGVjdGlvbik7XG4gIGNvbnN0IGZpbHRlciA9IHNlbGVjdEVudHJpZXNGaWx0ZXIoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbi5nZXQoJ25hbWUnKSk7XG4gIGNvbnN0IGdyb3VwID0gc2VsZWN0RW50cmllc0dyb3VwKHN0YXRlLmVudHJpZXMsIGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpO1xuICBjb25zdCB2aWV3U3R5bGUgPSBzZWxlY3RWaWV3U3R5bGUoc3RhdGUuZW50cmllcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIGNvbGxlY3Rpb25zLFxuICAgIGNvbGxlY3Rpb25OYW1lOiBuYW1lLFxuICAgIGlzU2VhcmNoRW5hYmxlZCxcbiAgICBpc1NlYXJjaFJlc3VsdHMsXG4gICAgc2VhcmNoVGVybSxcbiAgICBmaWx0ZXJUZXJtLFxuICAgIHNvcnQsXG4gICAgc29ydGFibGVGaWVsZHMsXG4gICAgdmlld0ZpbHRlcnMsXG4gICAgdmlld0dyb3VwcyxcbiAgICBmaWx0ZXIsXG4gICAgZ3JvdXAsXG4gICAgdmlld1N0eWxlLFxuICB9O1xufVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIHNvcnRCeUZpZWxkLFxuICBmaWx0ZXJCeUZpZWxkLFxuICBjaGFuZ2VWaWV3U3R5bGUsXG4gIGdyb3VwQnlGaWVsZCxcbn07XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZVByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIG9uU29ydENsaWNrOiAoa2V5LCBkaXJlY3Rpb24pID0+XG4gICAgICBkaXNwYXRjaFByb3BzLnNvcnRCeUZpZWxkKHN0YXRlUHJvcHMuY29sbGVjdGlvbiwga2V5LCBkaXJlY3Rpb24pLFxuICAgIG9uRmlsdGVyQ2xpY2s6IGZpbHRlciA9PiBkaXNwYXRjaFByb3BzLmZpbHRlckJ5RmllbGQoc3RhdGVQcm9wcy5jb2xsZWN0aW9uLCBmaWx0ZXIpLFxuICAgIG9uR3JvdXBDbGljazogZ3JvdXAgPT4gZGlzcGF0Y2hQcm9wcy5ncm91cEJ5RmllbGQoc3RhdGVQcm9wcy5jb2xsZWN0aW9uLCBncm91cCksXG4gICAgb25DaGFuZ2VWaWV3U3R5bGU6IHZpZXdTdHlsZSA9PiBkaXNwYXRjaFByb3BzLmNoYW5nZVZpZXdTdHlsZSh2aWV3U3R5bGUpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRDb2xsZWN0aW9uID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoQ29sbGVjdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKENvbm5lY3RlZENvbGxlY3Rpb24pO1xuIl19 */"));
const SearchResultHeading = (0, _styledBase.default)("h1", {
  target: "e1yhfkro3",
  label: "SearchResultHeading"
})(_netlifyCmsUiDefault.components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class Collection extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "renderEntriesCollection", () => {
      const {
        collection,
        filterTerm,
        viewStyle
      } = this.props;
      return (0, _core.jsx)(_EntriesCollection.default, {
        collection: collection,
        viewStyle: viewStyle,
        filterTerm: filterTerm
      });
    });

    _defineProperty(this, "renderEntriesSearch", () => {
      const {
        searchTerm,
        collections,
        collection,
        isSingleSearchResult
      } = this.props;
      return (0, _core.jsx)(_EntriesSearch.default, {
        collections: isSingleSearchResult ? collections.filter(c => c === collection) : collections,
        searchTerm: searchTerm
      });
    });
  }

  render() {
    const {
      collection,
      collections,
      collectionName,
      isSearchEnabled,
      isSearchResults,
      isSingleSearchResult,
      searchTerm,
      sortableFields,
      onSortClick,
      sort,
      viewFilters,
      viewGroups,
      filterTerm,
      t,
      onFilterClick,
      onGroupClick,
      filter,
      group,
      onChangeViewStyle,
      viewStyle
    } = this.props;
    let newEntryUrl = collection.get('create') ? (0, _urlHelper.getNewEntryUrl)(collectionName) : '';

    if (newEntryUrl && filterTerm) {
      newEntryUrl = (0, _urlHelper.getNewEntryUrl)(collectionName);

      if (filterTerm) {
        newEntryUrl = `${newEntryUrl}?path=${filterTerm}`;
      }
    }

    const searchResultKey = 'collection.collectionTop.searchResults' + (isSingleSearchResult ? 'InCollection' : '');
    return (0, _core.jsx)(CollectionContainer, null, (0, _core.jsx)(_Sidebar.default, {
      collections: collections,
      collection: (!isSearchResults || isSingleSearchResult) && collection,
      isSearchEnabled: isSearchEnabled,
      searchTerm: searchTerm,
      filterTerm: filterTerm
    }), (0, _core.jsx)(CollectionMain, null, isSearchResults ? (0, _core.jsx)(SearchResultContainer, null, (0, _core.jsx)(SearchResultHeading, null, t(searchResultKey, {
      searchTerm,
      collection: collection.get('label')
    }))) : (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_CollectionTop.default, {
      collection: collection,
      newEntryUrl: newEntryUrl
    }), (0, _core.jsx)(_CollectionControls.default, {
      viewStyle: viewStyle,
      onChangeViewStyle: onChangeViewStyle,
      sortableFields: sortableFields,
      onSortClick: onSortClick,
      sort: sort,
      viewFilters: viewFilters,
      viewGroups: viewGroups,
      t: t,
      onFilterClick: onFilterClick,
      onGroupClick: onGroupClick,
      filter: filter,
      group: group
    })), isSearchResults ? this.renderEntriesSearch() : this.renderEntriesCollection()));
  }

}

exports.Collection = Collection;

_defineProperty(Collection, "propTypes", {
  searchTerm: _propTypes.default.string,
  collectionName: _propTypes.default.string,
  isSearchResults: _propTypes.default.bool,
  isSingleSearchResult: _propTypes.default.bool,
  collection: _reactImmutableProptypes.default.map.isRequired,
  collections: _reactImmutableProptypes.default.map.isRequired,
  sortableFields: _propTypes.default.array,
  sort: _reactImmutableProptypes.default.orderedMap,
  onSortClick: _propTypes.default.func.isRequired
});

function mapStateToProps(state, ownProps) {
  const {
    collections
  } = state;
  const isSearchEnabled = state.config && state.config.search != false;
  const {
    isSearchResults,
    match,
    t
  } = ownProps;
  const {
    name,
    searchTerm = '',
    filterTerm = ''
  } = match.params;
  const collection = name ? collections.get(name) : collections.first();
  const sort = (0, _entries2.selectEntriesSort)(state.entries, collection.get('name'));
  const sortableFields = (0, _collections.selectSortableFields)(collection, t);
  const viewFilters = (0, _collections.selectViewFilters)(collection);
  const viewGroups = (0, _collections.selectViewGroups)(collection);
  const filter = (0, _entries2.selectEntriesFilter)(state.entries, collection.get('name'));
  const group = (0, _entries2.selectEntriesGroup)(state.entries, collection.get('name'));
  const viewStyle = (0, _entries2.selectViewStyle)(state.entries);
  return {
    collection,
    collections,
    collectionName: name,
    isSearchEnabled,
    isSearchResults,
    searchTerm,
    filterTerm,
    sort,
    sortableFields,
    viewFilters,
    viewGroups,
    filter,
    group,
    viewStyle
  };
}

const mapDispatchToProps = {
  sortByField: _entries.sortByField,
  filterByField: _entries.filterByField,
  changeViewStyle: _entries.changeViewStyle,
  groupByField: _entries.groupByField
};

function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread({}, stateProps), ownProps), {}, {
    onSortClick: (key, direction) => dispatchProps.sortByField(stateProps.collection, key, direction),
    onFilterClick: filter => dispatchProps.filterByField(stateProps.collection, filter),
    onGroupClick: group => dispatchProps.groupByField(stateProps.collection, group),
    onChangeViewStyle: viewStyle => dispatchProps.changeViewStyle(viewStyle)
  });
}

const ConnectedCollection = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(Collection);

var _default = (0, _reactPolyglot.translate)()(ConnectedCollection);

exports.default = _default;