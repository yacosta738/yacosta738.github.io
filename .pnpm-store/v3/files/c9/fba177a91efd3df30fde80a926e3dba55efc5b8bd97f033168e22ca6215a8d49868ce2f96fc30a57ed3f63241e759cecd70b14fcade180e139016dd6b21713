"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactWaypoint = require("react-waypoint");

var _immutable = require("immutable");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _reactWindow = require("react-window");

var _reactVirtualizedAutoSizer = _interopRequireDefault(require("react-virtualized-auto-sizer"));

var _MediaLibraryCard = _interopRequireDefault(require("./MediaLibraryCard"));

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

function CardWrapper(props) {
  const {
    rowIndex,
    columnIndex,
    style,
    data: {
      mediaItems,
      isSelectedFile,
      onAssetClick,
      cardDraftText,
      cardWidth,
      cardHeight,
      isPrivate,
      displayURLs,
      loadDisplayURL,
      columnCount,
      gutter
    }
  } = props;
  const index = rowIndex * columnCount + columnIndex;

  if (index >= mediaItems.length) {
    return null;
  }

  const file = mediaItems[index];
  return (0, _core.jsx)("div", {
    style: _objectSpread(_objectSpread({}, style), {}, {
      left: style.left + gutter * columnIndex,
      top: style.top + gutter,
      width: style.width - gutter,
      height: style.height - gutter
    })
  }, (0, _core.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: '0px',
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  }));
}

function VirtualizedGrid(props) {
  const {
    mediaItems,
    setScrollContainerRef
  } = props;
  return (0, _core.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _core.jsx)(_reactVirtualizedAutoSizer.default, null, _ref => {
    let {
      height,
      width
    } = _ref;
    const cardWidth = parseInt(props.cardWidth, 10);
    const cardHeight = parseInt(props.cardHeight, 10);
    const gutter = parseInt(props.cardMargin, 10);
    const columnWidth = cardWidth + gutter;
    const rowHeight = cardHeight + gutter;
    const columnCount = Math.floor(width / columnWidth);
    const rowCount = Math.ceil(mediaItems.length / columnCount);
    return (0, _core.jsx)(_reactWindow.FixedSizeGrid, {
      columnCount: columnCount,
      columnWidth: columnWidth,
      rowCount: rowCount,
      rowHeight: rowHeight,
      width: width,
      height: height,
      itemData: _objectSpread(_objectSpread({}, props), {}, {
        gutter,
        columnCount
      })
    }, CardWrapper);
  }));
}

function PaginatedGrid(_ref2) {
  let {
    setScrollContainerRef,
    mediaItems,
    isSelectedFile,
    onAssetClick,
    cardDraftText,
    cardWidth,
    cardHeight,
    cardMargin,
    isPrivate,
    displayURLs,
    loadDisplayURL,
    canLoadMore,
    onLoadMore,
    isPaginating,
    paginatingMessage
  } = _ref2;
  return (0, _core.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _core.jsx)(CardGrid, null, mediaItems.map(file => (0, _core.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: cardMargin,
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  })), !canLoadMore ? null : (0, _core.jsx)(_reactWaypoint.Waypoint, {
    onEnter: onLoadMore
  })), !isPaginating ? null : (0, _core.jsx)(PaginatingMessage, {
    isPrivate: isPrivate
  }, paginatingMessage));
}

const CardGridContainer = (0, _styledBase.default)("div", {
  target: "e11970yf0",
  label: "CardGridContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1wzx962",
  styles: "overflow-y:auto;overflow-x:hidden;"
} : {
  name: "1wzx962",
  styles: "overflow-y:auto;overflow-x:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrSm9DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBGaXhlZFNpemVHcmlkIGFzIEdyaWQgfSBmcm9tICdyZWFjdC13aW5kb3cnO1xuaW1wb3J0IEF1dG9TaXplciBmcm9tICdyZWFjdC12aXJ0dWFsaXplZC1hdXRvLXNpemVyJztcblxuaW1wb3J0IE1lZGlhTGlicmFyeUNhcmQgZnJvbSAnLi9NZWRpYUxpYnJhcnlDYXJkJztcblxuZnVuY3Rpb24gQ2FyZFdyYXBwZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHJvd0luZGV4LFxuICAgIGNvbHVtbkluZGV4LFxuICAgIHN0eWxlLFxuICAgIGRhdGE6IHtcbiAgICAgIG1lZGlhSXRlbXMsXG4gICAgICBpc1NlbGVjdGVkRmlsZSxcbiAgICAgIG9uQXNzZXRDbGljayxcbiAgICAgIGNhcmREcmFmdFRleHQsXG4gICAgICBjYXJkV2lkdGgsXG4gICAgICBjYXJkSGVpZ2h0LFxuICAgICAgaXNQcml2YXRlLFxuICAgICAgZGlzcGxheVVSTHMsXG4gICAgICBsb2FkRGlzcGxheVVSTCxcbiAgICAgIGNvbHVtbkNvdW50LFxuICAgICAgZ3V0dGVyLFxuICAgIH0sXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgaW5kZXggPSByb3dJbmRleCAqIGNvbHVtbkNvdW50ICsgY29sdW1uSW5kZXg7XG4gIGlmIChpbmRleCA+PSBtZWRpYUl0ZW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGZpbGUgPSBtZWRpYUl0ZW1zW2luZGV4XTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICBsZWZ0OiBzdHlsZS5sZWZ0ICsgZ3V0dGVyICogY29sdW1uSW5kZXgsXG4gICAgICAgIHRvcDogc3R5bGUudG9wICsgZ3V0dGVyLFxuICAgICAgICB3aWR0aDogc3R5bGUud2lkdGggLSBndXR0ZXIsXG4gICAgICAgIGhlaWdodDogc3R5bGUuaGVpZ2h0IC0gZ3V0dGVyLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8TWVkaWFMaWJyYXJ5Q2FyZFxuICAgICAgICBrZXk9e2ZpbGUua2V5fVxuICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgdGV4dD17ZmlsZS5uYW1lfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkFzc2V0Q2xpY2soZmlsZSl9XG4gICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgIGRyYWZ0VGV4dD17Y2FyZERyYWZ0VGV4dH1cbiAgICAgICAgd2lkdGg9e2NhcmRXaWR0aH1cbiAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICBtYXJnaW49eycwcHgnfVxuICAgICAgICBpc1ByaXZhdGU9e2lzUHJpdmF0ZX1cbiAgICAgICAgZGlzcGxheVVSTD17ZGlzcGxheVVSTHMuZ2V0KGZpbGUuaWQsIGZpbGUudXJsID8gTWFwKHsgdXJsOiBmaWxlLnVybCB9KSA6IE1hcCgpKX1cbiAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICB0eXBlPXtmaWxlLnR5cGV9XG4gICAgICAgIGlzVmlld2FibGVJbWFnZT17ZmlsZS5pc1ZpZXdhYmxlSW1hZ2V9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBWaXJ0dWFsaXplZEdyaWQocHJvcHMpIHtcbiAgY29uc3QgeyBtZWRpYUl0ZW1zLCBzZXRTY3JvbGxDb250YWluZXJSZWYgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPENhcmRHcmlkQ29udGFpbmVyIHJlZj17c2V0U2Nyb2xsQ29udGFpbmVyUmVmfT5cbiAgICAgIDxBdXRvU2l6ZXI+XG4gICAgICAgIHsoeyBoZWlnaHQsIHdpZHRoIH0pID0+IHtcbiAgICAgICAgICBjb25zdCBjYXJkV2lkdGggPSBwYXJzZUludChwcm9wcy5jYXJkV2lkdGgsIDEwKTtcbiAgICAgICAgICBjb25zdCBjYXJkSGVpZ2h0ID0gcGFyc2VJbnQocHJvcHMuY2FyZEhlaWdodCwgMTApO1xuICAgICAgICAgIGNvbnN0IGd1dHRlciA9IHBhcnNlSW50KHByb3BzLmNhcmRNYXJnaW4sIDEwKTtcbiAgICAgICAgICBjb25zdCBjb2x1bW5XaWR0aCA9IGNhcmRXaWR0aCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCByb3dIZWlnaHQgPSBjYXJkSGVpZ2h0ICsgZ3V0dGVyO1xuICAgICAgICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gTWF0aC5mbG9vcih3aWR0aCAvIGNvbHVtbldpZHRoKTtcbiAgICAgICAgICBjb25zdCByb3dDb3VudCA9IE1hdGguY2VpbChtZWRpYUl0ZW1zLmxlbmd0aCAvIGNvbHVtbkNvdW50KTtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgY29sdW1uQ291bnQ9e2NvbHVtbkNvdW50fVxuICAgICAgICAgICAgICBjb2x1bW5XaWR0aD17Y29sdW1uV2lkdGh9XG4gICAgICAgICAgICAgIHJvd0NvdW50PXtyb3dDb3VudH1cbiAgICAgICAgICAgICAgcm93SGVpZ2h0PXtyb3dIZWlnaHR9XG4gICAgICAgICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgICAgIGl0ZW1EYXRhPXt7IC4uLnByb3BzLCBndXR0ZXIsIGNvbHVtbkNvdW50IH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtDYXJkV3JhcHBlcn1cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICApO1xuICAgICAgICB9fVxuICAgICAgPC9BdXRvU2l6ZXI+XG4gICAgPC9DYXJkR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gUGFnaW5hdGVkR3JpZCh7XG4gIHNldFNjcm9sbENvbnRhaW5lclJlZixcbiAgbWVkaWFJdGVtcyxcbiAgaXNTZWxlY3RlZEZpbGUsXG4gIG9uQXNzZXRDbGljayxcbiAgY2FyZERyYWZ0VGV4dCxcbiAgY2FyZFdpZHRoLFxuICBjYXJkSGVpZ2h0LFxuICBjYXJkTWFyZ2luLFxuICBpc1ByaXZhdGUsXG4gIGRpc3BsYXlVUkxzLFxuICBsb2FkRGlzcGxheVVSTCxcbiAgY2FuTG9hZE1vcmUsXG4gIG9uTG9hZE1vcmUsXG4gIGlzUGFnaW5hdGluZyxcbiAgcGFnaW5hdGluZ01lc3NhZ2UsXG59KSB7XG4gIHJldHVybiAoXG4gICAgPENhcmRHcmlkQ29udGFpbmVyIHJlZj17c2V0U2Nyb2xsQ29udGFpbmVyUmVmfT5cbiAgICAgIDxDYXJkR3JpZD5cbiAgICAgICAge21lZGlhSXRlbXMubWFwKGZpbGUgPT4gKFxuICAgICAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgICAgICBrZXk9e2ZpbGUua2V5fVxuICAgICAgICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZEZpbGUoZmlsZSl9XG4gICAgICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkFzc2V0Q2xpY2soZmlsZSl9XG4gICAgICAgICAgICBpc0RyYWZ0PXtmaWxlLmRyYWZ0fVxuICAgICAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICAgICAgd2lkdGg9e2NhcmRXaWR0aH1cbiAgICAgICAgICAgIGhlaWdodD17Y2FyZEhlaWdodH1cbiAgICAgICAgICAgIG1hcmdpbj17Y2FyZE1hcmdpbn1cbiAgICAgICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICAgICAgZGlzcGxheVVSTD17ZGlzcGxheVVSTHMuZ2V0KGZpbGUuaWQsIGZpbGUudXJsID8gTWFwKHsgdXJsOiBmaWxlLnVybCB9KSA6IE1hcCgpKX1cbiAgICAgICAgICAgIGxvYWREaXNwbGF5VVJMPXsoKSA9PiBsb2FkRGlzcGxheVVSTChmaWxlKX1cbiAgICAgICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgICAgIGlzVmlld2FibGVJbWFnZT17ZmlsZS5pc1ZpZXdhYmxlSW1hZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICAgIHshY2FuTG9hZE1vcmUgPyBudWxsIDogPFdheXBvaW50IG9uRW50ZXI9e29uTG9hZE1vcmV9IC8+fVxuICAgICAgPC9DYXJkR3JpZD5cbiAgICAgIHshaXNQYWdpbmF0aW5nID8gbnVsbCA6IChcbiAgICAgICAgPFBhZ2luYXRpbmdNZXNzYWdlIGlzUHJpdmF0ZT17aXNQcml2YXRlfT57cGFnaW5hdGluZ01lc3NhZ2V9PC9QYWdpbmF0aW5nTWVzc2FnZT5cbiAgICAgICl9XG4gICAgPC9DYXJkR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuY29uc3QgQ2FyZEdyaWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG5gO1xuXG5jb25zdCBDYXJkR3JpZCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XG5gO1xuXG5jb25zdCBQYWdpbmF0aW5nTWVzc2FnZSA9IHN0eWxlZC5oMWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuaXNQcml2YXRlICYmIGNvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuZnVuY3Rpb24gTWVkaWFMaWJyYXJ5Q2FyZEdyaWQocHJvcHMpIHtcbiAgY29uc3QgeyBjYW5Mb2FkTW9yZSwgaXNQYWdpbmF0aW5nIH0gPSBwcm9wcztcbiAgaWYgKGNhbkxvYWRNb3JlIHx8IGlzUGFnaW5hdGluZykge1xuICAgIHJldHVybiA8UGFnaW5hdGVkR3JpZCB7Li4ucHJvcHN9IC8+O1xuICB9XG4gIHJldHVybiA8VmlydHVhbGl6ZWRHcmlkIHsuLi5wcm9wc30gLz47XG59XG5cbk1lZGlhTGlicmFyeUNhcmRHcmlkLnByb3BUeXBlcyA9IHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBtZWRpYUl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZGlzcGxheVVSTDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgZHJhZnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIH0pLFxuICApLmlzUmVxdWlyZWQsXG4gIGlzU2VsZWN0ZWRGaWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkFzc2V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNhbkxvYWRNb3JlOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25Mb2FkTW9yZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQYWdpbmF0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGFnaW5hdGluZ01lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNhcmREcmFmdFRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZFdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNhcmRNYXJnaW46IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbG9hZERpc3BsYXlVUkw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzUHJpdmF0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc3BsYXlVUkxzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihNYXApLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZWRpYUxpYnJhcnlDYXJkR3JpZDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardGrid = (0, _styledBase.default)("div", {
  target: "e11970yf1",
  label: "CardGrid"
})(process.env.NODE_ENV === "production" ? {
  name: "wbkx89",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px;"
} : {
  name: "wbkx89",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1SjJCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBGaXhlZFNpemVHcmlkIGFzIEdyaWQgfSBmcm9tICdyZWFjdC13aW5kb3cnO1xuaW1wb3J0IEF1dG9TaXplciBmcm9tICdyZWFjdC12aXJ0dWFsaXplZC1hdXRvLXNpemVyJztcblxuaW1wb3J0IE1lZGlhTGlicmFyeUNhcmQgZnJvbSAnLi9NZWRpYUxpYnJhcnlDYXJkJztcblxuZnVuY3Rpb24gQ2FyZFdyYXBwZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHJvd0luZGV4LFxuICAgIGNvbHVtbkluZGV4LFxuICAgIHN0eWxlLFxuICAgIGRhdGE6IHtcbiAgICAgIG1lZGlhSXRlbXMsXG4gICAgICBpc1NlbGVjdGVkRmlsZSxcbiAgICAgIG9uQXNzZXRDbGljayxcbiAgICAgIGNhcmREcmFmdFRleHQsXG4gICAgICBjYXJkV2lkdGgsXG4gICAgICBjYXJkSGVpZ2h0LFxuICAgICAgaXNQcml2YXRlLFxuICAgICAgZGlzcGxheVVSTHMsXG4gICAgICBsb2FkRGlzcGxheVVSTCxcbiAgICAgIGNvbHVtbkNvdW50LFxuICAgICAgZ3V0dGVyLFxuICAgIH0sXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgaW5kZXggPSByb3dJbmRleCAqIGNvbHVtbkNvdW50ICsgY29sdW1uSW5kZXg7XG4gIGlmIChpbmRleCA+PSBtZWRpYUl0ZW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGZpbGUgPSBtZWRpYUl0ZW1zW2luZGV4XTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICBsZWZ0OiBzdHlsZS5sZWZ0ICsgZ3V0dGVyICogY29sdW1uSW5kZXgsXG4gICAgICAgIHRvcDogc3R5bGUudG9wICsgZ3V0dGVyLFxuICAgICAgICB3aWR0aDogc3R5bGUud2lkdGggLSBndXR0ZXIsXG4gICAgICAgIGhlaWdodDogc3R5bGUuaGVpZ2h0IC0gZ3V0dGVyLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8TWVkaWFMaWJyYXJ5Q2FyZFxuICAgICAgICBrZXk9e2ZpbGUua2V5fVxuICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgdGV4dD17ZmlsZS5uYW1lfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkFzc2V0Q2xpY2soZmlsZSl9XG4gICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgIGRyYWZ0VGV4dD17Y2FyZERyYWZ0VGV4dH1cbiAgICAgICAgd2lkdGg9e2NhcmRXaWR0aH1cbiAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICBtYXJnaW49eycwcHgnfVxuICAgICAgICBpc1ByaXZhdGU9e2lzUHJpdmF0ZX1cbiAgICAgICAgZGlzcGxheVVSTD17ZGlzcGxheVVSTHMuZ2V0KGZpbGUuaWQsIGZpbGUudXJsID8gTWFwKHsgdXJsOiBmaWxlLnVybCB9KSA6IE1hcCgpKX1cbiAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICB0eXBlPXtmaWxlLnR5cGV9XG4gICAgICAgIGlzVmlld2FibGVJbWFnZT17ZmlsZS5pc1ZpZXdhYmxlSW1hZ2V9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBWaXJ0dWFsaXplZEdyaWQocHJvcHMpIHtcbiAgY29uc3QgeyBtZWRpYUl0ZW1zLCBzZXRTY3JvbGxDb250YWluZXJSZWYgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPENhcmRHcmlkQ29udGFpbmVyIHJlZj17c2V0U2Nyb2xsQ29udGFpbmVyUmVmfT5cbiAgICAgIDxBdXRvU2l6ZXI+XG4gICAgICAgIHsoeyBoZWlnaHQsIHdpZHRoIH0pID0+IHtcbiAgICAgICAgICBjb25zdCBjYXJkV2lkdGggPSBwYXJzZUludChwcm9wcy5jYXJkV2lkdGgsIDEwKTtcbiAgICAgICAgICBjb25zdCBjYXJkSGVpZ2h0ID0gcGFyc2VJbnQocHJvcHMuY2FyZEhlaWdodCwgMTApO1xuICAgICAgICAgIGNvbnN0IGd1dHRlciA9IHBhcnNlSW50KHByb3BzLmNhcmRNYXJnaW4sIDEwKTtcbiAgICAgICAgICBjb25zdCBjb2x1bW5XaWR0aCA9IGNhcmRXaWR0aCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCByb3dIZWlnaHQgPSBjYXJkSGVpZ2h0ICsgZ3V0dGVyO1xuICAgICAgICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gTWF0aC5mbG9vcih3aWR0aCAvIGNvbHVtbldpZHRoKTtcbiAgICAgICAgICBjb25zdCByb3dDb3VudCA9IE1hdGguY2VpbChtZWRpYUl0ZW1zLmxlbmd0aCAvIGNvbHVtbkNvdW50KTtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgY29sdW1uQ291bnQ9e2NvbHVtbkNvdW50fVxuICAgICAgICAgICAgICBjb2x1bW5XaWR0aD17Y29sdW1uV2lkdGh9XG4gICAgICAgICAgICAgIHJvd0NvdW50PXtyb3dDb3VudH1cbiAgICAgICAgICAgICAgcm93SGVpZ2h0PXtyb3dIZWlnaHR9XG4gICAgICAgICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgICAgIGl0ZW1EYXRhPXt7IC4uLnByb3BzLCBndXR0ZXIsIGNvbHVtbkNvdW50IH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtDYXJkV3JhcHBlcn1cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICApO1xuICAgICAgICB9fVxuICAgICAgPC9BdXRvU2l6ZXI+XG4gICAgPC9DYXJkR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gUGFnaW5hdGVkR3JpZCh7XG4gIHNldFNjcm9sbENvbnRhaW5lclJlZixcbiAgbWVkaWFJdGVtcyxcbiAgaXNTZWxlY3RlZEZpbGUsXG4gIG9uQXNzZXRDbGljayxcbiAgY2FyZERyYWZ0VGV4dCxcbiAgY2FyZFdpZHRoLFxuICBjYXJkSGVpZ2h0LFxuICBjYXJkTWFyZ2luLFxuICBpc1ByaXZhdGUsXG4gIGRpc3BsYXlVUkxzLFxuICBsb2FkRGlzcGxheVVSTCxcbiAgY2FuTG9hZE1vcmUsXG4gIG9uTG9hZE1vcmUsXG4gIGlzUGFnaW5hdGluZyxcbiAgcGFnaW5hdGluZ01lc3NhZ2UsXG59KSB7XG4gIHJldHVybiAoXG4gICAgPENhcmRHcmlkQ29udGFpbmVyIHJlZj17c2V0U2Nyb2xsQ29udGFpbmVyUmVmfT5cbiAgICAgIDxDYXJkR3JpZD5cbiAgICAgICAge21lZGlhSXRlbXMubWFwKGZpbGUgPT4gKFxuICAgICAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgICAgICBrZXk9e2ZpbGUua2V5fVxuICAgICAgICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZEZpbGUoZmlsZSl9XG4gICAgICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkFzc2V0Q2xpY2soZmlsZSl9XG4gICAgICAgICAgICBpc0RyYWZ0PXtmaWxlLmRyYWZ0fVxuICAgICAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICAgICAgd2lkdGg9e2NhcmRXaWR0aH1cbiAgICAgICAgICAgIGhlaWdodD17Y2FyZEhlaWdodH1cbiAgICAgICAgICAgIG1hcmdpbj17Y2FyZE1hcmdpbn1cbiAgICAgICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICAgICAgZGlzcGxheVVSTD17ZGlzcGxheVVSTHMuZ2V0KGZpbGUuaWQsIGZpbGUudXJsID8gTWFwKHsgdXJsOiBmaWxlLnVybCB9KSA6IE1hcCgpKX1cbiAgICAgICAgICAgIGxvYWREaXNwbGF5VVJMPXsoKSA9PiBsb2FkRGlzcGxheVVSTChmaWxlKX1cbiAgICAgICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgICAgIGlzVmlld2FibGVJbWFnZT17ZmlsZS5pc1ZpZXdhYmxlSW1hZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICAgIHshY2FuTG9hZE1vcmUgPyBudWxsIDogPFdheXBvaW50IG9uRW50ZXI9e29uTG9hZE1vcmV9IC8+fVxuICAgICAgPC9DYXJkR3JpZD5cbiAgICAgIHshaXNQYWdpbmF0aW5nID8gbnVsbCA6IChcbiAgICAgICAgPFBhZ2luYXRpbmdNZXNzYWdlIGlzUHJpdmF0ZT17aXNQcml2YXRlfT57cGFnaW5hdGluZ01lc3NhZ2V9PC9QYWdpbmF0aW5nTWVzc2FnZT5cbiAgICAgICl9XG4gICAgPC9DYXJkR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuY29uc3QgQ2FyZEdyaWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG5gO1xuXG5jb25zdCBDYXJkR3JpZCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XG5gO1xuXG5jb25zdCBQYWdpbmF0aW5nTWVzc2FnZSA9IHN0eWxlZC5oMWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuaXNQcml2YXRlICYmIGNvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuZnVuY3Rpb24gTWVkaWFMaWJyYXJ5Q2FyZEdyaWQocHJvcHMpIHtcbiAgY29uc3QgeyBjYW5Mb2FkTW9yZSwgaXNQYWdpbmF0aW5nIH0gPSBwcm9wcztcbiAgaWYgKGNhbkxvYWRNb3JlIHx8IGlzUGFnaW5hdGluZykge1xuICAgIHJldHVybiA8UGFnaW5hdGVkR3JpZCB7Li4ucHJvcHN9IC8+O1xuICB9XG4gIHJldHVybiA8VmlydHVhbGl6ZWRHcmlkIHsuLi5wcm9wc30gLz47XG59XG5cbk1lZGlhTGlicmFyeUNhcmRHcmlkLnByb3BUeXBlcyA9IHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBtZWRpYUl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZGlzcGxheVVSTDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgZHJhZnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIH0pLFxuICApLmlzUmVxdWlyZWQsXG4gIGlzU2VsZWN0ZWRGaWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkFzc2V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNhbkxvYWRNb3JlOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25Mb2FkTW9yZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQYWdpbmF0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGFnaW5hdGluZ01lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNhcmREcmFmdFRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZFdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNhcmRNYXJnaW46IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbG9hZERpc3BsYXlVUkw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzUHJpdmF0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc3BsYXlVUkxzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihNYXApLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZWRpYUxpYnJhcnlDYXJkR3JpZDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PaginatingMessage = (0, _styledBase.default)("h1", {
  target: "e11970yf2",
  label: "PaginatingMessage"
})("color:", props => props.isPrivate && _netlifyCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErSm1DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBGaXhlZFNpemVHcmlkIGFzIEdyaWQgfSBmcm9tICdyZWFjdC13aW5kb3cnO1xuaW1wb3J0IEF1dG9TaXplciBmcm9tICdyZWFjdC12aXJ0dWFsaXplZC1hdXRvLXNpemVyJztcblxuaW1wb3J0IE1lZGlhTGlicmFyeUNhcmQgZnJvbSAnLi9NZWRpYUxpYnJhcnlDYXJkJztcblxuZnVuY3Rpb24gQ2FyZFdyYXBwZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHJvd0luZGV4LFxuICAgIGNvbHVtbkluZGV4LFxuICAgIHN0eWxlLFxuICAgIGRhdGE6IHtcbiAgICAgIG1lZGlhSXRlbXMsXG4gICAgICBpc1NlbGVjdGVkRmlsZSxcbiAgICAgIG9uQXNzZXRDbGljayxcbiAgICAgIGNhcmREcmFmdFRleHQsXG4gICAgICBjYXJkV2lkdGgsXG4gICAgICBjYXJkSGVpZ2h0LFxuICAgICAgaXNQcml2YXRlLFxuICAgICAgZGlzcGxheVVSTHMsXG4gICAgICBsb2FkRGlzcGxheVVSTCxcbiAgICAgIGNvbHVtbkNvdW50LFxuICAgICAgZ3V0dGVyLFxuICAgIH0sXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgaW5kZXggPSByb3dJbmRleCAqIGNvbHVtbkNvdW50ICsgY29sdW1uSW5kZXg7XG4gIGlmIChpbmRleCA+PSBtZWRpYUl0ZW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGZpbGUgPSBtZWRpYUl0ZW1zW2luZGV4XTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICBsZWZ0OiBzdHlsZS5sZWZ0ICsgZ3V0dGVyICogY29sdW1uSW5kZXgsXG4gICAgICAgIHRvcDogc3R5bGUudG9wICsgZ3V0dGVyLFxuICAgICAgICB3aWR0aDogc3R5bGUud2lkdGggLSBndXR0ZXIsXG4gICAgICAgIGhlaWdodDogc3R5bGUuaGVpZ2h0IC0gZ3V0dGVyLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8TWVkaWFMaWJyYXJ5Q2FyZFxuICAgICAgICBrZXk9e2ZpbGUua2V5fVxuICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgdGV4dD17ZmlsZS5uYW1lfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkFzc2V0Q2xpY2soZmlsZSl9XG4gICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgIGRyYWZ0VGV4dD17Y2FyZERyYWZ0VGV4dH1cbiAgICAgICAgd2lkdGg9e2NhcmRXaWR0aH1cbiAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICBtYXJnaW49eycwcHgnfVxuICAgICAgICBpc1ByaXZhdGU9e2lzUHJpdmF0ZX1cbiAgICAgICAgZGlzcGxheVVSTD17ZGlzcGxheVVSTHMuZ2V0KGZpbGUuaWQsIGZpbGUudXJsID8gTWFwKHsgdXJsOiBmaWxlLnVybCB9KSA6IE1hcCgpKX1cbiAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICB0eXBlPXtmaWxlLnR5cGV9XG4gICAgICAgIGlzVmlld2FibGVJbWFnZT17ZmlsZS5pc1ZpZXdhYmxlSW1hZ2V9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBWaXJ0dWFsaXplZEdyaWQocHJvcHMpIHtcbiAgY29uc3QgeyBtZWRpYUl0ZW1zLCBzZXRTY3JvbGxDb250YWluZXJSZWYgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPENhcmRHcmlkQ29udGFpbmVyIHJlZj17c2V0U2Nyb2xsQ29udGFpbmVyUmVmfT5cbiAgICAgIDxBdXRvU2l6ZXI+XG4gICAgICAgIHsoeyBoZWlnaHQsIHdpZHRoIH0pID0+IHtcbiAgICAgICAgICBjb25zdCBjYXJkV2lkdGggPSBwYXJzZUludChwcm9wcy5jYXJkV2lkdGgsIDEwKTtcbiAgICAgICAgICBjb25zdCBjYXJkSGVpZ2h0ID0gcGFyc2VJbnQocHJvcHMuY2FyZEhlaWdodCwgMTApO1xuICAgICAgICAgIGNvbnN0IGd1dHRlciA9IHBhcnNlSW50KHByb3BzLmNhcmRNYXJnaW4sIDEwKTtcbiAgICAgICAgICBjb25zdCBjb2x1bW5XaWR0aCA9IGNhcmRXaWR0aCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCByb3dIZWlnaHQgPSBjYXJkSGVpZ2h0ICsgZ3V0dGVyO1xuICAgICAgICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gTWF0aC5mbG9vcih3aWR0aCAvIGNvbHVtbldpZHRoKTtcbiAgICAgICAgICBjb25zdCByb3dDb3VudCA9IE1hdGguY2VpbChtZWRpYUl0ZW1zLmxlbmd0aCAvIGNvbHVtbkNvdW50KTtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgY29sdW1uQ291bnQ9e2NvbHVtbkNvdW50fVxuICAgICAgICAgICAgICBjb2x1bW5XaWR0aD17Y29sdW1uV2lkdGh9XG4gICAgICAgICAgICAgIHJvd0NvdW50PXtyb3dDb3VudH1cbiAgICAgICAgICAgICAgcm93SGVpZ2h0PXtyb3dIZWlnaHR9XG4gICAgICAgICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgICAgIGl0ZW1EYXRhPXt7IC4uLnByb3BzLCBndXR0ZXIsIGNvbHVtbkNvdW50IH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtDYXJkV3JhcHBlcn1cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICApO1xuICAgICAgICB9fVxuICAgICAgPC9BdXRvU2l6ZXI+XG4gICAgPC9DYXJkR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gUGFnaW5hdGVkR3JpZCh7XG4gIHNldFNjcm9sbENvbnRhaW5lclJlZixcbiAgbWVkaWFJdGVtcyxcbiAgaXNTZWxlY3RlZEZpbGUsXG4gIG9uQXNzZXRDbGljayxcbiAgY2FyZERyYWZ0VGV4dCxcbiAgY2FyZFdpZHRoLFxuICBjYXJkSGVpZ2h0LFxuICBjYXJkTWFyZ2luLFxuICBpc1ByaXZhdGUsXG4gIGRpc3BsYXlVUkxzLFxuICBsb2FkRGlzcGxheVVSTCxcbiAgY2FuTG9hZE1vcmUsXG4gIG9uTG9hZE1vcmUsXG4gIGlzUGFnaW5hdGluZyxcbiAgcGFnaW5hdGluZ01lc3NhZ2UsXG59KSB7XG4gIHJldHVybiAoXG4gICAgPENhcmRHcmlkQ29udGFpbmVyIHJlZj17c2V0U2Nyb2xsQ29udGFpbmVyUmVmfT5cbiAgICAgIDxDYXJkR3JpZD5cbiAgICAgICAge21lZGlhSXRlbXMubWFwKGZpbGUgPT4gKFxuICAgICAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgICAgICBrZXk9e2ZpbGUua2V5fVxuICAgICAgICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZEZpbGUoZmlsZSl9XG4gICAgICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkFzc2V0Q2xpY2soZmlsZSl9XG4gICAgICAgICAgICBpc0RyYWZ0PXtmaWxlLmRyYWZ0fVxuICAgICAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICAgICAgd2lkdGg9e2NhcmRXaWR0aH1cbiAgICAgICAgICAgIGhlaWdodD17Y2FyZEhlaWdodH1cbiAgICAgICAgICAgIG1hcmdpbj17Y2FyZE1hcmdpbn1cbiAgICAgICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICAgICAgZGlzcGxheVVSTD17ZGlzcGxheVVSTHMuZ2V0KGZpbGUuaWQsIGZpbGUudXJsID8gTWFwKHsgdXJsOiBmaWxlLnVybCB9KSA6IE1hcCgpKX1cbiAgICAgICAgICAgIGxvYWREaXNwbGF5VVJMPXsoKSA9PiBsb2FkRGlzcGxheVVSTChmaWxlKX1cbiAgICAgICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgICAgIGlzVmlld2FibGVJbWFnZT17ZmlsZS5pc1ZpZXdhYmxlSW1hZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICAgIHshY2FuTG9hZE1vcmUgPyBudWxsIDogPFdheXBvaW50IG9uRW50ZXI9e29uTG9hZE1vcmV9IC8+fVxuICAgICAgPC9DYXJkR3JpZD5cbiAgICAgIHshaXNQYWdpbmF0aW5nID8gbnVsbCA6IChcbiAgICAgICAgPFBhZ2luYXRpbmdNZXNzYWdlIGlzUHJpdmF0ZT17aXNQcml2YXRlfT57cGFnaW5hdGluZ01lc3NhZ2V9PC9QYWdpbmF0aW5nTWVzc2FnZT5cbiAgICAgICl9XG4gICAgPC9DYXJkR3JpZENvbnRhaW5lcj5cbiAgKTtcbn1cblxuY29uc3QgQ2FyZEdyaWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG5gO1xuXG5jb25zdCBDYXJkR3JpZCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XG5gO1xuXG5jb25zdCBQYWdpbmF0aW5nTWVzc2FnZSA9IHN0eWxlZC5oMWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuaXNQcml2YXRlICYmIGNvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuZnVuY3Rpb24gTWVkaWFMaWJyYXJ5Q2FyZEdyaWQocHJvcHMpIHtcbiAgY29uc3QgeyBjYW5Mb2FkTW9yZSwgaXNQYWdpbmF0aW5nIH0gPSBwcm9wcztcbiAgaWYgKGNhbkxvYWRNb3JlIHx8IGlzUGFnaW5hdGluZykge1xuICAgIHJldHVybiA8UGFnaW5hdGVkR3JpZCB7Li4ucHJvcHN9IC8+O1xuICB9XG4gIHJldHVybiA8VmlydHVhbGl6ZWRHcmlkIHsuLi5wcm9wc30gLz47XG59XG5cbk1lZGlhTGlicmFyeUNhcmRHcmlkLnByb3BUeXBlcyA9IHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBtZWRpYUl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZGlzcGxheVVSTDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgZHJhZnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIH0pLFxuICApLmlzUmVxdWlyZWQsXG4gIGlzU2VsZWN0ZWRGaWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkFzc2V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNhbkxvYWRNb3JlOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25Mb2FkTW9yZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQYWdpbmF0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGFnaW5hdGluZ01lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNhcmREcmFmdFRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZFdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNhcmRNYXJnaW46IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbG9hZERpc3BsYXlVUkw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzUHJpdmF0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc3BsYXlVUkxzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihNYXApLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZWRpYUxpYnJhcnlDYXJkR3JpZDtcbiJdfQ== */"));

function MediaLibraryCardGrid(props) {
  const {
    canLoadMore,
    isPaginating
  } = props;

  if (canLoadMore || isPaginating) {
    return (0, _core.jsx)(PaginatedGrid, props);
  }

  return (0, _core.jsx)(VirtualizedGrid, props);
}

MediaLibraryCardGrid.propTypes = {
  setScrollContainerRef: _propTypes.default.func.isRequired,
  mediaItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayURL: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
    id: _propTypes.default.string.isRequired,
    key: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    draft: _propTypes.default.bool
  })).isRequired,
  isSelectedFile: _propTypes.default.func.isRequired,
  onAssetClick: _propTypes.default.func.isRequired,
  canLoadMore: _propTypes.default.bool,
  onLoadMore: _propTypes.default.func.isRequired,
  isPaginating: _propTypes.default.bool,
  paginatingMessage: _propTypes.default.string,
  cardDraftText: _propTypes.default.string.isRequired,
  cardWidth: _propTypes.default.string.isRequired,
  cardMargin: _propTypes.default.string.isRequired,
  loadDisplayURL: _propTypes.default.func.isRequired,
  isPrivate: _propTypes.default.bool,
  displayURLs: _propTypes.default.instanceOf(_immutable.Map).isRequired
};
var _default = MediaLibraryCardGrid;
exports.default = _default;