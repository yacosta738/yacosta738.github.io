#!/usr/bin/env node
module.exports=function(e){var t={};function a(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,a),i.l=!0,i.exports}return a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)a.d(n,i,function(t){return e[t]}.bind(null,i));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=20)}([function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.joi=t.defaultSchema=void 0;const i=n(a(3)),r=["info","entriesByFolder","entriesByFiles","getEntry","unpublishedEntries","unpublishedEntry","unpublishedEntryDataFile","unpublishedEntryMediaFile","deleteUnpublishedEntry","persistEntry","updateUnpublishedEntryStatus","publishUnpublishedEntry","getMedia","getMediaFile","persistMedia","deleteFile","deleteFiles","getDeployPreview"],s=i.default.string().required(),o=i.default.number().required(),l=i.default.bool().required(),u=s,c=s;t.defaultSchema=function({path:e=s}={}){const t=i.default.object({branch:s}),a=i.default.object({path:e,content:s,encoding:s.valid("base64")}),n=i.default.object({slug:s,path:e,raw:s,newPath:e.optional()}),d=i.default.when("action",{switch:[{is:"info",then:i.default.allow()},{is:"entriesByFolder",then:t.keys({folder:e,extension:s,depth:o}).required()},{is:"entriesByFiles",then:t.keys({files:i.default.array().items(i.default.object({path:e,label:i.default.string()})).required()})},{is:"getEntry",then:t.keys({path:e}).required()},{is:"unpublishedEntries",then:t.keys({branch:s}).required()},{is:"unpublishedEntry",then:t.keys({id:i.default.string().optional(),collection:i.default.string().optional(),slug:i.default.string().optional(),cmsLabelPrefix:i.default.string().optional()}).required()},{is:"unpublishedEntryDataFile",then:t.keys({collection:u,slug:c,id:s,path:s}).required()},{is:"unpublishedEntryMediaFile",then:t.keys({collection:u,slug:c,id:s,path:s}).required()},{is:"deleteUnpublishedEntry",then:t.keys({collection:u,slug:c}).required()},{is:"persistEntry",then:t.keys({cmsLabelPrefix:i.default.string().optional(),entry:n,dataFiles:i.default.array().items(n),assets:i.default.array().items(a).required(),options:i.default.object({collectionName:i.default.string(),commitMessage:s,useWorkflow:l,status:s}).required()}).xor("entry","dataFiles").required()},{is:"updateUnpublishedEntryStatus",then:t.keys({collection:u,slug:c,newStatus:s,cmsLabelPrefix:i.default.string().optional()}).required()},{is:"publishUnpublishedEntry",then:t.keys({collection:u,slug:c}).required()},{is:"getMedia",then:t.keys({mediaFolder:e}).required()},{is:"getMediaFile",then:t.keys({path:e}).required()},{is:"persistMedia",then:t.keys({asset:a.required(),options:i.default.object({commitMessage:s}).required()}).required()},{is:"deleteFile",then:t.keys({path:e,options:i.default.object({commitMessage:s}).required()}).required()},{is:"deleteFiles",then:t.keys({paths:i.default.array().items(e).min(1).required(),options:i.default.object({commitMessage:s}).required()}).required()},{is:"getDeployPreview",then:t.keys({collection:u,slug:c}).required()}],otherwise:i.default.forbidden()});return i.default.object({action:i.default.valid(...r).required(),params:d})},t.joi=function(e){return(t,a,n)=>{const{error:i}=e.validate(t.body,{allowUnknown:!0});if(i){const{details:e}=i,t=e.map(e=>e.message).join(",");a.status(422).json({error:t})}else n()}}},function(e,t){e.exports=require("@hapi/joi")},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pathTraversal=void 0;const i=n(a(3)),r=n(a(0));t.pathTraversal=function(e){return i.default.extend({type:"path",base:i.default.string().required(),messages:{"path.invalid":"{{#label}} must resolve to a path under the configured repository"},validate(t,a){if(!r.default.join(e,t).startsWith(e))return{value:t,errors:a.error("path.invalid")}}}).path()}},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getUpdateDate=t.move=t.deleteFile=t.writeFile=t.listRepoFiles=void 0;const i=n(a(0)),r=a(1);async function s(e,t,a){if(a<=0)return[];try{const n=await r.promises.readdir(e,{withFileTypes:!0}),o=await Promise.all(n.map(n=>{const r=i.default.join(e,n.name);return n.isDirectory()?s(r,t,a-1):[r].filter(e=>e.endsWith(t))}));return[].concat(...o)}catch(e){return[]}}async function o(e,t){await r.promises.mkdir(i.default.dirname(t),{recursive:!0}),await r.promises.rename(e,t)}t.listRepoFiles=async function(e,t,a,n){return(await s(i.default.join(e,t),a,n)).map(t=>t.slice(e.length+1))},t.writeFile=async function(e,t){await r.promises.mkdir(i.default.dirname(e),{recursive:!0}),await r.promises.writeFile(e,t)},t.deleteFile=async function(e,t){await r.promises.unlink(i.default.join(e,t)).catch(()=>{})},t.move=async function(e,t){await o(e,t);const a=i.default.dirname(e),n=i.default.dirname(t),r=await s(a,"",100);await Promise.all(r.map(e=>o(e,e.replace(a,n))))},t.getUpdateDate=async function(e,t){return r.promises.stat(i.default.join(e,t)).then(e=>e.mtime).catch(()=>new Date)}},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.readMediaFile=t.entriesFromFiles=void 0;const i=n(a(16)),r=n(a(0)),s=a(1);function o(e){return i.default.createHash("sha256").update(e).digest("hex")}function l(e){return e.replace(/\\/g,"/")}t.entriesFromFiles=async function(e,t){return Promise.all(t.map(async t=>{try{const a=await s.promises.readFile(r.default.join(e,t.path));return{data:a.toString(),file:{path:l(t.path),label:t.label,id:o(a)}}}catch(e){return{data:null,file:{path:l(t.path),label:t.label,id:null}}}}))},t.readMediaFile=async function(e,t){const a=await s.promises.readFile(r.default.join(e,t));return{id:o(a),content:a.toString("base64"),encoding:"base64",path:l(t),name:r.default.basename(t)}}},function(e,t){e.exports=require("express")},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerCommonMiddlewares=void 0;const i=n(a(7)),r=n(a(9)),s=n(a(10));t.registerCommonMiddlewares=function(e,t){const{logger:a}=t,n={write:e=>{a.debug(String(e).trim())}};e.use(r.default("combined",{stream:n})),e.use(s.default()),e.use(i.default.json({limit:"50mb"}))}},function(e,t){e.exports=require("morgan")},function(e,t){e.exports=require("cors")},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.localGitMiddleware=t.getSchema=t.validateRepo=void 0;const i=n(a(0)),r=a(1),s=a(12),o=a(13),l=n(a(14)),u=a(15),c=a(2),d=a(4),f=a(5),p=a(6);async function m(e,t){await e.add("."),await e.commit(t,void 0,{"--no-verify":null,"--no-gpg-sign":null})}async function h(e){return await e.branchLocal().then(e=>e.current)}async function y(e,t,a){const n=await h(e);try{n!==t&&await e.checkout(t);return await a()}finally{await e.checkout(n)}}function g(e){return`branch.${e}.description`}async function w(e,t,a,n,r){await Promise.all(a.map(e=>f.writeFile(i.default.join(t,e.path),e.raw))),await Promise.all(n.map(e=>f.writeFile(i.default.join(t,e.path),Buffer.from(e.content,e.encoding)))),a.every(e=>e.newPath)&&a.forEach(async e=>{await f.move(i.default.join(t,e.path),i.default.join(t,e.newPath))}),await m(e,r)}async function b(e,t){return await e.branchLocal().then(({all:e})=>e.includes(t))}async function F(e,t,a){const n=await e.diff([t,a]);return o.parse(n).map(e=>{var t,a;const n=(null===(t=e.oldPath)||void 0===t?void 0:t.replace(/b\//,""))||"",i=(null===(a=e.newPath)||void 0===a?void 0:a.replace(/b\//,""))||"",r=i||n;return{oldPath:n,newPath:i,status:e.status,newFile:"added"===e.status,path:r,id:r,binary:e.binary||/.svg$/.test(r)}})}async function v({repoPath:e}){const t=l.default(e);if(!await t.checkIsRepo())throw Error(e+" is not a valid git repository")}function M({repoPath:e}){return c.defaultSchema({path:d.pathTraversal(e)})}function _({repoPath:e,logger:t}){const a=l.default(e),n=u.withTimeout(new u.Mutex,3e3,new Error("Request timed out"));return async function(o,l){let u;try{u=await n.acquire();const{body:t}=o;if("info"===t.action)return void l.json({repo:i.default.basename(e),publish_modes:["simple","editorial_workflow"],type:"local_git"});const{branch:c}=t.params;if(!await b(a,c)){const e=`Default branch '${c}' doesn't exist`;return void l.status(422).json({error:e})}switch(t.action){case"entriesByFolder":{const n=t.params,{folder:i,extension:r,depth:s}=n,o=await y(a,c,()=>f.listRepoFiles(e,i,r,s).then(t=>p.entriesFromFiles(e,t.map(e=>({path:e})))));l.json(o);break}case"entriesByFiles":{const n=t.params,i=await y(a,c,()=>p.entriesFromFiles(e,n.files));l.json(i);break}case"getEntry":{const n=t.params,[i]=await y(a,c,()=>p.entriesFromFiles(e,[{path:n.path}]));l.json(i);break}case"unpublishedEntries":{const e=await a.branchLocal().then(e=>e.all.filter(e=>e.startsWith(s.CMS_BRANCH_PREFIX+"/")));l.json(e.map(s.contentKeyFromBranch));break}case"unpublishedEntry":{let{id:n,collection:i,slug:r,cmsLabelPrefix:o}=t.params;n&&({collection:i,slug:r}=s.parseContentKey(n));const u=s.generateContentKey(i,r),d=s.branchFromContentKey(u);if(!await b(a,d))return l.status(404).json({message:"Not Found"});{const t=await F(a,c,d),n=await a.raw(["config",g(d)]),u=n&&s.labelToStatus(n.trim(),o||""),p=t.length>=0?await y(a,d,async()=>(await Promise.all(t.map(({newPath:t})=>f.getUpdateDate(e,t)))).reduce((e,t)=>e>t?e:t)):new Date,m={collection:i,slug:r,status:u,diffs:t,updatedAt:p};l.json(m)}break}case"unpublishedEntryDataFile":{const{path:n,collection:i,slug:r}=t.params,o=s.generateContentKey(i,r),u=s.branchFromContentKey(o),[c]=await y(a,u,()=>p.entriesFromFiles(e,[{path:n}]));l.json({data:c.data});break}case"unpublishedEntryMediaFile":{const{path:n,collection:i,slug:r}=t.params,o=s.generateContentKey(i,r),u=s.branchFromContentKey(o),c=await y(a,u,()=>p.readMediaFile(e,n));l.json(c);break}case"deleteUnpublishedEntry":{const{collection:e,slug:n}=t.params,i=s.generateContentKey(e,n),r=s.branchFromContentKey(i);await h(a)===r&&await a.checkoutLocalBranch(c),await a.branch(["-D",r]),l.json({message:"deleted branch: "+r});break}case"persistEntry":{const{cmsLabelPrefix:n,entry:o,dataFiles:u=[o],assets:d,options:f}=t.params;if(f.useWorkflow){const t=u[0].slug,o=f.collectionName,l=s.generateContentKey(o,t),p=s.branchFromContentKey(l);await y(a,c,async()=>{const t=await b(a,p);t?await a.checkout(p):await a.checkoutLocalBranch(p),await async function(e,t){const a=await e.raw(["config","commit.gpgsign"]);try{"true"===a&&await e.addConfig("commit.gpgsign","false"),await e.rebase([t,"--no-verify"])}finally{"true"===a&&await e.addConfig("commit.gpgsign",a)}}(a,c);const o=(await F(a,c,p)).filter(e=>e.binary&&!d.map(e=>e.path).includes(e.path));if(await Promise.all(o.map(t=>r.promises.unlink(i.default.join(e,t.path)))),await w(a,e,u,d,f.commitMessage),!t){const e=s.statusToLabel(f.status,n||"");await a.addConfig(g(p),e)}})}else await y(a,c,async()=>{await w(a,e,u,d,f.commitMessage)});l.json({message:"entry persisted"});break}case"updateUnpublishedEntryStatus":{const{collection:e,slug:n,newStatus:i,cmsLabelPrefix:r}=t.params,o=s.generateContentKey(e,n),u=s.branchFromContentKey(o),d=s.statusToLabel(i,r||"");await a.addConfig(g(u),d),l.json({message:`${c} description was updated to ${d}`});break}case"publishUnpublishedEntry":{const{collection:e,slug:n}=t.params,i=s.generateContentKey(e,n),r=s.branchFromContentKey(i);await async function(e,t,a){const n=await e.raw(["config","commit.gpgsign"]);try{"true"===n&&await e.addConfig("commit.gpgsign","false"),await e.mergeFromTo(t,a)}finally{"true"===n&&await e.addConfig("commit.gpgsign",n)}}(a,r,c),await a.deleteLocalBranch(r),l.json({message:`branch ${r} merged to ${c}`});break}case"getMedia":{const{mediaFolder:n}=t.params,i=await y(a,c,async()=>{const t=await f.listRepoFiles(e,n,"",1);return await Promise.all(t.map(t=>p.readMediaFile(e,t)))});l.json(i);break}case"getMediaFile":{const{path:n}=t.params,i=await y(a,c,()=>p.readMediaFile(e,n));l.json(i);break}case"persistMedia":{const{asset:n,options:{commitMessage:r}}=t.params,s=await y(a,c,async()=>(await f.writeFile(i.default.join(e,n.path),Buffer.from(n.content,n.encoding)),await m(a,r),p.readMediaFile(e,n.path)));l.json(s);break}case"deleteFile":{const{path:n,options:{commitMessage:i}}=t.params;await y(a,c,async()=>{await f.deleteFile(e,n),await m(a,i)}),l.json({message:"deleted file "+n});break}case"deleteFiles":{const{paths:n,options:{commitMessage:i}}=t.params;await y(a,c,async()=>{await Promise.all(n.map(t=>f.deleteFile(e,t))),await m(a,i)}),l.json({message:"deleted files "+n.join(", ")});break}case"getDeployPreview":l.json(null);break;default:{const e="Unknown action "+t.action;l.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(o.body)}: ${e.message}`),l.status(500).json({error:"Unknown error"})}finally{u&&u()}}}t.validateRepo=v,t.getSchema=M,t.localGitMiddleware=_,t.registerMiddleware=async function(e,t){const{logger:a}=t,n=i.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());await v({repoPath:n}),e.post("/api/v1",c.joi(M({repoPath:n}))),e.post("/api/v1",_({repoPath:n,logger:a})),a.info("Netlify CMS Git Proxy Server configured with "+n)}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.branchFromContentKey=t.contentKeyFromBranch=t.parseContentKey=t.generateContentKey=t.statusToLabel=t.labelToStatus=t.isCMSLabel=t.MERGE_COMMIT_MESSAGE=t.DEFAULT_PR_BODY=t.CMS_BRANCH_PREFIX=void 0,t.CMS_BRANCH_PREFIX="cms",t.DEFAULT_PR_BODY="Automatically generated by Netlify CMS",t.MERGE_COMMIT_MESSAGE="Automatically generated. Merged on Netlify CMS.";function n(e){return e||"netlify-cms/"}t.isCMSLabel=function(e,t){return e.startsWith(n(t))},t.labelToStatus=function(e,t){return e.slice(n(t).length)},t.statusToLabel=function(e,t){return`${n(t)}${e}`},t.generateContentKey=function(e,t){return`${e}/${t}`},t.parseContentKey=function(e){const t=e.indexOf("/");return{collection:e.slice(0,t),slug:e.slice(t+1)}},t.contentKeyFromBranch=function(e){return e.slice((t.CMS_BRANCH_PREFIX+"/").length)},t.branchFromContentKey=function(e){return`${t.CMS_BRANCH_PREFIX}/${e}`}},function(e,t){e.exports=require("what-the-diff")},function(e,t){e.exports=require("simple-git")},function(e,t){e.exports=require("async-mutex")},function(e,t){e.exports=require("crypto")},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.getSchema=t.localFsMiddleware=void 0;const i=n(a(0)),r=a(2),s=a(4),o=a(5),l=a(6);function u({repoPath:e,logger:t}){return async function(a,n){try{const{body:t}=a;switch(t.action){case"info":n.json({repo:i.default.basename(e),publish_modes:["simple"],type:"local_fs"});break;case"entriesByFolder":{const a=t.params,{folder:i,extension:r,depth:s}=a,u=await o.listRepoFiles(e,i,r,s).then(t=>l.entriesFromFiles(e,t.map(e=>({path:e}))));n.json(u);break}case"entriesByFiles":{const a=t.params,i=await l.entriesFromFiles(e,a.files);n.json(i);break}case"getEntry":{const a=t.params,[i]=await l.entriesFromFiles(e,[{path:a.path}]);n.json(i);break}case"persistEntry":{const{entry:a,dataFiles:r=[a],assets:s}=t.params;await Promise.all(r.map(t=>o.writeFile(i.default.join(e,t.path),t.raw))),await Promise.all(s.map(t=>o.writeFile(i.default.join(e,t.path),Buffer.from(t.content,t.encoding)))),r.every(e=>e.newPath)&&r.forEach(async t=>{await o.move(i.default.join(e,t.path),i.default.join(e,t.newPath))}),n.json({message:"entry persisted"});break}case"getMedia":{const{mediaFolder:a}=t.params,i=await o.listRepoFiles(e,a,"",1),r=await Promise.all(i.map(t=>l.readMediaFile(e,t)));n.json(r);break}case"getMediaFile":{const{path:a}=t.params,i=await l.readMediaFile(e,a);n.json(i);break}case"persistMedia":{const{asset:a}=t.params;await o.writeFile(i.default.join(e,a.path),Buffer.from(a.content,a.encoding));const r=await l.readMediaFile(e,a.path);n.json(r);break}case"deleteFile":{const{path:a}=t.params;await o.deleteFile(e,a),n.json({message:"deleted file "+a});break}case"deleteFiles":{const{paths:a}=t.params;await Promise.all(a.map(t=>o.deleteFile(e,t))),n.json({message:"deleted files "+a.join(", ")});break}case"getDeployPreview":n.json(null);break;default:{const e="Unknown action "+t.action;n.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(a.body)}: ${e.message}`),n.status(500).json({error:"Unknown error"})}}}function c({repoPath:e}){return r.defaultSchema({path:s.pathTraversal(e)})}t.localFsMiddleware=u,t.getSchema=c,t.registerMiddleware=async function(e,t){const{logger:a}=t,n=i.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());e.post("/api/v1",r.joi(c({repoPath:n}))),e.post("/api/v1",u({repoPath:n,logger:a})),a.info("Netlify CMS File System Proxy Server configured with "+n)}},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createLogger=void 0;const i=n(a(19)),{combine:r,colorize:s,simple:o}=i.default.format;t.createLogger=function({level:e}){return i.default.createLogger({level:e,format:r(s(),o()),transports:[new i.default.transports.Console]})}},function(e,t){e.exports=require("winston")},function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),a(21).config();const i=n(a(7)),r=a(8),s=a(11),o=a(17),l=a(18),u=i.default(),c=process.env.PORT||8081,d=process.env.LOG_LEVEL||"info";(async()=>{const e=l.createLogger({level:d}),t={logger:e};r.registerCommonMiddlewares(u,t);try{const e=process.env.MODE||"fs";if("fs"===e)o.registerMiddleware(u,t);else{if("git"!==e)throw new Error(`Unknown proxy mode '${e}'`);s.registerMiddleware(u,t)}}catch(t){e.error(t.message),process.exit(1)}u.listen(c,()=>{e.info("Netlify CMS Proxy Server listening on port "+c)})})()},function(e,t){e.exports=require("dotenv")}]);
//# sourceMappingURL=index.js.map