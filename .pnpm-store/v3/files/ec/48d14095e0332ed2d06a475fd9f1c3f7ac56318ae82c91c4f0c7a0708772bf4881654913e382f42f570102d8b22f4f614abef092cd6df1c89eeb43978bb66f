{"version":3,"file":"slate-hotkeys.es.js","sources":["../src/index.js"],"sourcesContent":["import { isKeyHotkey } from 'is-hotkey'\nimport { IS_IOS, IS_MAC } from 'slate-dev-environment'\n\n/**\n * Hotkey mappings for each platform.\n *\n * @type {Object}\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: 'ctrl+y',\n}\n\n/**\n * Hotkeys.\n *\n * @type {Object}\n */\n\nconst Hotkeys = {}\n\nconst IS_APPLE = IS_IOS || IS_MAC\nconst IS_WINDOWS = !IS_APPLE\nconst KEYS = []\n  .concat(Object.keys(HOTKEYS))\n  .concat(Object.keys(APPLE_HOTKEYS))\n  .concat(Object.keys(WINDOWS_HOTKEYS))\n\nKEYS.forEach(key => {\n  const method = `is${key[0].toUpperCase()}${key.slice(1)}`\n  if (Hotkeys[method]) return\n\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  Hotkeys[method] = event => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (IS_WINDOWS && isWindows && isWindows(event)) return true\n    return false\n  }\n})\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Hotkeys\n"],"names":["HOTKEYS","APPLE_HOTKEYS","WINDOWS_HOTKEYS","Hotkeys","IS_APPLE","IS_IOS","IS_MAC","IS_WINDOWS","KEYS","concat","Object","keys","forEach","method","key","toUpperCase","slice","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","event"],"mappings":";;;AAGA;;;;;;AAMA,IAAMA,UAAU;QACR,OADQ;WAEL,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,IAA1B,EAAgC,WAAhC,EAA6C,OAA7C,CAFK;gBAGA,MAHA;eAID,OAJC;oBAKI,WALJ;mBAMG,YANH;kBAOE,kBAPF;iBAQC,eARD;kBASE,YATF;iBAUC,aAVD;UAWN,OAXM;cAYF,cAZE;QAaR;CAbR;;AAgBA,IAAMC,gBAAgB;oBACF,QADE;mBAEH,UAFG;oBAGF,UAHE;mBAIH,WAJG;kBAKJ,CAAC,gBAAD,EAAmB,QAAnB,CALI;iBAML,CAAC,aAAD,EAAgB,QAAhB,CANK;sBAOA,sBAPA;qBAQD,CAAC,mBAAD,EAAsB,QAAtB,CARC;sBASA,sBATA;qBAUD,mBAVC;sBAWA,cAXA;qBAYD,gBAZC;QAad,aAbc;sBAcA;CAdtB;;AAiBA,IAAMC,kBAAkB;sBACF,uBADE;qBAEH,oBAFG;QAGhB;;;;;;;;CAHR,CAYA,IAAMC,UAAU,EAAhB;;AAEA,IAAMC,WAAWC,UAAUC,MAA3B;AACA,IAAMC,aAAa,CAACH,QAApB;AACA,IAAMI,OAAO,GACVC,MADU,CACHC,OAAOC,IAAP,CAAYX,OAAZ,CADG,EAEVS,MAFU,CAEHC,OAAOC,IAAP,CAAYV,aAAZ,CAFG,EAGVQ,MAHU,CAGHC,OAAOC,IAAP,CAAYT,eAAZ,CAHG,CAAb;;AAKAM,KAAKI,OAAL,CAAa,eAAO;MACZC,gBAAcC,IAAI,CAAJ,EAAOC,WAAP,EAAd,GAAqCD,IAAIE,KAAJ,CAAU,CAAV,CAA3C;MACIb,QAAQU,MAAR,CAAJ,EAAqB;;MAEfI,UAAUjB,QAAQc,GAAR,CAAhB;MACMI,QAAQjB,cAAca,GAAd,CAAd;MACMK,UAAUjB,gBAAgBY,GAAhB,CAAhB;;MAEMM,YAAYH,WAAWI,YAAYJ,OAAZ,CAA7B;MACMK,UAAUJ,SAASG,YAAYH,KAAZ,CAAzB;MACMK,YAAYJ,WAAWE,YAAYF,OAAZ,CAA7B;;UAEQN,MAAR,IAAkB,iBAAS;QACrBO,aAAaA,UAAUI,KAAV,CAAjB,EAAmC,OAAO,IAAP;QAC/BpB,YAAYkB,OAAZ,IAAuBA,QAAQE,KAAR,CAA3B,EAA2C,OAAO,IAAP;QACvCjB,cAAcgB,SAAd,IAA2BA,UAAUC,KAAV,CAA/B,EAAiD,OAAO,IAAP;WAC1C,KAAP;GAJF;CAZF;;;;"}