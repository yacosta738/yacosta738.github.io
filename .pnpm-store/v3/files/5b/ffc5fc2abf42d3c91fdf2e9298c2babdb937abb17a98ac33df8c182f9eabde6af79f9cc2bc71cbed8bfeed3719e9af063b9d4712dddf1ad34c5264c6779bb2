"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _media = require("../../../actions/media");

var _collectionViews = require("../../../constants/collectionViews");

var _medias = require("../../../reducers/medias");

var _collections = require("../../../reducers/collections");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const ListCard = (0, _styledBase.default)("li", {
  target: "eab48an0",
  label: "ListCard"
})(_netlifyCmsUiDefault.components.card, ";width:", _netlifyCmsUiDefault.lengths.topCardWidth, ";margin-left:12px;margin-bottom:10px;overflow:hidden;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVzBCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNvbG9ycywgY29sb3JzUmF3LCBjb21wb25lbnRzLCBsZW5ndGhzLCB6SW5kZXggfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgYm91bmRHZXRBc3NldCB9IGZyb20gJy4uLy4uLy4uL2FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgVklFV19TVFlMRV9MSVNULCBWSUVXX1NUWUxFX0dSSUQgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMvY29sbGVjdGlvblZpZXdzJztcbmltcG9ydCB7IHNlbGVjdElzTG9hZGluZ0Fzc2V0IH0gZnJvbSAnLi4vLi4vLi4vcmVkdWNlcnMvbWVkaWFzJztcbmltcG9ydCB7IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlIH0gZnJvbSAnLi4vLi4vLi4vcmVkdWNlcnMvY29sbGVjdGlvbnMnO1xuXG5jb25zdCBMaXN0Q2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICB3aWR0aDogJHtsZW5ndGhzLnRvcENhcmRXaWR0aH07XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgTGlzdENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxNnB4IDIycHg7XG5cbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gIH1cbmA7XG5cbmNvbnN0IEdyaWRDYXJkID0gc3R5bGVkLmxpYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIGZsZXg6IDAgMCAzMzVweDtcbiAgaGVpZ2h0OiAyNDBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG5gO1xuXG5jb25zdCBHcmlkQ2FyZExpbmsgPSBzdHlsZWQoTGluaylgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuXG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogJHt6SW5kZXguekluZGV4MX07XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IC0yMCU7XG4gICAgaGVpZ2h0OiAxNDAlO1xuICAgIHdpZHRoOiAxNDAlO1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTE1cHggMjRweCAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIH1cbmA7XG5cbmNvbnN0IENhcmRJbWFnZSA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke3Byb3BzID0+IHByb3BzLnNyY30pO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBoZWlnaHQ6IDE1MHB4O1xuYDtcblxuZnVuY3Rpb24gRW50cnlDYXJkKHtcbiAgcGF0aCxcbiAgc3VtbWFyeSxcbiAgaW1hZ2UsXG4gIGltYWdlRmllbGQsXG4gIGNvbGxlY3Rpb25MYWJlbCxcbiAgdmlld1N0eWxlID0gVklFV19TVFlMRV9MSVNULFxuICBnZXRBc3NldCxcbn0pIHtcbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9MSVNUKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxMaXN0Q2FyZD5cbiAgICAgICAgPExpc3RDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAge2NvbGxlY3Rpb25MYWJlbCA/IDxDb2xsZWN0aW9uTGFiZWw+e2NvbGxlY3Rpb25MYWJlbH08L0NvbGxlY3Rpb25MYWJlbD4gOiBudWxsfVxuICAgICAgICAgIDxMaXN0Q2FyZFRpdGxlPntzdW1tYXJ5fTwvTGlzdENhcmRUaXRsZT5cbiAgICAgICAgPC9MaXN0Q2FyZExpbms+XG4gICAgICA8L0xpc3RDYXJkPlxuICAgICk7XG4gIH1cblxuICBpZiAodmlld1N0eWxlID09PSBWSUVXX1NUWUxFX0dSSUQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEdyaWRDYXJkPlxuICAgICAgICA8R3JpZENhcmRMaW5rIHRvPXtwYXRofT5cbiAgICAgICAgICA8Q2FyZEJvZHkgaGFzSW1hZ2U9e2ltYWdlfT5cbiAgICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICAgIDxDYXJkSGVhZGluZz57c3VtbWFyeX08L0NhcmRIZWFkaW5nPlxuICAgICAgICAgIDwvQ2FyZEJvZHk+XG4gICAgICAgICAge2ltYWdlID8gPENhcmRJbWFnZSBzcmM9e2dldEFzc2V0KGltYWdlLCBpbWFnZUZpZWxkKS50b1N0cmluZygpfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBlbnRyeSwgaW5mZXJlZEZpZWxkcywgY29sbGVjdGlvbiB9ID0gb3duUHJvcHM7XG4gIGNvbnN0IGVudHJ5RGF0YSA9IGVudHJ5LmdldCgnZGF0YScpO1xuICBjb25zdCBzdW1tYXJ5ID0gc2VsZWN0RW50cnlDb2xsZWN0aW9uVGl0bGUoY29sbGVjdGlvbiwgZW50cnkpO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgY29uc3QgaXNMb2FkaW5nQXNzZXQgPSBzZWxlY3RJc0xvYWRpbmdBc3NldChzdGF0ZS5tZWRpYXMpO1xuXG4gIHJldHVybiB7XG4gICAgc3VtbWFyeSxcbiAgICBwYXRoOiBgL2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX0vZW50cmllcy8ke2VudHJ5LmdldCgnc2x1ZycpfWAsXG4gICAgaW1hZ2UsXG4gICAgaW1hZ2VGb2xkZXI6IGNvbGxlY3Rpb25cbiAgICAgIC5nZXQoJ2ZpZWxkcycpXG4gICAgICA/LmZpbmQoZiA9PiBmLmdldCgnbmFtZScpID09PSBpbmZlcmVkRmllbGRzLmltYWdlRmllbGQgJiYgZi5nZXQoJ3dpZGdldCcpID09PSAnaW1hZ2UnKSxcbiAgICBpc0xvYWRpbmdBc3NldCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiBib3VuZEdldEFzc2V0KGRpc3BhdGNoLCBjb2xsZWN0aW9uLCBlbnRyeSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZVByb3BzLFxuICAgIC4uLmRpc3BhdGNoUHJvcHMsXG4gICAgLi4ub3duUHJvcHMsXG4gICAgZ2V0QXNzZXQ6IGRpc3BhdGNoUHJvcHMuYm91bmRHZXRBc3NldChvd25Qcm9wcy5jb2xsZWN0aW9uLCBvd25Qcm9wcy5lbnRyeSksXG4gIH07XG59XG5cbmNvbnN0IENvbm5lY3RlZEVudHJ5Q2FyZCA9IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpKEVudHJ5Q2FyZCk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbm5lY3RlZEVudHJ5Q2FyZDtcbiJdfQ== */"));
const ListCardLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.Link, {
  target: "eab48an1",
  label: "ListCardLink"
})("display:block;max-width:100%;padding:16px 22px;&:hover{background-color:", _netlifyCmsUiDefault.colors.foreground, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */"));
const GridCard = (0, _styledBase.default)("li", {
  target: "eab48an2",
  label: "GridCard"
})(_netlifyCmsUiDefault.components.card, ";flex:0 0 335px;height:240px;overflow:hidden;margin-left:12px;margin-bottom:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkIwQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */"));
const GridCardLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.Link, {
  target: "eab48an3",
  label: "GridCardLink"
})("display:block;height:100%;outline-offset:-2px;&,&:hover{background-color:", _netlifyCmsUiDefault.colors.foreground, ";color:", _netlifyCmsUiDefault.colors.text, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0NpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */"));
const CollectionLabel = (0, _styledBase.default)("h2", {
  target: "eab48an4",
  label: "CollectionLabel"
})("font-size:12px;color:", _netlifyCmsUiDefault.colors.textLead, ";text-transform:uppercase;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0RpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */"));
const ListCardTitle = (0, _styledBase.default)("h2", {
  target: "eab48an5",
  label: "ListCardTitle"
})(process.env.NODE_ENV === "production" ? {
  name: "gx0lhm",
  styles: "margin-bottom:0;"
} : {
  name: "gx0lhm",
  styles: "margin-bottom:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0QrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardHeading = (0, _styledBase.default)("h2", {
  target: "eab48an6",
  label: "CardHeading"
})(process.env.NODE_ENV === "production" ? {
  name: "1kpnu25",
  styles: "margin:0 0 2px;"
} : {
  name: "1kpnu25",
  styles: "margin:0 0 2px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEQ2QiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardBody = (0, _styledBase.default)("div", {
  target: "eab48an7",
  label: "CardBody"
})("padding:16px 22px;height:90px;position:relative;margin-bottom:", props => props.hasImage && 0, ";&:after{content:'';position:absolute;display:block;z-index:", _netlifyCmsUiDefault.zIndex.zIndex1, ";bottom:0;left:-20%;height:140%;width:140%;box-shadow:inset 0 -15px 24px ", _netlifyCmsUiDefault.colorsRaw.white, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0UyQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */"));
const CardImage = (0, _styledBase.default)("div", {
  target: "eab48an8",
  label: "CardImage"
})("background-image:url(", props => props.src, ");background-position:center center;background-size:cover;background-repeat:no-repeat;height:150px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUY0QiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzZWxlY3RJc0xvYWRpbmdBc3NldCB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL21lZGlhcyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcblxuICAmLFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxlY3Rpb25MYWJlbCA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcblxuY29uc3QgTGlzdENhcmRUaXRsZSA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG5gO1xuXG5jb25zdCBDYXJkQm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjJweDtcbiAgaGVpZ2h0OiA5MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaGFzSW1hZ2UgJiYgMH07XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5zcmN9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgZ2V0QXNzZXQsXG59KSB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2Ugc3JjPXtnZXRBc3NldChpbWFnZSwgaW1hZ2VGaWVsZCkudG9TdHJpbmcoKX0gLz4gOiBudWxsfVxuICAgICAgICA8L0dyaWRDYXJkTGluaz5cbiAgICAgIDwvR3JpZENhcmQ+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVyZWRGaWVsZHMuaW1hZ2VGaWVsZCk7XG4gIGlmIChpbWFnZSkge1xuICAgIGltYWdlID0gZW5jb2RlVVJJKGltYWdlKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICAgIGltYWdlRm9sZGVyOiBjb2xsZWN0aW9uXG4gICAgICAuZ2V0KCdmaWVsZHMnKVxuICAgICAgPy5maW5kKGYgPT4gZi5nZXQoJ25hbWUnKSA9PT0gaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkICYmIGYuZ2V0KCd3aWRnZXQnKSA9PT0gJ2ltYWdlJyksXG4gICAgaXNMb2FkaW5nQXNzZXQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */"));

function EntryCard(_ref) {
  let {
    path,
    summary,
    image,
    imageField,
    collectionLabel,
    viewStyle = _collectionViews.VIEW_STYLE_LIST,
    getAsset
  } = _ref;

  if (viewStyle === _collectionViews.VIEW_STYLE_LIST) {
    return (0, _core.jsx)(ListCard, null, (0, _core.jsx)(ListCardLink, {
      to: path
    }, collectionLabel ? (0, _core.jsx)(CollectionLabel, null, collectionLabel) : null, (0, _core.jsx)(ListCardTitle, null, summary)));
  }

  if (viewStyle === _collectionViews.VIEW_STYLE_GRID) {
    return (0, _core.jsx)(GridCard, null, (0, _core.jsx)(GridCardLink, {
      to: path
    }, (0, _core.jsx)(CardBody, {
      hasImage: image
    }, collectionLabel ? (0, _core.jsx)(CollectionLabel, null, collectionLabel) : null, (0, _core.jsx)(CardHeading, null, summary)), image ? (0, _core.jsx)(CardImage, {
      src: getAsset(image, imageField).toString()
    }) : null));
  }
}

function mapStateToProps(state, ownProps) {
  var _collection$get;

  const {
    entry,
    inferedFields,
    collection
  } = ownProps;
  const entryData = entry.get('data');
  const summary = (0, _collections.selectEntryCollectionTitle)(collection, entry);
  let image = entryData.get(inferedFields.imageField);

  if (image) {
    image = encodeURI(image);
  }

  const isLoadingAsset = (0, _medias.selectIsLoadingAsset)(state.medias);
  return {
    summary,
    path: `/collections/${collection.get('name')}/entries/${entry.get('slug')}`,
    image,
    imageFolder: (_collection$get = collection.get('fields')) === null || _collection$get === void 0 ? void 0 : _collection$get.find(f => f.get('name') === inferedFields.imageField && f.get('widget') === 'image'),
    isLoadingAsset
  };
}

function mapDispatchToProps(dispatch) {
  return {
    boundGetAsset: (collection, entry) => (0, _media.boundGetAsset)(dispatch, collection, entry)
  };
}

function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, stateProps), dispatchProps), ownProps), {}, {
    getAsset: dispatchProps.boundGetAsset(ownProps.collection, ownProps.entry)
  });
}

const ConnectedEntryCard = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(EntryCard);
var _default = ConnectedEntryCard;
exports.default = _default;