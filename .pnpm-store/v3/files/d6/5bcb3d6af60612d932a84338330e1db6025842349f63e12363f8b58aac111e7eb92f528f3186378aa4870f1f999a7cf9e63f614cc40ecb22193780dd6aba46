"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _reactPolyglot = require("react-polyglot");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const SearchContainer = (0, _styledBase.default)("div", {
  target: "e10zyk1w0",
  label: "SearchContainer"
})("margin:0 12px;position:relative;", _netlifyCmsUiDefault.Icon, "{position:absolute;top:0;left:6px;z-index:", _netlifyCmsUiDefault.zIndex.zIndex2, ";height:100%;display:flex;align-items:center;pointer-events:none;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const InputContainer = (0, _styledBase.default)("div", {
  target: "e10zyk1w1",
  label: "InputContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "14s4iyf",
  styles: "display:flex;align-items:center;position:relative;"
} : {
  name: "14s4iyf",
  styles: "display:flex;align-items:center;position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchInput = (0, _styledBase.default)("input", {
  target: "e10zyk1w2",
  label: "SearchInput"
})("background-color:#eff0f4;border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";font-size:14px;padding:10px 6px 10px 32px;width:100%;position:relative;z-index:", _netlifyCmsUiDefault.zIndex.zIndex1, ";&:focus{outline:none;box-shadow:inset 0 0 0 2px ", _netlifyCmsUiDefault.colorsRaw.blue, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SuggestionsContainer = (0, _styledBase.default)("div", {
  target: "e10zyk1w3",
  label: "SuggestionsContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1jke4yk",
  styles: "position:relative;width:100%;"
} : {
  name: "1jke4yk",
  styles: "position:relative;width:100%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Suggestions = (0, _styledBase.default)("ul", {
  target: "e10zyk1w4",
  label: "Suggestions"
})("position:absolute;top:6px;left:0;right:0;padding:10px 0;margin:0;list-style:none;background-color:#fff;border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";border:1px solid ", _netlifyCmsUiDefault.colors.textFieldBorder, ";z-index:", _netlifyCmsUiDefault.zIndex.zIndex1, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SuggestionHeader = (0, _styledBase.default)("li", {
  target: "e10zyk1w5",
  label: "SuggestionHeader"
})("padding:0 6px 6px 32px;font-size:12px;color:", _netlifyCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SuggestionItem = (0, _styledBase.default)("li", {
  target: "e10zyk1w6",
  label: "SuggestionItem"
})(_ref => {
  let {
    isActive
  } = _ref;
  return `
  color: ${isActive ? _netlifyCmsUiDefault.colors.active : _netlifyCmsUiDefault.colorsRaw.grayDark};
  background-color: ${isActive ? _netlifyCmsUiDefault.colors.activeBackground : 'inherit'};
  padding: 6px 6px 6px 32px;
  cursor: pointer;
  position: relative;

  &:hover {
    color: ${_netlifyCmsUiDefault.colors.active};
    background-color: ${_netlifyCmsUiDefault.colors.activeBackground};
  }
`;
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const SuggestionDivider = (0, _styledBase.default)("div", {
  target: "e10zyk1w7",
  label: "SuggestionDivider"
})(process.env.NODE_ENV === "production" ? {
  name: "8atqhb",
  styles: "width:100%;"
} : {
  name: "8atqhb",
  styles: "width:100%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

class CollectionSearch extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      query: this.props.searchTerm,
      suggestionsVisible: false,
      // default to the currently selected
      selectedCollectionIdx: this.getSelectedSelectionBasedOnProps()
    });

    _defineProperty(this, "submitSearch", () => {
      const {
        onSubmit,
        collections
      } = this.props;
      const {
        selectedCollectionIdx,
        query
      } = this.state;
      this.toggleSuggestions(false);

      if (selectedCollectionIdx !== -1) {
        onSubmit(query, collections.toIndexedSeq().getIn([selectedCollectionIdx, 'name']));
      } else {
        onSubmit(query);
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      const {
        suggestionsVisible
      } = this.state;

      if (event.key === 'Enter') {
        this.submitSearch();
      }

      if (suggestionsVisible) {
        // allow closing of suggestions with escape key
        if (event.key === 'Escape') {
          this.toggleSuggestions(false);
        }

        if (event.key === 'ArrowDown') {
          this.selectNextSuggestion();
          event.preventDefault();
        } else if (event.key === 'ArrowUp') {
          this.selectPreviousSuggestion();
          event.preventDefault();
        }
      }
    });

    _defineProperty(this, "handleQueryChange", query => {
      this.setState({
        query
      });
      this.toggleSuggestions(query !== '');

      if (query === '') {
        this.resetSelectedSuggestion();
      }
    });

    _defineProperty(this, "handleSuggestionClick", (event, idx) => {
      this.setState({
        selectedCollectionIdx: idx
      }, this.submitSearch);
      event.preventDefault();
    });
  }

  componentDidUpdate(prevProps) {
    if (prevProps.collection !== this.props.collection) {
      const selectedCollectionIdx = this.getSelectedSelectionBasedOnProps();
      this.setState({
        selectedCollectionIdx
      });
    }
  }

  getSelectedSelectionBasedOnProps() {
    const {
      collection,
      collections
    } = this.props;
    return collection ? collections.keySeq().indexOf(collection.get('name')) : -1;
  }

  toggleSuggestions(visible) {
    this.setState({
      suggestionsVisible: visible
    });
  }

  selectNextSuggestion() {
    const {
      collections
    } = this.props;
    const {
      selectedCollectionIdx
    } = this.state;
    this.setState({
      selectedCollectionIdx: Math.min(selectedCollectionIdx + 1, collections.size - 1)
    });
  }

  selectPreviousSuggestion() {
    const {
      selectedCollectionIdx
    } = this.state;
    this.setState({
      selectedCollectionIdx: Math.max(selectedCollectionIdx - 1, -1)
    });
  }

  resetSelectedSuggestion() {
    this.setState({
      selectedCollectionIdx: -1
    });
  }

  render() {
    const {
      collections,
      t
    } = this.props;
    const {
      suggestionsVisible,
      selectedCollectionIdx,
      query
    } = this.state;
    return (0, _core.jsx)(SearchContainer, {
      onBlur: () => this.toggleSuggestions(false),
      onFocus: () => this.toggleSuggestions(query !== '')
    }, (0, _core.jsx)(InputContainer, null, (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
      type: "search"
    }), (0, _core.jsx)(SearchInput, {
      onChange: e => this.handleQueryChange(e.target.value),
      onKeyDown: this.handleKeyDown,
      onClick: () => this.toggleSuggestions(true),
      placeholder: t('collection.sidebar.searchAll'),
      value: query
    })), suggestionsVisible && (0, _core.jsx)(SuggestionsContainer, null, (0, _core.jsx)(Suggestions, null, (0, _core.jsx)(SuggestionHeader, null, t('collection.sidebar.searchIn')), (0, _core.jsx)(SuggestionItem, {
      isActive: selectedCollectionIdx === -1,
      onClick: e => this.handleSuggestionClick(e, -1),
      onMouseDown: e => e.preventDefault()
    }, t('collection.sidebar.allCollections')), (0, _core.jsx)(SuggestionDivider, null), collections.toIndexedSeq().map((collection, idx) => (0, _core.jsx)(SuggestionItem, {
      key: idx,
      isActive: idx === selectedCollectionIdx,
      onClick: e => this.handleSuggestionClick(e, idx),
      onMouseDown: e => e.preventDefault()
    }, collection.get('label'))))));
  }

}

_defineProperty(CollectionSearch, "propTypes", {
  collections: _reactImmutableProptypes.default.map.isRequired,
  collection: _reactImmutableProptypes.default.map,
  searchTerm: _propTypes.default.string.isRequired,
  onSubmit: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});

var _default = (0, _reactPolyglot.translate)()(CollectionSearch);

exports.default = _default;