"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ErrorBoundary = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _truncate2 = _interopRequireDefault(require("lodash/truncate"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactPolyglot = require("react-polyglot");

var _yaml = _interopRequireDefault(require("yaml"));

var _copyTextToClipboard = _interopRequireDefault(require("copy-text-to-clipboard"));

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _cleanStack = _interopRequireDefault(require("clean-stack"));

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ISSUE_URL = 'https://github.com/netlify/netlify-cms/issues/new?';

function getIssueTemplate(_ref) {
  let {
    version,
    provider,
    browser,
    config
  } = _ref;
  return `
**Describe the bug**

**To Reproduce**

**Expected behavior**

**Screenshots**

**Applicable Versions:**
 - Netlify CMS version: \`${version}\`
 - Git provider: \`${provider}\`
 - Browser version: \`${browser}\`

**CMS configuration**
\`\`\`
${config}
\`\`\`

**Additional context**
`;
}

function buildIssueTemplate(_ref2) {
  let {
    config
  } = _ref2;
  let version = '';

  if (typeof NETLIFY_CMS_VERSION === 'string') {
    version = `netlify-cms@${NETLIFY_CMS_VERSION}`;
  } else if (typeof "2.15.72" === 'string') {
    version = `netlify-cms-app@${"2.15.72"}`;
  }

  const template = getIssueTemplate({
    version,
    provider: config.backend.name,
    browser: navigator.userAgent,
    config: _yaml.default.stringify(config)
  });
  return template;
}

function buildIssueUrl(_ref3) {
  let {
    title,
    config
  } = _ref3;

  try {
    const body = buildIssueTemplate({
      config
    });
    const params = new URLSearchParams();
    params.append('title', (0, _truncate2.default)(title, {
      length: 100
    }));
    params.append('body', (0, _truncate2.default)(body, {
      length: 4000,
      omission: '\n...'
    }));
    params.append('labels', 'type: bug');
    return `${ISSUE_URL}${params.toString()}`;
  } catch (e) {
    console.log(e);
    return `${ISSUE_URL}template=bug_report.md`;
  }
}

const ErrorBoundaryContainer = (0, _styledBase.default)("div", {
  target: "e177kfaq0",
  label: "ErrorBoundaryContainer"
})("padding:40px;h1{font-size:28px;color:", _netlifyCmsUiDefault.colors.text, ";}h2{font-size:20px;}strong{color:", _netlifyCmsUiDefault.colors.textLead, ";font-weight:500;}hr{width:200px;margin:30px 0;border:0;height:1px;background-color:", _netlifyCmsUiDefault.colors.text, ";}a{color:", _netlifyCmsUiDefault.colors.active, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0V5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeWFtbCBmcm9tICd5YW1sJztcbmltcG9ydCB7IHRydW5jYXRlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjb3B5VG9DbGlwYm9hcmQgZnJvbSAnY29weS10ZXh0LXRvLWNsaXBib2FyZCc7XG5pbXBvcnQgeyBsb2NhbEZvcmFnZSB9IGZyb20gJ25ldGxpZnktY21zLWxpYi11dGlsJztcbmltcG9ydCB7IGJ1dHRvbnMsIGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IGNsZWFuU3RhY2sgZnJvbSAnY2xlYW4tc3RhY2snO1xuXG5jb25zdCBJU1NVRV9VUkwgPSAnaHR0cHM6Ly9naXRodWIuY29tL25ldGxpZnkvbmV0bGlmeS1jbXMvaXNzdWVzL25ldz8nO1xuXG5mdW5jdGlvbiBnZXRJc3N1ZVRlbXBsYXRlKHsgdmVyc2lvbiwgcHJvdmlkZXIsIGJyb3dzZXIsIGNvbmZpZyB9KSB7XG4gIHJldHVybiBgXG4qKkRlc2NyaWJlIHRoZSBidWcqKlxuXG4qKlRvIFJlcHJvZHVjZSoqXG5cbioqRXhwZWN0ZWQgYmVoYXZpb3IqKlxuXG4qKlNjcmVlbnNob3RzKipcblxuKipBcHBsaWNhYmxlIFZlcnNpb25zOioqXG4gLSBOZXRsaWZ5IENNUyB2ZXJzaW9uOiBcXGAke3ZlcnNpb259XFxgXG4gLSBHaXQgcHJvdmlkZXI6IFxcYCR7cHJvdmlkZXJ9XFxgXG4gLSBCcm93c2VyIHZlcnNpb246IFxcYCR7YnJvd3Nlcn1cXGBcblxuKipDTVMgY29uZmlndXJhdGlvbioqXG5cXGBcXGBcXGBcbiR7Y29uZmlnfVxuXFxgXFxgXFxgXG5cbioqQWRkaXRpb25hbCBjb250ZXh0KipcbmA7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KSB7XG4gIGxldCB2ZXJzaW9uID0gJyc7XG4gIGlmICh0eXBlb2YgTkVUTElGWV9DTVNfVkVSU0lPTiA9PT0gJ3N0cmluZycpIHtcbiAgICB2ZXJzaW9uID0gYG5ldGxpZnktY21zQCR7TkVUTElGWV9DTVNfVkVSU0lPTn1gO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19BUFBfVkVSU0lPTiA9PT0gJ3N0cmluZycpIHtcbiAgICB2ZXJzaW9uID0gYG5ldGxpZnktY21zLWFwcEAke05FVExJRllfQ01TX0FQUF9WRVJTSU9OfWA7XG4gIH1cbiAgY29uc3QgdGVtcGxhdGUgPSBnZXRJc3N1ZVRlbXBsYXRlKHtcbiAgICB2ZXJzaW9uLFxuICAgIHByb3ZpZGVyOiBjb25maWcuYmFja2VuZC5uYW1lLFxuICAgIGJyb3dzZXI6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgY29uZmlnOiB5YW1sLnN0cmluZ2lmeShjb25maWcpLFxuICB9KTtcblxuICByZXR1cm4gdGVtcGxhdGU7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkSXNzdWVVcmwoeyB0aXRsZSwgY29uZmlnIH0pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYnVpbGRJc3N1ZVRlbXBsYXRlKHsgY29uZmlnIH0pO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ3RpdGxlJywgdHJ1bmNhdGUodGl0bGUsIHsgbGVuZ3RoOiAxMDAgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2JvZHknLCB0cnVuY2F0ZShib2R5LCB7IGxlbmd0aDogNDAwMCwgb21pc3Npb246ICdcXG4uLi4nIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdsYWJlbHMnLCAndHlwZTogYnVnJyk7XG5cbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfSR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9dGVtcGxhdGU9YnVnX3JlcG9ydC5tZGA7XG4gIH1cbn1cblxuY29uc3QgRXJyb3JCb3VuZGFyeUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDQwcHg7XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBoMiB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG5cbiAgc3Ryb25nIHtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIH1cblxuICBociB7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIG1hcmdpbjogMzBweCAwO1xuICAgIGJvcmRlcjogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICB9XG5gO1xuXG5jb25zdCBQcml2YWN5V2FybmluZyA9IHN0eWxlZC5zcGFuYFxuICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG5gO1xuXG5jb25zdCBDb3B5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAxMnB4IDA7XG5gO1xuXG5mdW5jdGlvbiBSZWNvdmVyZWRFbnRyeSh7IGVudHJ5LCB0IH0pIHtcbiAgY29uc29sZS5sb2coZW50cnkpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aHIgLz5cbiAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5oZWFkaW5nJyl9PC9oMj5cbiAgICAgIDxzdHJvbmc+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkud2FybmluZycpfTwvc3Ryb25nPlxuICAgICAgPENvcHlCdXR0b24gb25DbGljaz17KCkgPT4gY29weVRvQ2xpcGJvYXJkKGVudHJ5KX0+XG4gICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5LmNvcHlCdXR0b25MYWJlbCcpfVxuICAgICAgPC9Db3B5QnV0dG9uPlxuICAgICAgPHByZT5cbiAgICAgICAgPGNvZGU+e2VudHJ5fTwvY29kZT5cbiAgICAgIDwvcHJlPlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgZXJyb3JUaXRsZTogJycsXG4gICAgYmFja3VwOiAnJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc0Vycm9yOiB0cnVlLFxuICAgICAgZXJyb3JNZXNzYWdlOiBjbGVhblN0YWNrKGVycm9yLnN0YWNrLCB7IGJhc2VQYXRoOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luIHx8ICcnIH0pLFxuICAgICAgZXJyb3JUaXRsZTogZXJyb3IudG9TdHJpbmcoKSxcbiAgICB9O1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCwgZXJyb3JUaXRsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvclRpdGxlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));
const PrivacyWarning = (0, _styledBase.default)("span", {
  target: "e177kfaq1",
  label: "PrivacyWarning"
})("color:", _netlifyCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0drQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeWFtbCBmcm9tICd5YW1sJztcbmltcG9ydCB7IHRydW5jYXRlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjb3B5VG9DbGlwYm9hcmQgZnJvbSAnY29weS10ZXh0LXRvLWNsaXBib2FyZCc7XG5pbXBvcnQgeyBsb2NhbEZvcmFnZSB9IGZyb20gJ25ldGxpZnktY21zLWxpYi11dGlsJztcbmltcG9ydCB7IGJ1dHRvbnMsIGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IGNsZWFuU3RhY2sgZnJvbSAnY2xlYW4tc3RhY2snO1xuXG5jb25zdCBJU1NVRV9VUkwgPSAnaHR0cHM6Ly9naXRodWIuY29tL25ldGxpZnkvbmV0bGlmeS1jbXMvaXNzdWVzL25ldz8nO1xuXG5mdW5jdGlvbiBnZXRJc3N1ZVRlbXBsYXRlKHsgdmVyc2lvbiwgcHJvdmlkZXIsIGJyb3dzZXIsIGNvbmZpZyB9KSB7XG4gIHJldHVybiBgXG4qKkRlc2NyaWJlIHRoZSBidWcqKlxuXG4qKlRvIFJlcHJvZHVjZSoqXG5cbioqRXhwZWN0ZWQgYmVoYXZpb3IqKlxuXG4qKlNjcmVlbnNob3RzKipcblxuKipBcHBsaWNhYmxlIFZlcnNpb25zOioqXG4gLSBOZXRsaWZ5IENNUyB2ZXJzaW9uOiBcXGAke3ZlcnNpb259XFxgXG4gLSBHaXQgcHJvdmlkZXI6IFxcYCR7cHJvdmlkZXJ9XFxgXG4gLSBCcm93c2VyIHZlcnNpb246IFxcYCR7YnJvd3Nlcn1cXGBcblxuKipDTVMgY29uZmlndXJhdGlvbioqXG5cXGBcXGBcXGBcbiR7Y29uZmlnfVxuXFxgXFxgXFxgXG5cbioqQWRkaXRpb25hbCBjb250ZXh0KipcbmA7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KSB7XG4gIGxldCB2ZXJzaW9uID0gJyc7XG4gIGlmICh0eXBlb2YgTkVUTElGWV9DTVNfVkVSU0lPTiA9PT0gJ3N0cmluZycpIHtcbiAgICB2ZXJzaW9uID0gYG5ldGxpZnktY21zQCR7TkVUTElGWV9DTVNfVkVSU0lPTn1gO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19BUFBfVkVSU0lPTiA9PT0gJ3N0cmluZycpIHtcbiAgICB2ZXJzaW9uID0gYG5ldGxpZnktY21zLWFwcEAke05FVExJRllfQ01TX0FQUF9WRVJTSU9OfWA7XG4gIH1cbiAgY29uc3QgdGVtcGxhdGUgPSBnZXRJc3N1ZVRlbXBsYXRlKHtcbiAgICB2ZXJzaW9uLFxuICAgIHByb3ZpZGVyOiBjb25maWcuYmFja2VuZC5uYW1lLFxuICAgIGJyb3dzZXI6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgY29uZmlnOiB5YW1sLnN0cmluZ2lmeShjb25maWcpLFxuICB9KTtcblxuICByZXR1cm4gdGVtcGxhdGU7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkSXNzdWVVcmwoeyB0aXRsZSwgY29uZmlnIH0pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYnVpbGRJc3N1ZVRlbXBsYXRlKHsgY29uZmlnIH0pO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ3RpdGxlJywgdHJ1bmNhdGUodGl0bGUsIHsgbGVuZ3RoOiAxMDAgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2JvZHknLCB0cnVuY2F0ZShib2R5LCB7IGxlbmd0aDogNDAwMCwgb21pc3Npb246ICdcXG4uLi4nIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdsYWJlbHMnLCAndHlwZTogYnVnJyk7XG5cbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfSR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9dGVtcGxhdGU9YnVnX3JlcG9ydC5tZGA7XG4gIH1cbn1cblxuY29uc3QgRXJyb3JCb3VuZGFyeUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDQwcHg7XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBoMiB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG5cbiAgc3Ryb25nIHtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIH1cblxuICBociB7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIG1hcmdpbjogMzBweCAwO1xuICAgIGJvcmRlcjogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICB9XG5gO1xuXG5jb25zdCBQcml2YWN5V2FybmluZyA9IHN0eWxlZC5zcGFuYFxuICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG5gO1xuXG5jb25zdCBDb3B5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAxMnB4IDA7XG5gO1xuXG5mdW5jdGlvbiBSZWNvdmVyZWRFbnRyeSh7IGVudHJ5LCB0IH0pIHtcbiAgY29uc29sZS5sb2coZW50cnkpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aHIgLz5cbiAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5oZWFkaW5nJyl9PC9oMj5cbiAgICAgIDxzdHJvbmc+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkud2FybmluZycpfTwvc3Ryb25nPlxuICAgICAgPENvcHlCdXR0b24gb25DbGljaz17KCkgPT4gY29weVRvQ2xpcGJvYXJkKGVudHJ5KX0+XG4gICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5LmNvcHlCdXR0b25MYWJlbCcpfVxuICAgICAgPC9Db3B5QnV0dG9uPlxuICAgICAgPHByZT5cbiAgICAgICAgPGNvZGU+e2VudHJ5fTwvY29kZT5cbiAgICAgIDwvcHJlPlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgZXJyb3JUaXRsZTogJycsXG4gICAgYmFja3VwOiAnJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc0Vycm9yOiB0cnVlLFxuICAgICAgZXJyb3JNZXNzYWdlOiBjbGVhblN0YWNrKGVycm9yLnN0YWNrLCB7IGJhc2VQYXRoOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luIHx8ICcnIH0pLFxuICAgICAgZXJyb3JUaXRsZTogZXJyb3IudG9TdHJpbmcoKSxcbiAgICB9O1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCwgZXJyb3JUaXRsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvclRpdGxlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));
const CopyButton = (0, _styledBase.default)("button", {
  target: "e177kfaq2",
  label: "CopyButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", _netlifyCmsUiDefault.buttons.gray, ";display:block;margin:12px 0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0dnQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeWFtbCBmcm9tICd5YW1sJztcbmltcG9ydCB7IHRydW5jYXRlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjb3B5VG9DbGlwYm9hcmQgZnJvbSAnY29weS10ZXh0LXRvLWNsaXBib2FyZCc7XG5pbXBvcnQgeyBsb2NhbEZvcmFnZSB9IGZyb20gJ25ldGxpZnktY21zLWxpYi11dGlsJztcbmltcG9ydCB7IGJ1dHRvbnMsIGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IGNsZWFuU3RhY2sgZnJvbSAnY2xlYW4tc3RhY2snO1xuXG5jb25zdCBJU1NVRV9VUkwgPSAnaHR0cHM6Ly9naXRodWIuY29tL25ldGxpZnkvbmV0bGlmeS1jbXMvaXNzdWVzL25ldz8nO1xuXG5mdW5jdGlvbiBnZXRJc3N1ZVRlbXBsYXRlKHsgdmVyc2lvbiwgcHJvdmlkZXIsIGJyb3dzZXIsIGNvbmZpZyB9KSB7XG4gIHJldHVybiBgXG4qKkRlc2NyaWJlIHRoZSBidWcqKlxuXG4qKlRvIFJlcHJvZHVjZSoqXG5cbioqRXhwZWN0ZWQgYmVoYXZpb3IqKlxuXG4qKlNjcmVlbnNob3RzKipcblxuKipBcHBsaWNhYmxlIFZlcnNpb25zOioqXG4gLSBOZXRsaWZ5IENNUyB2ZXJzaW9uOiBcXGAke3ZlcnNpb259XFxgXG4gLSBHaXQgcHJvdmlkZXI6IFxcYCR7cHJvdmlkZXJ9XFxgXG4gLSBCcm93c2VyIHZlcnNpb246IFxcYCR7YnJvd3Nlcn1cXGBcblxuKipDTVMgY29uZmlndXJhdGlvbioqXG5cXGBcXGBcXGBcbiR7Y29uZmlnfVxuXFxgXFxgXFxgXG5cbioqQWRkaXRpb25hbCBjb250ZXh0KipcbmA7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KSB7XG4gIGxldCB2ZXJzaW9uID0gJyc7XG4gIGlmICh0eXBlb2YgTkVUTElGWV9DTVNfVkVSU0lPTiA9PT0gJ3N0cmluZycpIHtcbiAgICB2ZXJzaW9uID0gYG5ldGxpZnktY21zQCR7TkVUTElGWV9DTVNfVkVSU0lPTn1gO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19BUFBfVkVSU0lPTiA9PT0gJ3N0cmluZycpIHtcbiAgICB2ZXJzaW9uID0gYG5ldGxpZnktY21zLWFwcEAke05FVExJRllfQ01TX0FQUF9WRVJTSU9OfWA7XG4gIH1cbiAgY29uc3QgdGVtcGxhdGUgPSBnZXRJc3N1ZVRlbXBsYXRlKHtcbiAgICB2ZXJzaW9uLFxuICAgIHByb3ZpZGVyOiBjb25maWcuYmFja2VuZC5uYW1lLFxuICAgIGJyb3dzZXI6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgY29uZmlnOiB5YW1sLnN0cmluZ2lmeShjb25maWcpLFxuICB9KTtcblxuICByZXR1cm4gdGVtcGxhdGU7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkSXNzdWVVcmwoeyB0aXRsZSwgY29uZmlnIH0pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYnVpbGRJc3N1ZVRlbXBsYXRlKHsgY29uZmlnIH0pO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ3RpdGxlJywgdHJ1bmNhdGUodGl0bGUsIHsgbGVuZ3RoOiAxMDAgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2JvZHknLCB0cnVuY2F0ZShib2R5LCB7IGxlbmd0aDogNDAwMCwgb21pc3Npb246ICdcXG4uLi4nIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdsYWJlbHMnLCAndHlwZTogYnVnJyk7XG5cbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfSR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9dGVtcGxhdGU9YnVnX3JlcG9ydC5tZGA7XG4gIH1cbn1cblxuY29uc3QgRXJyb3JCb3VuZGFyeUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDQwcHg7XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBoMiB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG5cbiAgc3Ryb25nIHtcbiAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIH1cblxuICBociB7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIG1hcmdpbjogMzBweCAwO1xuICAgIGJvcmRlcjogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICB9XG5gO1xuXG5jb25zdCBQcml2YWN5V2FybmluZyA9IHN0eWxlZC5zcGFuYFxuICBjb2xvcjogJHtjb2xvcnMudGV4dH07XG5gO1xuXG5jb25zdCBDb3B5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAxMnB4IDA7XG5gO1xuXG5mdW5jdGlvbiBSZWNvdmVyZWRFbnRyeSh7IGVudHJ5LCB0IH0pIHtcbiAgY29uc29sZS5sb2coZW50cnkpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aHIgLz5cbiAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5oZWFkaW5nJyl9PC9oMj5cbiAgICAgIDxzdHJvbmc+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkud2FybmluZycpfTwvc3Ryb25nPlxuICAgICAgPENvcHlCdXR0b24gb25DbGljaz17KCkgPT4gY29weVRvQ2xpcGJvYXJkKGVudHJ5KX0+XG4gICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5LmNvcHlCdXR0b25MYWJlbCcpfVxuICAgICAgPC9Db3B5QnV0dG9uPlxuICAgICAgPHByZT5cbiAgICAgICAgPGNvZGU+e2VudHJ5fTwvY29kZT5cbiAgICAgIDwvcHJlPlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgZXJyb3JUaXRsZTogJycsXG4gICAgYmFja3VwOiAnJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc0Vycm9yOiB0cnVlLFxuICAgICAgZXJyb3JNZXNzYWdlOiBjbGVhblN0YWNrKGVycm9yLnN0YWNrLCB7IGJhc2VQYXRoOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luIHx8ICcnIH0pLFxuICAgICAgZXJyb3JUaXRsZTogZXJyb3IudG9TdHJpbmcoKSxcbiAgICB9O1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCwgZXJyb3JUaXRsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvclRpdGxlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));

function RecoveredEntry(_ref4) {
  let {
    entry,
    t
  } = _ref4;
  console.log(entry);
  return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.recoveredEntry.heading')), (0, _core.jsx)("strong", null, t('ui.errorBoundary.recoveredEntry.warning')), (0, _core.jsx)(CopyButton, {
    onClick: () => (0, _copyTextToClipboard.default)(entry)
  }, t('ui.errorBoundary.recoveredEntry.copyButtonLabel')), (0, _core.jsx)("pre", null, (0, _core.jsx)("code", null, entry)));
}

class ErrorBoundary extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      hasError: false,
      errorMessage: '',
      errorTitle: '',
      backup: ''
    });
  }

  static getDerivedStateFromError(error) {
    console.error(error);
    return {
      hasError: true,
      errorMessage: (0, _cleanStack.default)(error.stack, {
        basePath: window.location.origin || ''
      }),
      errorTitle: error.toString()
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.props.showBackup) {
      return this.state.errorMessage !== nextState.errorMessage || this.state.backup !== nextState.backup;
    }

    return true;
  }

  async componentDidUpdate() {
    if (this.props.showBackup) {
      const backup = await _netlifyCmsLibUtil.localForage.getItem('backup');
      backup && console.log(backup);
      this.setState({
        backup
      });
    }
  }

  render() {
    const {
      hasError,
      errorMessage,
      backup,
      errorTitle
    } = this.state;
    const {
      showBackup,
      t
    } = this.props;

    if (!hasError) {
      return this.props.children;
    }

    return (0, _core.jsx)(ErrorBoundaryContainer, null, (0, _core.jsx)("h1", null, t('ui.errorBoundary.title')), (0, _core.jsx)("p", null, (0, _core.jsx)("span", null, t('ui.errorBoundary.details')), (0, _core.jsx)("a", {
      href: buildIssueUrl({
        title: errorTitle,
        config: this.props.config
      }),
      target: "_blank",
      rel: "noopener noreferrer",
      "data-testid": "issue-url"
    }, t('ui.errorBoundary.reportIt'))), (0, _core.jsx)("p", null, t('ui.errorBoundary.privacyWarning').split('\n').map((item, index) => (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(PrivacyWarning, {
      key: index
    }, item), (0, _core.jsx)("br", null)))), (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.detailsHeading')), (0, _core.jsx)("p", null, errorMessage), backup && showBackup && (0, _core.jsx)(RecoveredEntry, {
      entry: backup,
      t: t
    }));
  }

}

exports.ErrorBoundary = ErrorBoundary;

_defineProperty(ErrorBoundary, "propTypes", {
  children: _propTypes.default.node,
  t: _propTypes.default.func.isRequired,
  config: _propTypes.default.object.isRequired
});

var _default = (0, _reactPolyglot.translate)()(ErrorBoundary);

exports.default = _default;