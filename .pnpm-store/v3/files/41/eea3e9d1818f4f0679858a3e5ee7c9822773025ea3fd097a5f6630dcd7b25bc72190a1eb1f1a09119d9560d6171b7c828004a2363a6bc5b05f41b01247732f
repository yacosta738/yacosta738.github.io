"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _immutable = require("immutable");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _ToolbarButton = _interopRequireDefault(require("./ToolbarButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const ToolbarContainer = (0, _styledBase.default)("div", {
  target: "e169jtoy0",
  label: "ToolbarContainer"
})("background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";border-top-right-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";position:relative;display:flex;justify-content:space-between;align-items:center;padding:11px 14px;min-height:58px;transition:background-color ", _netlifyCmsUiDefault.transitions.main, ",color ", _netlifyCmsUiDefault.transitions.main, ";color:", _netlifyCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdownWrapper = (0, _styledBase.default)("div", {
  target: "e169jtoy1",
  label: "ToolbarDropdownWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "b3pn3b",
  styles: "display:inline-block;position:relative;"
} : {
  name: "b3pn3b",
  styles: "display:inline-block;position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarToggle = (0, _styledBase.default)("div", {
  target: "e169jtoy2",
  label: "ToolbarToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "1xp6irr",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px;"
} : {
  name: "1xp6irr",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledToggle = ToolbarToggle.withComponent(_netlifyCmsUiDefault.Toggle, {
  target: "e169jtoy4",
  label: "StyledToggle"
});
const ToolbarToggleLabel = (0, _styledBase.default)("span", {
  target: "e169jtoy3",
  label: "ToolbarToggleLabel"
})("display:inline-block;text-align:center;white-space:nowrap;line-height:20px;min-width:", props => props.offPosition ? '62px' : '70px', ";", props => props.isActive && /*#__PURE__*/(0, _core.css)("font-weight:600;color:", _netlifyCmsUiDefault.colors.active, ";;label:ToolbarToggleLabel;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class Toolbar extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "isVisible", button => {
      const {
        buttons
      } = this.props;
      return !_immutable.List.isList(buttons) || buttons.includes(button);
    });

    _defineProperty(this, "handleBlockClick", (event, type) => {
      if (event) {
        event.preventDefault();
      }

      this.props.onBlockClick(type);
    });

    _defineProperty(this, "handleMarkClick", (event, type) => {
      event.preventDefault();
      this.props.onMarkClick(type);
    });
  }

  render() {
    const {
      onLinkClick,
      onToggleMode,
      rawMode,
      isShowModeToggle,
      plugins,
      disabled,
      onSubmit,
      hasMark = () => {},
      hasInline = () => {},
      hasBlock = () => {},
      hasQuote = () => {},
      hasListItems = () => {},
      editorComponents,
      t
    } = this.props;
    const isVisible = this.isVisible;
    const showEditorComponents = !editorComponents || editorComponents.size >= 1;

    function showPlugin(_ref) {
      let {
        id
      } = _ref;
      return editorComponents ? editorComponents.includes(id) : true;
    }

    const pluginsList = plugins ? plugins.toList().filter(showPlugin) : (0, _immutable.List)();
    const headingOptions = {
      'heading-one': t('editor.editorWidgets.headingOptions.headingOne'),
      'heading-two': t('editor.editorWidgets.headingOptions.headingTwo'),
      'heading-three': t('editor.editorWidgets.headingOptions.headingThree'),
      'heading-four': t('editor.editorWidgets.headingOptions.headingFour'),
      'heading-five': t('editor.editorWidgets.headingOptions.headingFive'),
      'heading-six': t('editor.editorWidgets.headingOptions.headingSix')
    };
    return (0, _core.jsx)(ToolbarContainer, null, (0, _core.jsx)("div", null, isVisible('bold') && (0, _core.jsx)(_ToolbarButton.default, {
      type: "bold",
      label: t('editor.editorWidgets.markdown.bold'),
      icon: "bold",
      onClick: this.handleMarkClick,
      isActive: hasMark('bold'),
      disabled: disabled
    }), isVisible('italic') && (0, _core.jsx)(_ToolbarButton.default, {
      type: "italic",
      label: t('editor.editorWidgets.markdown.italic'),
      icon: "italic",
      onClick: this.handleMarkClick,
      isActive: hasMark('italic'),
      disabled: disabled
    }), isVisible('code') && (0, _core.jsx)(_ToolbarButton.default, {
      type: "code",
      label: t('editor.editorWidgets.markdown.code'),
      icon: "code",
      onClick: this.handleMarkClick,
      isActive: hasMark('code'),
      disabled: disabled
    }), isVisible('link') && (0, _core.jsx)(_ToolbarButton.default, {
      type: "link",
      label: t('editor.editorWidgets.markdown.link'),
      icon: "link",
      onClick: onLinkClick,
      isActive: hasInline('link'),
      disabled: disabled
    }), Object.keys(headingOptions).some(isVisible) && (0, _core.jsx)(ToolbarDropdownWrapper, null, (0, _core.jsx)(_netlifyCmsUiDefault.Dropdown, {
      dropdownWidth: "max-content",
      dropdownTopOverlap: "36px",
      renderButton: () => (0, _core.jsx)(_netlifyCmsUiDefault.DropdownButton, null, (0, _core.jsx)(_ToolbarButton.default, {
        type: "headings",
        label: t('editor.editorWidgets.markdown.headings'),
        icon: "hOptions",
        disabled: disabled,
        isActive: !disabled && Object.keys(headingOptions).some(hasBlock)
      }))
    }, !disabled && Object.keys(headingOptions).map((optionKey, idx) => isVisible(optionKey) && (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
      key: idx,
      label: headingOptions[optionKey],
      className: hasBlock(optionKey) ? 'active' : '',
      onClick: () => this.handleBlockClick(null, optionKey)
    })))), isVisible('quote') && (0, _core.jsx)(_ToolbarButton.default, {
      type: "quote",
      label: t('editor.editorWidgets.markdown.quote'),
      icon: "quote",
      onClick: this.handleBlockClick,
      isActive: hasQuote('quote'),
      disabled: disabled
    }), isVisible('bulleted-list') && (0, _core.jsx)(_ToolbarButton.default, {
      type: "bulleted-list",
      label: t('editor.editorWidgets.markdown.bulletedList'),
      icon: "list-bulleted",
      onClick: this.handleBlockClick,
      isActive: hasListItems('bulleted-list'),
      disabled: disabled
    }), isVisible('numbered-list') && (0, _core.jsx)(_ToolbarButton.default, {
      type: "numbered-list",
      label: t('editor.editorWidgets.markdown.numberedList'),
      icon: "list-numbered",
      onClick: this.handleBlockClick,
      isActive: hasListItems('numbered-list'),
      disabled: disabled
    }), showEditorComponents && (0, _core.jsx)(ToolbarDropdownWrapper, null, (0, _core.jsx)(_netlifyCmsUiDefault.Dropdown, {
      dropdownTopOverlap: "36px",
      dropdownWidth: "max-content",
      renderButton: () => (0, _core.jsx)(_netlifyCmsUiDefault.DropdownButton, null, (0, _core.jsx)(_ToolbarButton.default, {
        label: t('editor.editorWidgets.markdown.addComponent'),
        icon: "add-with",
        onClick: this.handleComponentsMenuToggle,
        disabled: disabled
      }))
    }, pluginsList.map((plugin, idx) => (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
      key: idx,
      label: plugin.label,
      onClick: () => onSubmit(plugin)
    }))))), isShowModeToggle && (0, _core.jsx)(ToolbarToggle, null, (0, _core.jsx)(ToolbarToggleLabel, {
      isActive: !rawMode,
      offPosition: true
    }, t('editor.editorWidgets.markdown.richText')), (0, _core.jsx)(StyledToggle, {
      active: rawMode,
      onChange: onToggleMode
    }), (0, _core.jsx)(ToolbarToggleLabel, {
      isActive: rawMode
    }, t('editor.editorWidgets.markdown.markdown'))));
  }

}

exports.default = Toolbar;

_defineProperty(Toolbar, "propTypes", {
  buttons: _reactImmutableProptypes.default.list,
  editorComponents: _reactImmutableProptypes.default.list,
  onToggleMode: _propTypes.default.func.isRequired,
  rawMode: _propTypes.default.bool,
  isShowModeToggle: _propTypes.default.bool.isRequired,
  plugins: _reactImmutableProptypes.default.map,
  onSubmit: _propTypes.default.func,
  onAddAsset: _propTypes.default.func,
  getAsset: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  onMarkClick: _propTypes.default.func,
  onBlockClick: _propTypes.default.func,
  onLinkClick: _propTypes.default.func,
  hasMark: _propTypes.default.func,
  hasInline: _propTypes.default.func,
  hasBlock: _propTypes.default.func,
  t: _propTypes.default.func.isRequired
});