import{constants as w}from"fs";import{access as P,mkdir as b,stat as a,writeFile as y}from"fs/promises";import{dirname as h}from"path";var d=async(o,{fulfilled:g,failed:n,accomplished:f,changed:u,passed:s,read:r,wrote:c})=>{for(const[i,m]of o.results)try{if(o.ongoing.inputPath=m,o.ongoing.outputPath=i,o.ongoing.fileSizeBefore=(await a(o.ongoing.inputPath)).size,r&&c){o.ongoing.buffer=await r(o.ongoing);const e=await c(o.ongoing);if(!e)continue;if(o.ongoing.buffer=e,s&&await s(o.ongoing)){try{await P(h(o.ongoing.outputPath),w.W_OK)}catch{await b(h(o.ongoing.outputPath),{recursive:!0})}if(await y(o.ongoing.outputPath,o.ongoing.buffer,"utf-8"),o.ongoing.fileSizeAfter=(await a(o.ongoing.outputPath)).size,o.debug>0&&(o.files++,u&&(o=await u(o))),o.debug>1&&typeof f=="function"){const t=await f(o.ongoing);t&&t.length>0&&console.log(t)}}}}catch{if(o.results.delete(i),typeof n=="function"){const t=await n(o.ongoing);t&&t.length>0&&console.log(t)}}if(o.debug>0&&o.results.size>0&&typeof g=="function"){const i=await g(o);i&&i.length>0&&console.log(i)}return o};export{d as default};
