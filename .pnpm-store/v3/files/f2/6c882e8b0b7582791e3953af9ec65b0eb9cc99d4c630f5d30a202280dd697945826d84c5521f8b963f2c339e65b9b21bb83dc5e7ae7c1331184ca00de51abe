{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///./src/middlewares/joi/index.ts","webpack:///external \"@hapi/joi\"","webpack:///./src/middlewares/joi/customValidators.ts","webpack:///./src/middlewares/utils/fs.ts","webpack:///./src/middlewares/utils/entries.ts","webpack:///external \"express\"","webpack:///./src/middlewares/common/index.ts","webpack:///external \"morgan\"","webpack:///external \"cors\"","webpack:///./src/middlewares/localGit/index.ts","webpack:///../netlify-cms-lib-util/src/APIUtils.ts","webpack:///external \"what-the-diff\"","webpack:///external \"simple-git\"","webpack:///external \"async-mutex\"","webpack:///external \"crypto\"","webpack:///./src/middlewares/localFs/index.ts","webpack:///./src/logger.ts","webpack:///external \"winston\"","webpack:///./src/index.ts","webpack:///external \"dotenv\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","allowedActions","requiredString","string","required","requiredNumber","number","requiredBool","bool","collection","slug","path","defaultParams","branch","asset","content","encoding","valid","dataFile","raw","newPath","optional","params","when","switch","is","then","allow","keys","folder","extension","depth","files","array","items","label","id","cmsLabelPrefix","entry","dataFiles","assets","options","collectionName","commitMessage","useWorkflow","status","xor","newStatus","mediaFolder","paths","min","otherwise","forbidden","action","schema","req","res","next","error","validate","body","allowUnknown","details","message","map","join","json","repoPath","extend","type","base","messages","helpers","startsWith","errors","async","listFiles","dir","dirents","readdir","withFileTypes","Promise","all","dirent","isDirectory","filter","f","endsWith","concat","e","moveFile","from","to","mkdir","dirname","recursive","rename","slice","length","filePath","writeFile","unlink","catch","sourceDir","destDir","allFiles","file","replace","stat","mtime","Date","sha256","buffer","createHash","update","digest","normalizePath","readFile","data","toString","basename","app","logger","stream","write","debug","String","trim","use","limit","commit","git","add","undefined","getCurrentBranch","branchLocal","summary","current","runOnBranch","func","currentBranch","checkout","branchDescription","commitEntry","a","Buffer","every","forEach","move","isBranchExists","includes","getDiffs","source","dest","rawDiff","diff","parse","oldPath","newFile","binary","test","validateRepo","checkIsRepo","Error","getSchema","defaultSchema","pathTraversal","localGitMiddleware","mutex","withTimeout","Mutex","release","acquire","repo","publish_modes","payload","entries","listRepoFiles","entriesFromFiles","cmsBranches","result","b","CMS_BRANCH_PREFIX","contentKeyFromBranch","parseContentKey","contentKey","generateContentKey","cmsBranch","branchFromContentKey","diffs","labelToStatus","updatedAt","getUpdateDate","reduce","unpublishedEntry","readMediaFile","checkoutLocalBranch","branchExists","gpgSign","addConfig","rebase","toDelete","description","statusToLabel","mergeFromTo","merge","deleteLocalBranch","mediaFiles","mediaFile","deleteFile","JSON","stringify","resolve","process","env","GIT_REPO_DIRECTORY","cwd","post","joi","info","DEFAULT_PR_BODY","MERGE_COMMIT_MESSAGE","getLabelPrefix","labelPrefix","index","indexOf","localFsMiddleware","combine","colorize","simple","format","level","createLogger","transports","Console","config","port","PORT","LOG_LEVEL","registerCommonMiddlewares","MODE","exit","listen"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","import Joi from '@hapi/joi';\n\nimport type express from 'express';\n\nconst allowedActions = [\n  'info',\n  'entriesByFolder',\n  'entriesByFiles',\n  'getEntry',\n  'unpublishedEntries',\n  'unpublishedEntry',\n  'unpublishedEntryDataFile',\n  'unpublishedEntryMediaFile',\n  'deleteUnpublishedEntry',\n  'persistEntry',\n  'updateUnpublishedEntryStatus',\n  'publishUnpublishedEntry',\n  'getMedia',\n  'getMediaFile',\n  'persistMedia',\n  'deleteFile',\n  'deleteFiles',\n  'getDeployPreview',\n];\n\nconst requiredString = Joi.string().required();\nconst requiredNumber = Joi.number().required();\nconst requiredBool = Joi.bool().required();\n\nconst collection = requiredString;\nconst slug = requiredString;\n\nexport function defaultSchema({ path = requiredString } = {}) {\n  const defaultParams = Joi.object({\n    branch: requiredString,\n  });\n\n  const asset = Joi.object({\n    path,\n    content: requiredString,\n    encoding: requiredString.valid('base64'),\n  });\n\n  const dataFile = Joi.object({\n    slug: requiredString,\n    path,\n    raw: requiredString,\n    newPath: path.optional(),\n  });\n\n  const params = Joi.when('action', {\n    switch: [\n      {\n        is: 'info',\n        then: Joi.allow(),\n      },\n      {\n        is: 'entriesByFolder',\n        then: defaultParams\n          .keys({\n            folder: path,\n            extension: requiredString,\n            depth: requiredNumber,\n          })\n          .required(),\n      },\n      {\n        is: 'entriesByFiles',\n        then: defaultParams.keys({\n          files: Joi.array()\n            .items(Joi.object({ path, label: Joi.string() }))\n            .required(),\n        }),\n      },\n      {\n        is: 'getEntry',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntries',\n        then: defaultParams.keys({ branch: requiredString }).required(),\n      },\n      {\n        is: 'unpublishedEntry',\n        then: defaultParams\n          .keys({\n            id: Joi.string().optional(),\n            collection: Joi.string().optional(),\n            slug: Joi.string().optional(),\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryDataFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryMediaFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'deleteUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'persistEntry',\n        then: defaultParams\n          .keys({\n            cmsLabelPrefix: Joi.string().optional(),\n            entry: dataFile, // entry is kept for backwards compatibility\n            dataFiles: Joi.array().items(dataFile),\n            assets: Joi.array().items(asset).required(),\n            options: Joi.object({\n              collectionName: Joi.string(),\n              commitMessage: requiredString,\n              useWorkflow: requiredBool,\n              status: requiredString,\n            }).required(),\n          })\n          .xor('entry', 'dataFiles')\n          .required(),\n      },\n      {\n        is: 'updateUnpublishedEntryStatus',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            newStatus: requiredString,\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'publishUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'getMedia',\n        then: defaultParams\n          .keys({\n            mediaFolder: path,\n          })\n          .required(),\n      },\n      {\n        is: 'getMediaFile',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'persistMedia',\n        then: defaultParams\n          .keys({\n            asset: asset.required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFile',\n        then: defaultParams\n          .keys({\n            path,\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFiles',\n        then: defaultParams\n          .keys({\n            paths: Joi.array().items(path).min(1).required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'getDeployPreview',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n    ],\n    otherwise: Joi.forbidden(),\n  });\n\n  return Joi.object({\n    action: Joi.valid(...allowedActions).required(),\n    params,\n  });\n}\n\nexport function joi(schema: Joi.Schema) {\n  return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const { error } = schema.validate(req.body, { allowUnknown: true });\n    if (error) {\n      const { details } = error;\n      const message = details.map(i => i.message).join(',');\n      res.status(422).json({ error: message });\n    } else {\n      next();\n    }\n  };\n}\n","module.exports = require(\"@hapi/joi\");","import Joi from '@hapi/joi';\nimport path from 'path';\n\nexport function pathTraversal(repoPath: string) {\n  return Joi.extend({\n    type: 'path',\n    base: Joi.string().required(),\n    messages: {\n      'path.invalid': '{{#label}} must resolve to a path under the configured repository',\n    },\n    validate(value, helpers) {\n      const resolvedPath = path.join(repoPath, value);\n      if (!resolvedPath.startsWith(repoPath)) {\n        return { value, errors: helpers.error('path.invalid') };\n      }\n    },\n  }).path();\n}\n","import path from 'path';\nimport { promises as fs } from 'fs';\n\nasync function listFiles(dir: string, extension: string, depth: number): Promise<string[]> {\n  if (depth <= 0) {\n    return [];\n  }\n\n  try {\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\n    const files = await Promise.all(\n      dirents.map(dirent => {\n        const res = path.join(dir, dirent.name);\n        return dirent.isDirectory()\n          ? listFiles(res, extension, depth - 1)\n          : [res].filter(f => f.endsWith(extension));\n      }),\n    );\n    return ([] as string[]).concat(...files);\n  } catch (e) {\n    return [];\n  }\n}\n\nexport async function listRepoFiles(\n  repoPath: string,\n  folder: string,\n  extension: string,\n  depth: number,\n) {\n  const files = await listFiles(path.join(repoPath, folder), extension, depth);\n  return files.map(f => f.slice(repoPath.length + 1));\n}\n\nexport async function writeFile(filePath: string, content: Buffer | string) {\n  await fs.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, content);\n}\n\nexport async function deleteFile(repoPath: string, filePath: string) {\n  await fs.unlink(path.join(repoPath, filePath)).catch(() => undefined);\n}\n\nasync function moveFile(from: string, to: string) {\n  await fs.mkdir(path.dirname(to), { recursive: true });\n  await fs.rename(from, to);\n}\n\nexport async function move(from: string, to: string) {\n  // move file\n  await moveFile(from, to);\n\n  // move children\n  const sourceDir = path.dirname(from);\n  const destDir = path.dirname(to);\n  const allFiles = await listFiles(sourceDir, '', 100);\n  await Promise.all(allFiles.map(file => moveFile(file, file.replace(sourceDir, destDir))));\n}\n\nexport async function getUpdateDate(repoPath: string, filePath: string) {\n  return fs\n    .stat(path.join(repoPath, filePath))\n    .then(stat => stat.mtime)\n    .catch(() => new Date());\n}\n","import crypto from 'crypto';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nfunction sha256(buffer: Buffer) {\n  return crypto.createHash('sha256').update(buffer).digest('hex');\n}\n\n// normalize windows os path format\nfunction normalizePath(path: string) {\n  return path.replace(/\\\\/g, '/');\n}\n\nexport async function entriesFromFiles(\n  repoPath: string,\n  files: { path: string; label?: string }[],\n) {\n  return Promise.all(\n    files.map(async file => {\n      try {\n        const content = await fs.readFile(path.join(repoPath, file.path));\n        return {\n          data: content.toString(),\n          file: { path: normalizePath(file.path), label: file.label, id: sha256(content) },\n        };\n      } catch (e) {\n        return {\n          data: null,\n          file: { path: normalizePath(file.path), label: file.label, id: null },\n        };\n      }\n    }),\n  );\n}\n\nexport async function readMediaFile(repoPath: string, file: string) {\n  const encoding = 'base64';\n  const buffer = await fs.readFile(path.join(repoPath, file));\n  const id = sha256(buffer);\n\n  return {\n    id,\n    content: buffer.toString(encoding),\n    encoding,\n    path: normalizePath(file),\n    name: path.basename(file),\n  };\n}\n","module.exports = require(\"express\");","import express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\n\nimport type winston from 'winston';\n\nexport type Options = {\n  logger: winston.Logger;\n};\n\nexport function registerCommonMiddlewares(app: express.Express, options: Options) {\n  const { logger } = options;\n  const stream = {\n    write: (message: string) => {\n      logger.debug(String(message).trim());\n    },\n  };\n  app.use(morgan('combined', { stream }));\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' }));\n}\n","module.exports = require(\"morgan\");","module.exports = require(\"cors\");","import path from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  branchFromContentKey,\n  generateContentKey,\n  contentKeyFromBranch,\n  CMS_BRANCH_PREFIX,\n  statusToLabel,\n  labelToStatus,\n  parseContentKey,\n} from 'netlify-cms-lib-util/src/APIUtils';\nimport { parse } from 'what-the-diff';\nimport simpleGit from 'simple-git';\nimport { Mutex, withTimeout } from 'async-mutex';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, writeFile, move, deleteFile, getUpdateDate } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  DefaultParams,\n  UnpublishedEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  Asset,\n  PublishUnpublishedEntryParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  UpdateUnpublishedEntryStatusParams,\n  DataFile,\n  GetMediaFileParams,\n  DeleteEntryParams,\n  DeleteFilesParams,\n  UnpublishedEntryDataFileParams,\n  UnpublishedEntryMediaFileParams,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\nimport type { SimpleGit } from 'simple-git';\n\nasync function commit(git: SimpleGit, commitMessage: string) {\n  await git.add('.');\n  await git.commit(commitMessage, undefined, {\n    // setting the value to a string passes name=value\n    // any other value passes just the key\n    '--no-verify': null,\n    '--no-gpg-sign': null,\n  });\n}\n\nasync function getCurrentBranch(git: SimpleGit) {\n  const currentBranch = await git.branchLocal().then(summary => summary.current);\n  return currentBranch;\n}\n\nasync function runOnBranch<T>(git: SimpleGit, branch: string, func: () => Promise<T>) {\n  const currentBranch = await getCurrentBranch(git);\n  try {\n    if (currentBranch !== branch) {\n      await git.checkout(branch);\n    }\n    const result = await func();\n    return result;\n  } finally {\n    await git.checkout(currentBranch);\n  }\n}\n\nfunction branchDescription(branch: string) {\n  return `branch.${branch}.description`;\n}\n\ntype GitOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nasync function commitEntry(\n  git: SimpleGit,\n  repoPath: string,\n  dataFiles: DataFile[],\n  assets: Asset[],\n  commitMessage: string,\n) {\n  // save entry content\n  await Promise.all(\n    dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n  );\n  // save assets\n  await Promise.all(\n    assets.map(a => writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding))),\n  );\n  if (dataFiles.every(dataFile => dataFile.newPath)) {\n    dataFiles.forEach(async dataFile => {\n      await move(path.join(repoPath, dataFile.path), path.join(repoPath, dataFile.newPath!));\n    });\n  }\n\n  // commits files\n  await commit(git, commitMessage);\n}\n\nasync function rebase(git: SimpleGit, branch: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.rebase([branch, '--no-verify']);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function merge(git: SimpleGit, from: string, to: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.mergeFromTo(from, to);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function isBranchExists(git: SimpleGit, branch: string) {\n  const branchExists = await git.branchLocal().then(({ all }) => all.includes(branch));\n  return branchExists;\n}\n\nasync function getDiffs(git: SimpleGit, source: string, dest: string) {\n  const rawDiff = await git.diff([source, dest]);\n  const diffs = parse(rawDiff).map(d => {\n    const oldPath = d.oldPath?.replace(/b\\//, '') || '';\n    const newPath = d.newPath?.replace(/b\\//, '') || '';\n    const path = newPath || (oldPath as string);\n    return {\n      oldPath,\n      newPath,\n      status: d.status,\n      newFile: d.status === 'added',\n      path,\n      id: path,\n      binary: d.binary || /.svg$/.test(path),\n    };\n  });\n  return diffs;\n}\n\nexport async function validateRepo({ repoPath }: { repoPath: string }) {\n  const git = simpleGit(repoPath);\n  const isRepo = await git.checkIsRepo();\n  if (!isRepo) {\n    throw Error(`${repoPath} is not a valid git repository`);\n  }\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\nexport function localGitMiddleware({ repoPath, logger }: GitOptions) {\n  const git = simpleGit(repoPath);\n\n  // we can only perform a single git operation at any given time\n  const mutex = withTimeout(new Mutex(), 3000, new Error('Request timed out'));\n\n  return async function (req: express.Request, res: express.Response) {\n    let release;\n    try {\n      release = await mutex.acquire();\n      const { body } = req;\n      if (body.action === 'info') {\n        res.json({\n          repo: path.basename(repoPath),\n          publish_modes: ['simple', 'editorial_workflow'],\n          type: 'local_git',\n        });\n        return;\n      }\n      const { branch } = body.params as DefaultParams;\n\n      const branchExists = await isBranchExists(git, branch);\n      if (!branchExists) {\n        const message = `Default branch '${branch}' doesn't exist`;\n        res.status(422).json({ error: message });\n        return;\n      }\n\n      switch (body.action) {\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await runOnBranch(git, branch, () =>\n            listRepoFiles(repoPath, folder, extension, depth).then(files =>\n              entriesFromFiles(\n                repoPath,\n                files.map(file => ({ path: file })),\n              ),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, payload.files),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, [{ path: payload.path }]),\n          );\n          res.json(entry);\n          break;\n        }\n        case 'unpublishedEntries': {\n          const cmsBranches = await git\n            .branchLocal()\n            .then(result => result.all.filter(b => b.startsWith(`${CMS_BRANCH_PREFIX}/`)));\n          res.json(cmsBranches.map(contentKeyFromBranch));\n          break;\n        }\n        case 'unpublishedEntry': {\n          let { id, collection, slug, cmsLabelPrefix } = body.params as UnpublishedEntryParams;\n          if (id) {\n            ({ collection, slug } = parseContentKey(id));\n          }\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const branchExists = await isBranchExists(git, cmsBranch);\n          if (branchExists) {\n            const diffs = await getDiffs(git, branch, cmsBranch);\n            const label = await git.raw(['config', branchDescription(cmsBranch)]);\n            const status = label && labelToStatus(label.trim(), cmsLabelPrefix || '');\n            const updatedAt =\n              diffs.length >= 0\n                ? await runOnBranch(git, cmsBranch, async () => {\n                    const dates = await Promise.all(\n                      diffs.map(({ newPath }) => getUpdateDate(repoPath, newPath)),\n                    );\n                    return dates.reduce((a, b) => {\n                      return a > b ? a : b;\n                    });\n                  })\n                : new Date();\n            const unpublishedEntry = {\n              collection,\n              slug,\n              status,\n              diffs,\n              updatedAt,\n            };\n            res.json(unpublishedEntry);\n          } else {\n            return res.status(404).json({ message: 'Not Found' });\n          }\n          break;\n        }\n        case 'unpublishedEntryDataFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryDataFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const [entry] = await runOnBranch(git, cmsBranch, () =>\n            entriesFromFiles(repoPath, [{ path }]),\n          );\n          res.json({ data: entry.data });\n          break;\n        }\n        case 'unpublishedEntryMediaFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryMediaFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const file = await runOnBranch(git, cmsBranch, () => readMediaFile(repoPath, path));\n          res.json(file);\n          break;\n        }\n        case 'deleteUnpublishedEntry': {\n          const { collection, slug } = body.params as DeleteEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const currentBranch = await getCurrentBranch(git);\n          if (currentBranch === cmsBranch) {\n            await git.checkoutLocalBranch(branch);\n          }\n          await git.branch(['-D', cmsBranch]);\n          res.json({ message: `deleted branch: ${cmsBranch}` });\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            cmsLabelPrefix,\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n            options,\n          } = body.params as PersistEntryParams;\n\n          if (!options.useWorkflow) {\n            await runOnBranch(git, branch, async () => {\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n            });\n          } else {\n            const slug = dataFiles[0].slug;\n            const collection = options.collectionName as string;\n            const contentKey = generateContentKey(collection, slug);\n            const cmsBranch = branchFromContentKey(contentKey);\n            await runOnBranch(git, branch, async () => {\n              const branchExists = await isBranchExists(git, cmsBranch);\n              if (branchExists) {\n                await git.checkout(cmsBranch);\n              } else {\n                await git.checkoutLocalBranch(cmsBranch);\n              }\n              await rebase(git, branch);\n              const diffs = await getDiffs(git, branch, cmsBranch);\n              // delete media files that have been removed from the entry\n              const toDelete = diffs.filter(\n                d => d.binary && !assets.map(a => a.path).includes(d.path),\n              );\n              await Promise.all(toDelete.map(f => fs.unlink(path.join(repoPath, f.path))));\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n\n              // add status for new entries\n              if (!branchExists) {\n                const description = statusToLabel(options.status, cmsLabelPrefix || '');\n                await git.addConfig(branchDescription(cmsBranch), description);\n              }\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'updateUnpublishedEntryStatus': {\n          const { collection, slug, newStatus, cmsLabelPrefix } =\n            body.params as UpdateUnpublishedEntryStatusParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const description = statusToLabel(newStatus, cmsLabelPrefix || '');\n          await git.addConfig(branchDescription(cmsBranch), description);\n          res.json({ message: `${branch} description was updated to ${description}` });\n          break;\n        }\n        case 'publishUnpublishedEntry': {\n          const { collection, slug } = body.params as PublishUnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          await merge(git, cmsBranch, branch);\n          await git.deleteLocalBranch(cmsBranch);\n          res.json({ message: `branch ${cmsBranch} merged to ${branch}` });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const mediaFiles = await runOnBranch(git, branch, async () => {\n            const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n            const serializedFiles = await Promise.all(\n              files.map(file => readMediaFile(repoPath, file)),\n            );\n            return serializedFiles;\n          });\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await runOnBranch(git, branch, () => {\n            return readMediaFile(repoPath, path);\n          });\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const {\n            asset,\n            options: { commitMessage },\n          } = body.params as PersistMediaParams;\n\n          const file = await runOnBranch(git, branch, async () => {\n            await writeFile(\n              path.join(repoPath, asset.path),\n              Buffer.from(asset.content, asset.encoding),\n            );\n            await commit(git, commitMessage);\n            return readMediaFile(repoPath, asset.path);\n          });\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const {\n            path: filePath,\n            options: { commitMessage },\n          } = body.params as DeleteFileParams;\n          await runOnBranch(git, branch, async () => {\n            await deleteFile(repoPath, filePath);\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const {\n            paths,\n            options: { commitMessage },\n          } = body.params as DeleteFilesParams;\n          await runOnBranch(git, branch, async () => {\n            await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    } finally {\n      release && release();\n    }\n  };\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  await validateRepo({ repoPath });\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localGitMiddleware({ repoPath, logger }));\n  logger.info(`Netlify CMS Git Proxy Server configured with ${repoPath}`);\n}\n","export const CMS_BRANCH_PREFIX = 'cms';\nexport const DEFAULT_PR_BODY = 'Automatically generated by Netlify CMS';\nexport const MERGE_COMMIT_MESSAGE = 'Automatically generated. Merged on Netlify CMS.';\n\nconst DEFAULT_NETLIFY_CMS_LABEL_PREFIX = 'netlify-cms/';\n\nfunction getLabelPrefix(labelPrefix: string) {\n  return labelPrefix || DEFAULT_NETLIFY_CMS_LABEL_PREFIX;\n}\n\nexport function isCMSLabel(label: string, labelPrefix: string) {\n  return label.startsWith(getLabelPrefix(labelPrefix));\n}\n\nexport function labelToStatus(label: string, labelPrefix: string) {\n  return label.slice(getLabelPrefix(labelPrefix).length);\n}\n\nexport function statusToLabel(status: string, labelPrefix: string) {\n  return `${getLabelPrefix(labelPrefix)}${status}`;\n}\n\nexport function generateContentKey(collectionName: string, slug: string) {\n  return `${collectionName}/${slug}`;\n}\n\nexport function parseContentKey(contentKey: string) {\n  const index = contentKey.indexOf('/');\n  return { collection: contentKey.slice(0, index), slug: contentKey.slice(index + 1) };\n}\n\nexport function contentKeyFromBranch(branch: string) {\n  return branch.slice(`${CMS_BRANCH_PREFIX}/`.length);\n}\n\nexport function branchFromContentKey(contentKey: string) {\n  return `${CMS_BRANCH_PREFIX}/${contentKey}`;\n}\n","module.exports = require(\"what-the-diff\");","module.exports = require(\"simple-git\");","module.exports = require(\"async-mutex\");","module.exports = require(\"crypto\");","import path from 'path';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, deleteFile, writeFile, move } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  GetMediaFileParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  DeleteFilesParams,\n  DataFile,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\n\ntype FsOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nexport function localFsMiddleware({ repoPath, logger }: FsOptions) {\n  return async function (req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n\n      switch (body.action) {\n        case 'info': {\n          res.json({\n            repo: path.basename(repoPath),\n            publish_modes: ['simple'],\n            type: 'local_fs',\n          });\n          break;\n        }\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await listRepoFiles(repoPath, folder, extension, depth).then(files =>\n            entriesFromFiles(\n              repoPath,\n              files.map(file => ({ path: file })),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await entriesFromFiles(repoPath, payload.files);\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await entriesFromFiles(repoPath, [{ path: payload.path }]);\n          res.json(entry);\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n          } = body.params as PersistEntryParams;\n          await Promise.all(\n            dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n          );\n          // save assets\n          await Promise.all(\n            assets.map(a =>\n              writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding)),\n            ),\n          );\n          if (dataFiles.every(dataFile => dataFile.newPath)) {\n            dataFiles.forEach(async dataFile => {\n              await move(\n                path.join(repoPath, dataFile.path),\n                path.join(repoPath, dataFile.newPath!),\n              );\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n          const mediaFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await readMediaFile(repoPath, path);\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const { asset } = body.params as PersistMediaParams;\n          await writeFile(\n            path.join(repoPath, asset.path),\n            Buffer.from(asset.content, asset.encoding),\n          );\n          const file = await readMediaFile(repoPath, asset.path);\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const { path: filePath } = body.params as DeleteFileParams;\n          await deleteFile(repoPath, filePath);\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const { paths } = body.params as DeleteFilesParams;\n          await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localFsMiddleware({ repoPath, logger }));\n  logger.info(`Netlify CMS File System Proxy Server configured with ${repoPath}`);\n}\n","import winston from 'winston';\n\nconst { combine, colorize, simple } = winston.format;\n\ntype LogOptions = {\n  level: string;\n};\n\nexport function createLogger({ level }: LogOptions) {\n  return winston.createLogger({\n    level,\n    format: combine(colorize(), simple()),\n    transports: [new winston.transports.Console()],\n  });\n}\n","module.exports = require(\"winston\");","// eslint-disable-next-line @typescript-eslint/no-var-requires\nrequire('dotenv').config();\nimport express from 'express';\n\nimport { registerCommonMiddlewares } from './middlewares/common';\nimport { registerMiddleware as registerLocalGit } from './middlewares/localGit';\nimport { registerMiddleware as registerLocalFs } from './middlewares/localFs';\nimport { createLogger } from './logger';\n\nconst app = express();\nconst port = process.env.PORT || 8081;\nconst level = process.env.LOG_LEVEL || 'info';\n\n(async () => {\n  const logger = createLogger({ level });\n  const options = {\n    logger,\n  };\n\n  registerCommonMiddlewares(app, options);\n\n  try {\n    const mode = process.env.MODE || 'fs';\n    if (mode === 'fs') {\n      registerLocalFs(app, options);\n    } else if (mode === 'git') {\n      registerLocalGit(app, options);\n    } else {\n      throw new Error(`Unknown proxy mode '${mode}'`);\n    }\n  } catch (e) {\n    logger.error(e.message);\n    process.exit(1);\n  }\n\n  return app.listen(port, () => {\n    logger.info(`Netlify CMS Proxy Server listening on port ${port}`);\n  });\n})();\n","module.exports = require(\"dotenv\");"],"sourceRoot":""}