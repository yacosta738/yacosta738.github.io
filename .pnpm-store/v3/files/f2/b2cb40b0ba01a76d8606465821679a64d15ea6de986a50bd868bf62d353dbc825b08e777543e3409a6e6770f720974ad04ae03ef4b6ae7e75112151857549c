{"version":3,"file":"slate-plain-serializer.js","sources":["../src/index.js"],"sourcesContent":["import { Block, Mark, Node, Value } from 'slate'\nimport { Set } from 'immutable'\n\n/**\n * Deserialize a plain text `string` to a Slate value.\n *\n * @param {String} string\n * @param {Object} options\n *   @property {Boolean} toJSON\n *   @property {String|Object|Block} defaultBlock\n *   @property {Array|Set} defaultMarks\n * @return {Value}\n */\n\nfunction deserialize(string, options = {}) {\n  let {\n    defaultBlock = 'line',\n    defaultMarks = [],\n    delimiter = '\\n',\n    toJSON = false,\n  } = options\n\n  if (Set.isSet(defaultMarks)) {\n    defaultMarks = defaultMarks.toArray()\n  }\n\n  defaultBlock = Node.createProperties(defaultBlock)\n  defaultMarks = defaultMarks.map(Mark.createProperties)\n\n  const json = {\n    object: 'value',\n    document: {\n      object: 'document',\n      data: {},\n      nodes: string.split(delimiter).map(line => {\n        return {\n          ...defaultBlock,\n          object: 'block',\n          data: {},\n          nodes: [\n            {\n              object: 'text',\n              text: line,\n              marks: defaultMarks,\n            },\n          ],\n        }\n      }),\n    },\n  }\n\n  const ret = toJSON ? json : Value.fromJSON(json)\n  return ret\n}\n\n/**\n * Serialize a Slate `value` to a plain text string.\n *\n * @param {Value} value\n * @return {String}\n */\n\nfunction serialize(value, options = {}) {\n  return serializeNode(value.document, options)\n}\n\n/**\n * Serialize a `node` to plain text.\n *\n * @param {Node} node\n * @return {String}\n */\n\nfunction serializeNode(node, options = {}) {\n  const { delimiter = '\\n' } = options\n\n  if (\n    node.object === 'document' ||\n    (node.object === 'block' && Block.isBlockList(node.nodes))\n  ) {\n    return node.nodes.map(serializeNode).join(delimiter)\n  } else {\n    return node.text\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  deserialize,\n  serialize,\n}\n"],"names":["deserialize","string","options","defaultBlock","defaultMarks","delimiter","toJSON","Set","isSet","toArray","Node","createProperties","map","Mark","json","split","line","ret","Value","fromJSON","serialize","value","serializeNode","document","node","object","Block","isBlockList","nodes","join","text"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;AAWA,SAASA,WAAT,CAAqBC,MAArB,EAA2C;MAAdC,OAAc,uEAAJ,EAAI;8BAMrCA,OANqC,CAEvCC,YAFuC;MAEvCA,YAFuC,yCAExB,MAFwB;8BAMrCD,OANqC,CAGvCE,YAHuC;MAGvCA,YAHuC,yCAGxB,EAHwB;2BAMrCF,OANqC,CAIvCG,SAJuC;MAIvCA,SAJuC,sCAI3B,IAJ2B;wBAMrCH,OANqC,CAKvCI,MALuC;MAKvCA,MALuC,mCAK9B,KAL8B;;;MAQrCC,cAAIC,KAAJ,CAAUJ,YAAV,CAAJ,EAA6B;mBACZA,aAAaK,OAAb,EAAf;;;iBAGaC,WAAKC,gBAAL,CAAsBR,YAAtB,CAAf;iBACeC,aAAaQ,GAAb,CAAiBC,WAAKF,gBAAtB,CAAf;;MAEMG,OAAO;YACH,OADG;cAED;cACA,UADA;YAEF,EAFE;aAGDb,OAAOc,KAAP,CAAaV,SAAb,EAAwBO,GAAxB,CAA4B,gBAAQ;4BAEpCT,YADL;kBAEU,OAFV;gBAGQ,EAHR;iBAIS,CACL;oBACU,MADV;kBAEQa,IAFR;mBAGSZ;WAJJ;;OALJ;;GALX;;MAsBMa,MAAMX,SAASQ,IAAT,GAAgBI,YAAMC,QAAN,CAAeL,IAAf,CAA5B;SACOG,GAAP;;;;;;;;;;AAUF,SAASG,SAAT,CAAmBC,KAAnB,EAAwC;MAAdnB,OAAc,uEAAJ,EAAI;;SAC/BoB,cAAcD,MAAME,QAApB,EAA8BrB,OAA9B,CAAP;;;;;;;;;;AAUF,SAASoB,aAAT,CAAuBE,IAAvB,EAA2C;MAAdtB,OAAc,uEAAJ,EAAI;4BACZA,OADY,CACjCG,SADiC;MACjCA,SADiC,uCACrB,IADqB;;;MAIvCmB,KAAKC,MAAL,KAAgB,UAAhB,IACCD,KAAKC,MAAL,KAAgB,OAAhB,IAA2BC,YAAMC,WAAN,CAAkBH,KAAKI,KAAvB,CAF9B,EAGE;WACOJ,KAAKI,KAAL,CAAWhB,GAAX,CAAeU,aAAf,EAA8BO,IAA9B,CAAmCxB,SAAnC,CAAP;GAJF,MAKO;WACEmB,KAAKM,IAAZ;;;;;;;;;;AAUJ,YAAe;0BAAA;;CAAf;;;;"}