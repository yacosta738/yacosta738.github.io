"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Loader = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@emotion/core");

var _reactTransitionGroup = require("react-transition-group");

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const styles = {
  disabled: process.env.NODE_ENV === "production" ? {
    name: "1ob4o9f-disabled",
    styles: "display:none;;label:disabled;"
  } : {
    name: "1ob4o9f-disabled",
    styles: "display:none;;label:disabled;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU2UiLCJmaWxlIjoiLi4vLi4vc3JjL0xvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IENTU1RyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgY29sb3JzLCB6SW5kZXggfSBmcm9tICcuL3N0eWxlcyc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZGlzYWJsZWQ6IGNzc2BcbiAgICBkaXNwbGF5OiBub25lO1xuICBgLFxuICBhY3RpdmU6IGNzc2BcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgYCxcbiAgZW50ZXI6IGNzc2BcbiAgICBvcGFjaXR5OiAwLjAxO1xuICBgLFxuICBlbnRlckFjdGl2ZTogY3NzYFxuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSA1MDBtcyBlYXNlLWluO1xuICBgLFxuICBleGl0OiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgYCxcbiAgZXhpdEFjdGl2ZTogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAzMDBtcyBlYXNlLWluO1xuICBgLFxufTtcblxuY29uc3QgYW5pbWF0aW9ucyA9IHtcbiAgbG9hZGVyOiBrZXlmcmFtZXNgXG4gICAgZnJvbSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbiAgYCxcbn07XG5cbmNvbnN0IExvYWRlclRleHQgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBjb2xvcjogIzc2NzY3NjtcbiAgbWFyZ2luLXRvcDogNTVweDtcbiAgbGluZS1oZWlnaHQ6IDM1cHg7XG5gO1xuXG5jb25zdCBMb2FkZXJJdGVtID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG5gO1xuXG5leHBvcnQgY2xhc3MgTG9hZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGN1cnJlbnRJdGVtOiAwLFxuICB9O1xuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIHNldEFuaW1hdGlvbiA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgY29uc3QgbmV4dEl0ZW0gPVxuICAgICAgICB0aGlzLnN0YXRlLmN1cnJlbnRJdGVtID09PSBjaGlsZHJlbi5sZW5ndGggLSAxID8gMCA6IHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gKyAxO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRJdGVtOiBuZXh0SXRlbSB9KTtcbiAgICB9LCA1MDAwKTtcbiAgfTtcblxuICByZW5kZXJDaGlsZCA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY3VycmVudEl0ZW0gfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2hpbGRyZW4gPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiA8TG9hZGVyVGV4dD57Y2hpbGRyZW59PC9Mb2FkZXJUZXh0PjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICB0aGlzLnNldEFuaW1hdGlvbigpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExvYWRlclRleHQ+XG4gICAgICAgICAgPENTU1RyYW5zaXRpb25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17e1xuICAgICAgICAgICAgICBlbnRlcjogc3R5bGVzLmVudGVyLFxuICAgICAgICAgICAgICBlbnRlckFjdGl2ZTogc3R5bGVzLmVudGVyQWN0aXZlLFxuICAgICAgICAgICAgICBleGl0OiBzdHlsZXMuZXhpdCxcbiAgICAgICAgICAgICAgZXhpdEFjdGl2ZTogc3R5bGVzLmV4aXRBY3RpdmUsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdGltZW91dD17NTAwfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMb2FkZXJJdGVtIGtleT17Y3VycmVudEl0ZW19PntjaGlsZHJlbltjdXJyZW50SXRlbV19PC9Mb2FkZXJJdGVtPlxuICAgICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAgICAgICAgPC9Mb2FkZXJUZXh0PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT57dGhpcy5yZW5kZXJDaGlsZCgpfTwvZGl2PjtcbiAgfVxufVxuXG5jb25zdCBTdHlsZWRMb2FkZXIgPSBzdHlsZWQoTG9hZGVyKWBcbiAgZGlzcGxheTogJHtwcm9wcyA9PiAocHJvcHMuYWN0aXZlID8gJ2Jsb2NrJyA6ICdub25lJyl9O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbjogMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgxMDAwfTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XG5cbiAgJjpiZWZvcmUsXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB3aWR0aDogMi4yODU3cmVtO1xuICAgIGhlaWdodDogMi4yODU3cmVtO1xuICAgIG1hcmdpbjogMCAwIDAgLTEuMTQyOXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiA1MDByZW07XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDAuMmVtO1xuICB9XG5cbiAgLyogU3RhdGljIFNoYXBlICovXG4gICY6YmVmb3JlIHtcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuXG4gIC8qIEFjdGl2ZSBTaGFwZSAqL1xuICAmOmFmdGVyIHtcbiAgICBhbmltYXRpb246ICR7YW5pbWF0aW9ucy5sb2FkZXJ9IDAuNnMgbGluZWFyO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfSB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggdHJhbnNwYXJlbnQ7XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZExvYWRlcjtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  active: process.env.NODE_ENV === "production" ? {
    name: "1exmk8-active",
    styles: "display:block;;label:active;"
  } : {
    name: "1exmk8-active",
    styles: "display:block;;label:active;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWWEiLCJmaWxlIjoiLi4vLi4vc3JjL0xvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IENTU1RyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgY29sb3JzLCB6SW5kZXggfSBmcm9tICcuL3N0eWxlcyc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZGlzYWJsZWQ6IGNzc2BcbiAgICBkaXNwbGF5OiBub25lO1xuICBgLFxuICBhY3RpdmU6IGNzc2BcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgYCxcbiAgZW50ZXI6IGNzc2BcbiAgICBvcGFjaXR5OiAwLjAxO1xuICBgLFxuICBlbnRlckFjdGl2ZTogY3NzYFxuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSA1MDBtcyBlYXNlLWluO1xuICBgLFxuICBleGl0OiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgYCxcbiAgZXhpdEFjdGl2ZTogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAzMDBtcyBlYXNlLWluO1xuICBgLFxufTtcblxuY29uc3QgYW5pbWF0aW9ucyA9IHtcbiAgbG9hZGVyOiBrZXlmcmFtZXNgXG4gICAgZnJvbSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbiAgYCxcbn07XG5cbmNvbnN0IExvYWRlclRleHQgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBjb2xvcjogIzc2NzY3NjtcbiAgbWFyZ2luLXRvcDogNTVweDtcbiAgbGluZS1oZWlnaHQ6IDM1cHg7XG5gO1xuXG5jb25zdCBMb2FkZXJJdGVtID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG5gO1xuXG5leHBvcnQgY2xhc3MgTG9hZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGN1cnJlbnRJdGVtOiAwLFxuICB9O1xuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIHNldEFuaW1hdGlvbiA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgY29uc3QgbmV4dEl0ZW0gPVxuICAgICAgICB0aGlzLnN0YXRlLmN1cnJlbnRJdGVtID09PSBjaGlsZHJlbi5sZW5ndGggLSAxID8gMCA6IHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gKyAxO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRJdGVtOiBuZXh0SXRlbSB9KTtcbiAgICB9LCA1MDAwKTtcbiAgfTtcblxuICByZW5kZXJDaGlsZCA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY3VycmVudEl0ZW0gfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2hpbGRyZW4gPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiA8TG9hZGVyVGV4dD57Y2hpbGRyZW59PC9Mb2FkZXJUZXh0PjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICB0aGlzLnNldEFuaW1hdGlvbigpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExvYWRlclRleHQ+XG4gICAgICAgICAgPENTU1RyYW5zaXRpb25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17e1xuICAgICAgICAgICAgICBlbnRlcjogc3R5bGVzLmVudGVyLFxuICAgICAgICAgICAgICBlbnRlckFjdGl2ZTogc3R5bGVzLmVudGVyQWN0aXZlLFxuICAgICAgICAgICAgICBleGl0OiBzdHlsZXMuZXhpdCxcbiAgICAgICAgICAgICAgZXhpdEFjdGl2ZTogc3R5bGVzLmV4aXRBY3RpdmUsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdGltZW91dD17NTAwfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMb2FkZXJJdGVtIGtleT17Y3VycmVudEl0ZW19PntjaGlsZHJlbltjdXJyZW50SXRlbV19PC9Mb2FkZXJJdGVtPlxuICAgICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAgICAgICAgPC9Mb2FkZXJUZXh0PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT57dGhpcy5yZW5kZXJDaGlsZCgpfTwvZGl2PjtcbiAgfVxufVxuXG5jb25zdCBTdHlsZWRMb2FkZXIgPSBzdHlsZWQoTG9hZGVyKWBcbiAgZGlzcGxheTogJHtwcm9wcyA9PiAocHJvcHMuYWN0aXZlID8gJ2Jsb2NrJyA6ICdub25lJyl9O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbjogMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgxMDAwfTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XG5cbiAgJjpiZWZvcmUsXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB3aWR0aDogMi4yODU3cmVtO1xuICAgIGhlaWdodDogMi4yODU3cmVtO1xuICAgIG1hcmdpbjogMCAwIDAgLTEuMTQyOXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiA1MDByZW07XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDAuMmVtO1xuICB9XG5cbiAgLyogU3RhdGljIFNoYXBlICovXG4gICY6YmVmb3JlIHtcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuXG4gIC8qIEFjdGl2ZSBTaGFwZSAqL1xuICAmOmFmdGVyIHtcbiAgICBhbmltYXRpb246ICR7YW5pbWF0aW9ucy5sb2FkZXJ9IDAuNnMgbGluZWFyO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfSB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggdHJhbnNwYXJlbnQ7XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZExvYWRlcjtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  enter: process.env.NODE_ENV === "production" ? {
    name: "1rafamr-enter",
    styles: "opacity:0.01;;label:enter;"
  } : {
    name: "1rafamr-enter",
    styles: "opacity:0.01;;label:enter;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZVkiLCJmaWxlIjoiLi4vLi4vc3JjL0xvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IENTU1RyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgY29sb3JzLCB6SW5kZXggfSBmcm9tICcuL3N0eWxlcyc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZGlzYWJsZWQ6IGNzc2BcbiAgICBkaXNwbGF5OiBub25lO1xuICBgLFxuICBhY3RpdmU6IGNzc2BcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgYCxcbiAgZW50ZXI6IGNzc2BcbiAgICBvcGFjaXR5OiAwLjAxO1xuICBgLFxuICBlbnRlckFjdGl2ZTogY3NzYFxuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSA1MDBtcyBlYXNlLWluO1xuICBgLFxuICBleGl0OiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgYCxcbiAgZXhpdEFjdGl2ZTogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAzMDBtcyBlYXNlLWluO1xuICBgLFxufTtcblxuY29uc3QgYW5pbWF0aW9ucyA9IHtcbiAgbG9hZGVyOiBrZXlmcmFtZXNgXG4gICAgZnJvbSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbiAgYCxcbn07XG5cbmNvbnN0IExvYWRlclRleHQgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBjb2xvcjogIzc2NzY3NjtcbiAgbWFyZ2luLXRvcDogNTVweDtcbiAgbGluZS1oZWlnaHQ6IDM1cHg7XG5gO1xuXG5jb25zdCBMb2FkZXJJdGVtID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG5gO1xuXG5leHBvcnQgY2xhc3MgTG9hZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGN1cnJlbnRJdGVtOiAwLFxuICB9O1xuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIHNldEFuaW1hdGlvbiA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgY29uc3QgbmV4dEl0ZW0gPVxuICAgICAgICB0aGlzLnN0YXRlLmN1cnJlbnRJdGVtID09PSBjaGlsZHJlbi5sZW5ndGggLSAxID8gMCA6IHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gKyAxO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRJdGVtOiBuZXh0SXRlbSB9KTtcbiAgICB9LCA1MDAwKTtcbiAgfTtcblxuICByZW5kZXJDaGlsZCA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY3VycmVudEl0ZW0gfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2hpbGRyZW4gPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiA8TG9hZGVyVGV4dD57Y2hpbGRyZW59PC9Mb2FkZXJUZXh0PjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICB0aGlzLnNldEFuaW1hdGlvbigpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExvYWRlclRleHQ+XG4gICAgICAgICAgPENTU1RyYW5zaXRpb25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17e1xuICAgICAgICAgICAgICBlbnRlcjogc3R5bGVzLmVudGVyLFxuICAgICAgICAgICAgICBlbnRlckFjdGl2ZTogc3R5bGVzLmVudGVyQWN0aXZlLFxuICAgICAgICAgICAgICBleGl0OiBzdHlsZXMuZXhpdCxcbiAgICAgICAgICAgICAgZXhpdEFjdGl2ZTogc3R5bGVzLmV4aXRBY3RpdmUsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdGltZW91dD17NTAwfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMb2FkZXJJdGVtIGtleT17Y3VycmVudEl0ZW19PntjaGlsZHJlbltjdXJyZW50SXRlbV19PC9Mb2FkZXJJdGVtPlxuICAgICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAgICAgICAgPC9Mb2FkZXJUZXh0PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT57dGhpcy5yZW5kZXJDaGlsZCgpfTwvZGl2PjtcbiAgfVxufVxuXG5jb25zdCBTdHlsZWRMb2FkZXIgPSBzdHlsZWQoTG9hZGVyKWBcbiAgZGlzcGxheTogJHtwcm9wcyA9PiAocHJvcHMuYWN0aXZlID8gJ2Jsb2NrJyA6ICdub25lJyl9O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbjogMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgxMDAwfTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XG5cbiAgJjpiZWZvcmUsXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB3aWR0aDogMi4yODU3cmVtO1xuICAgIGhlaWdodDogMi4yODU3cmVtO1xuICAgIG1hcmdpbjogMCAwIDAgLTEuMTQyOXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiA1MDByZW07XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDAuMmVtO1xuICB9XG5cbiAgLyogU3RhdGljIFNoYXBlICovXG4gICY6YmVmb3JlIHtcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuXG4gIC8qIEFjdGl2ZSBTaGFwZSAqL1xuICAmOmFmdGVyIHtcbiAgICBhbmltYXRpb246ICR7YW5pbWF0aW9ucy5sb2FkZXJ9IDAuNnMgbGluZWFyO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfSB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggdHJhbnNwYXJlbnQ7XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZExvYWRlcjtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  enterActive: process.env.NODE_ENV === "production" ? {
    name: "halfu0-enterActive",
    styles: "opacity:1;transition:opacity 500ms ease-in;;label:enterActive;"
  } : {
    name: "halfu0-enterActive",
    styles: "opacity:1;transition:opacity 500ms ease-in;;label:enterActive;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JrQiIsImZpbGUiOiIuLi8uLi9zcmMvTG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgeyBjb2xvcnMsIHpJbmRleCB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBkaXNhYmxlZDogY3NzYFxuICAgIGRpc3BsYXk6IG5vbmU7XG4gIGAsXG4gIGFjdGl2ZTogY3NzYFxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICBgLFxuICBlbnRlcjogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gIGAsXG4gIGVudGVyQWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2UtaW47XG4gIGAsXG4gIGV4aXQ6IGNzc2BcbiAgICBvcGFjaXR5OiAxO1xuICBgLFxuICBleGl0QWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMC4wMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDMwMG1zIGVhc2UtaW47XG4gIGAsXG59O1xuXG5jb25zdCBhbmltYXRpb25zID0ge1xuICBsb2FkZXI6IGtleWZyYW1lc2BcbiAgICBmcm9tIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgTG9hZGVyVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjNzY3Njc2O1xuICBtYXJnaW4tdG9wOiA1NXB4O1xuICBsaW5lLWhlaWdodDogMzVweDtcbmA7XG5cbmNvbnN0IExvYWRlckl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBMb2FkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgY3VycmVudEl0ZW06IDAsXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgc2V0QW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmludGVydmFsKSByZXR1cm47XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0SXRlbSA9XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gPT09IGNoaWxkcmVuLmxlbmd0aCAtIDEgPyAwIDogdGhpcy5zdGF0ZS5jdXJyZW50SXRlbSArIDE7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEl0ZW06IG5leHRJdGVtIH0pO1xuICAgIH0sIDUwMDApO1xuICB9O1xuXG4gIHJlbmRlckNoaWxkID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBjdXJyZW50SXRlbSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIDxMb2FkZXJUZXh0PntjaGlsZHJlbn08L0xvYWRlclRleHQ+O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TG9hZGVyVGV4dD5cbiAgICAgICAgICA8Q1NTVHJhbnNpdGlvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt7XG4gICAgICAgICAgICAgIGVudGVyOiBzdHlsZXMuZW50ZXIsXG4gICAgICAgICAgICAgIGVudGVyQWN0aXZlOiBzdHlsZXMuZW50ZXJBY3RpdmUsXG4gICAgICAgICAgICAgIGV4aXQ6IHN0eWxlcy5leGl0LFxuICAgICAgICAgICAgICBleGl0QWN0aXZlOiBzdHlsZXMuZXhpdEFjdGl2ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0aW1lb3V0PXs1MDB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExvYWRlckl0ZW0ga2V5PXtjdXJyZW50SXRlbX0+e2NoaWxkcmVuW2N1cnJlbnRJdGVtXX08L0xvYWRlckl0ZW0+XG4gICAgICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICAgICAgICA8L0xvYWRlclRleHQ+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9Pnt0aGlzLnJlbmRlckNoaWxkKCl9PC9kaXY+O1xuICB9XG59XG5cbmNvbnN0IFN0eWxlZExvYWRlciA9IHN0eWxlZChMb2FkZXIpYFxuICBkaXNwbGF5OiAke3Byb3BzID0+IChwcm9wcy5hY3RpdmUgPyAnYmxvY2snIDogJ25vbmUnKX07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luOiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDEwMDB9O1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcblxuICAmOmJlZm9yZSxcbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHdpZHRoOiAyLjI4NTdyZW07XG4gICAgaGVpZ2h0OiAyLjI4NTdyZW07XG4gICAgbWFyZ2luOiAwIDAgMCAtMS4xNDI5cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwMHJlbTtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci13aWR0aDogMC4yZW07XG4gIH1cblxuICAvKiBTdGF0aWMgU2hhcGUgKi9cbiAgJjpiZWZvcmUge1xuICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG5cbiAgLyogQWN0aXZlIFNoYXBlICovXG4gICY6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogJHthbmltYXRpb25zLmxvYWRlcn0gMC42cyBsaW5lYXI7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYm9yZGVyLWNvbG9yOiAke2NvbG9ycy5hY3RpdmV9IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB0cmFuc3BhcmVudDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkTG9hZGVyO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  exit: process.env.NODE_ENV === "production" ? {
    name: "1p8uuwp-exit",
    styles: "opacity:1;;label:exit;"
  } : {
    name: "1p8uuwp-exit",
    styles: "opacity:1;;label:exit;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JXIiwiZmlsZSI6Ii4uLy4uL3NyYy9Mb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBDU1NUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5cbmltcG9ydCB7IGNvbG9ycywgekluZGV4IH0gZnJvbSAnLi9zdHlsZXMnO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGRpc2FibGVkOiBjc3NgXG4gICAgZGlzcGxheTogbm9uZTtcbiAgYCxcbiAgYWN0aXZlOiBjc3NgXG4gICAgZGlzcGxheTogYmxvY2s7XG4gIGAsXG4gIGVudGVyOiBjc3NgXG4gICAgb3BhY2l0eTogMC4wMTtcbiAgYCxcbiAgZW50ZXJBY3RpdmU6IGNzc2BcbiAgICBvcGFjaXR5OiAxO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgNTAwbXMgZWFzZS1pbjtcbiAgYCxcbiAgZXhpdDogY3NzYFxuICAgIG9wYWNpdHk6IDE7XG4gIGAsXG4gIGV4aXRBY3RpdmU6IGNzc2BcbiAgICBvcGFjaXR5OiAwLjAxO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMzAwbXMgZWFzZS1pbjtcbiAgYCxcbn07XG5cbmNvbnN0IGFuaW1hdGlvbnMgPSB7XG4gIGxvYWRlcjoga2V5ZnJhbWVzYFxuICAgIGZyb20ge1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gICAgfVxuXG4gICAgdG8ge1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICB9XG4gIGAsXG59O1xuXG5jb25zdCBMb2FkZXJUZXh0ID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcbiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgY29sb3I6ICM3Njc2NzY7XG4gIG1hcmdpbi10b3A6IDU1cHg7XG4gIGxpbmUtaGVpZ2h0OiAzNXB4O1xuYDtcblxuY29uc3QgTG9hZGVySXRlbSA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuYDtcblxuZXhwb3J0IGNsYXNzIExvYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBjdXJyZW50SXRlbTogMCxcbiAgfTtcblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICB9XG4gIH1cblxuICBzZXRBbmltYXRpb24gPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHJldHVybjtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRJdGVtID1cbiAgICAgICAgdGhpcy5zdGF0ZS5jdXJyZW50SXRlbSA9PT0gY2hpbGRyZW4ubGVuZ3RoIC0gMSA/IDAgOiB0aGlzLnN0YXRlLmN1cnJlbnRJdGVtICsgMTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjdXJyZW50SXRlbTogbmV4dEl0ZW0gfSk7XG4gICAgfSwgNTAwMCk7XG4gIH07XG5cbiAgcmVuZGVyQ2hpbGQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGN1cnJlbnRJdGVtIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkcmVuID09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gPExvYWRlclRleHQ+e2NoaWxkcmVufTwvTG9hZGVyVGV4dD47XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgdGhpcy5zZXRBbmltYXRpb24oKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMb2FkZXJUZXh0PlxuICAgICAgICAgIDxDU1NUcmFuc2l0aW9uXG4gICAgICAgICAgICBjbGFzc05hbWU9e3tcbiAgICAgICAgICAgICAgZW50ZXI6IHN0eWxlcy5lbnRlcixcbiAgICAgICAgICAgICAgZW50ZXJBY3RpdmU6IHN0eWxlcy5lbnRlckFjdGl2ZSxcbiAgICAgICAgICAgICAgZXhpdDogc3R5bGVzLmV4aXQsXG4gICAgICAgICAgICAgIGV4aXRBY3RpdmU6IHN0eWxlcy5leGl0QWN0aXZlLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHRpbWVvdXQ9ezUwMH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TG9hZGVySXRlbSBrZXk9e2N1cnJlbnRJdGVtfT57Y2hpbGRyZW5bY3VycmVudEl0ZW1dfTwvTG9hZGVySXRlbT5cbiAgICAgICAgICA8L0NTU1RyYW5zaXRpb24+XG4gICAgICAgIDwvTG9hZGVyVGV4dD5cbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNsYXNzTmFtZSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+e3RoaXMucmVuZGVyQ2hpbGQoKX08L2Rpdj47XG4gIH1cbn1cblxuY29uc3QgU3R5bGVkTG9hZGVyID0gc3R5bGVkKExvYWRlcilgXG4gIGRpc3BsYXk6ICR7cHJvcHMgPT4gKHByb3BzLmFjdGl2ZSA/ICdibG9jaycgOiAnbm9uZScpfTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICBtYXJnaW46IDA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgei1pbmRleDogJHt6SW5kZXguekluZGV4MTAwMH07XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xuXG4gICY6YmVmb3JlLFxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgd2lkdGg6IDIuMjg1N3JlbTtcbiAgICBoZWlnaHQ6IDIuMjg1N3JlbTtcbiAgICBtYXJnaW46IDAgMCAwIC0xLjE0MjlyZW07XG4gICAgYm9yZGVyLXJhZGl1czogNTAwcmVtO1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgYm9yZGVyLXdpZHRoOiAwLjJlbTtcbiAgfVxuXG4gIC8qIFN0YXRpYyBTaGFwZSAqL1xuICAmOmJlZm9yZSB7XG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIH1cblxuICAvKiBBY3RpdmUgU2hhcGUgKi9cbiAgJjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiAke2FuaW1hdGlvbnMubG9hZGVyfSAwLjZzIGxpbmVhcjtcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX0gdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMXB4IHRyYW5zcGFyZW50O1xuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBTdHlsZWRMb2FkZXI7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  exitActive: process.env.NODE_ENV === "production" ? {
    name: "1istkwr-exitActive",
    styles: "opacity:0.01;transition:opacity 300ms ease-in;;label:exitActive;"
  } : {
    name: "1istkwr-exitActive",
    styles: "opacity:0.01;transition:opacity 300ms ease-in;;label:exitActive;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUJpQiIsImZpbGUiOiIuLi8uLi9zcmMvTG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgeyBjb2xvcnMsIHpJbmRleCB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBkaXNhYmxlZDogY3NzYFxuICAgIGRpc3BsYXk6IG5vbmU7XG4gIGAsXG4gIGFjdGl2ZTogY3NzYFxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICBgLFxuICBlbnRlcjogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gIGAsXG4gIGVudGVyQWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2UtaW47XG4gIGAsXG4gIGV4aXQ6IGNzc2BcbiAgICBvcGFjaXR5OiAxO1xuICBgLFxuICBleGl0QWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMC4wMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDMwMG1zIGVhc2UtaW47XG4gIGAsXG59O1xuXG5jb25zdCBhbmltYXRpb25zID0ge1xuICBsb2FkZXI6IGtleWZyYW1lc2BcbiAgICBmcm9tIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgTG9hZGVyVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjNzY3Njc2O1xuICBtYXJnaW4tdG9wOiA1NXB4O1xuICBsaW5lLWhlaWdodDogMzVweDtcbmA7XG5cbmNvbnN0IExvYWRlckl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBMb2FkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgY3VycmVudEl0ZW06IDAsXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgc2V0QW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmludGVydmFsKSByZXR1cm47XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0SXRlbSA9XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gPT09IGNoaWxkcmVuLmxlbmd0aCAtIDEgPyAwIDogdGhpcy5zdGF0ZS5jdXJyZW50SXRlbSArIDE7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEl0ZW06IG5leHRJdGVtIH0pO1xuICAgIH0sIDUwMDApO1xuICB9O1xuXG4gIHJlbmRlckNoaWxkID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBjdXJyZW50SXRlbSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIDxMb2FkZXJUZXh0PntjaGlsZHJlbn08L0xvYWRlclRleHQ+O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TG9hZGVyVGV4dD5cbiAgICAgICAgICA8Q1NTVHJhbnNpdGlvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt7XG4gICAgICAgICAgICAgIGVudGVyOiBzdHlsZXMuZW50ZXIsXG4gICAgICAgICAgICAgIGVudGVyQWN0aXZlOiBzdHlsZXMuZW50ZXJBY3RpdmUsXG4gICAgICAgICAgICAgIGV4aXQ6IHN0eWxlcy5leGl0LFxuICAgICAgICAgICAgICBleGl0QWN0aXZlOiBzdHlsZXMuZXhpdEFjdGl2ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0aW1lb3V0PXs1MDB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExvYWRlckl0ZW0ga2V5PXtjdXJyZW50SXRlbX0+e2NoaWxkcmVuW2N1cnJlbnRJdGVtXX08L0xvYWRlckl0ZW0+XG4gICAgICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICAgICAgICA8L0xvYWRlclRleHQ+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9Pnt0aGlzLnJlbmRlckNoaWxkKCl9PC9kaXY+O1xuICB9XG59XG5cbmNvbnN0IFN0eWxlZExvYWRlciA9IHN0eWxlZChMb2FkZXIpYFxuICBkaXNwbGF5OiAke3Byb3BzID0+IChwcm9wcy5hY3RpdmUgPyAnYmxvY2snIDogJ25vbmUnKX07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luOiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDEwMDB9O1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcblxuICAmOmJlZm9yZSxcbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHdpZHRoOiAyLjI4NTdyZW07XG4gICAgaGVpZ2h0OiAyLjI4NTdyZW07XG4gICAgbWFyZ2luOiAwIDAgMCAtMS4xNDI5cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwMHJlbTtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci13aWR0aDogMC4yZW07XG4gIH1cblxuICAvKiBTdGF0aWMgU2hhcGUgKi9cbiAgJjpiZWZvcmUge1xuICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG5cbiAgLyogQWN0aXZlIFNoYXBlICovXG4gICY6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogJHthbmltYXRpb25zLmxvYWRlcn0gMC42cyBsaW5lYXI7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYm9yZGVyLWNvbG9yOiAke2NvbG9ycy5hY3RpdmV9IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB0cmFuc3BhcmVudDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkTG9hZGVyO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const animations = {
  loader: (0, _core.keyframes)`
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  `
};
const LoaderText = (0, _styledBase.default)("div", {
  target: "e1rlflmg0",
  label: "LoaderText"
})(process.env.NODE_ENV === "production" ? {
  name: "8sb4j5",
  styles: "width:auto !important;height:auto !important;text-align:center;color:#767676;margin-top:55px;line-height:35px;"
} : {
  name: "8sb4j5",
  styles: "width:auto !important;height:auto !important;text-align:center;color:#767676;margin-top:55px;line-height:35px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkM2QiIsImZpbGUiOiIuLi8uLi9zcmMvTG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgeyBjb2xvcnMsIHpJbmRleCB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBkaXNhYmxlZDogY3NzYFxuICAgIGRpc3BsYXk6IG5vbmU7XG4gIGAsXG4gIGFjdGl2ZTogY3NzYFxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICBgLFxuICBlbnRlcjogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gIGAsXG4gIGVudGVyQWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2UtaW47XG4gIGAsXG4gIGV4aXQ6IGNzc2BcbiAgICBvcGFjaXR5OiAxO1xuICBgLFxuICBleGl0QWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMC4wMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDMwMG1zIGVhc2UtaW47XG4gIGAsXG59O1xuXG5jb25zdCBhbmltYXRpb25zID0ge1xuICBsb2FkZXI6IGtleWZyYW1lc2BcbiAgICBmcm9tIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgTG9hZGVyVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjNzY3Njc2O1xuICBtYXJnaW4tdG9wOiA1NXB4O1xuICBsaW5lLWhlaWdodDogMzVweDtcbmA7XG5cbmNvbnN0IExvYWRlckl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBMb2FkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgY3VycmVudEl0ZW06IDAsXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgc2V0QW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmludGVydmFsKSByZXR1cm47XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0SXRlbSA9XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gPT09IGNoaWxkcmVuLmxlbmd0aCAtIDEgPyAwIDogdGhpcy5zdGF0ZS5jdXJyZW50SXRlbSArIDE7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEl0ZW06IG5leHRJdGVtIH0pO1xuICAgIH0sIDUwMDApO1xuICB9O1xuXG4gIHJlbmRlckNoaWxkID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBjdXJyZW50SXRlbSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIDxMb2FkZXJUZXh0PntjaGlsZHJlbn08L0xvYWRlclRleHQ+O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TG9hZGVyVGV4dD5cbiAgICAgICAgICA8Q1NTVHJhbnNpdGlvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt7XG4gICAgICAgICAgICAgIGVudGVyOiBzdHlsZXMuZW50ZXIsXG4gICAgICAgICAgICAgIGVudGVyQWN0aXZlOiBzdHlsZXMuZW50ZXJBY3RpdmUsXG4gICAgICAgICAgICAgIGV4aXQ6IHN0eWxlcy5leGl0LFxuICAgICAgICAgICAgICBleGl0QWN0aXZlOiBzdHlsZXMuZXhpdEFjdGl2ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0aW1lb3V0PXs1MDB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExvYWRlckl0ZW0ga2V5PXtjdXJyZW50SXRlbX0+e2NoaWxkcmVuW2N1cnJlbnRJdGVtXX08L0xvYWRlckl0ZW0+XG4gICAgICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICAgICAgICA8L0xvYWRlclRleHQ+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9Pnt0aGlzLnJlbmRlckNoaWxkKCl9PC9kaXY+O1xuICB9XG59XG5cbmNvbnN0IFN0eWxlZExvYWRlciA9IHN0eWxlZChMb2FkZXIpYFxuICBkaXNwbGF5OiAke3Byb3BzID0+IChwcm9wcy5hY3RpdmUgPyAnYmxvY2snIDogJ25vbmUnKX07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luOiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDEwMDB9O1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcblxuICAmOmJlZm9yZSxcbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHdpZHRoOiAyLjI4NTdyZW07XG4gICAgaGVpZ2h0OiAyLjI4NTdyZW07XG4gICAgbWFyZ2luOiAwIDAgMCAtMS4xNDI5cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwMHJlbTtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci13aWR0aDogMC4yZW07XG4gIH1cblxuICAvKiBTdGF0aWMgU2hhcGUgKi9cbiAgJjpiZWZvcmUge1xuICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG5cbiAgLyogQWN0aXZlIFNoYXBlICovXG4gICY6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogJHthbmltYXRpb25zLmxvYWRlcn0gMC42cyBsaW5lYXI7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYm9yZGVyLWNvbG9yOiAke2NvbG9ycy5hY3RpdmV9IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB0cmFuc3BhcmVudDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkTG9hZGVyO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LoaderItem = (0, _styledBase.default)("div", {
  target: "e1rlflmg1",
  label: "LoaderItem"
})(process.env.NODE_ENV === "production" ? {
  name: "aprmr",
  styles: "position:absolute;white-space:nowrap;transform:translateX(-50%);"
} : {
  name: "aprmr",
  styles: "position:absolute;white-space:nowrap;transform:translateX(-50%);",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0Q2QiIsImZpbGUiOiIuLi8uLi9zcmMvTG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgeyBjb2xvcnMsIHpJbmRleCB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBkaXNhYmxlZDogY3NzYFxuICAgIGRpc3BsYXk6IG5vbmU7XG4gIGAsXG4gIGFjdGl2ZTogY3NzYFxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICBgLFxuICBlbnRlcjogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gIGAsXG4gIGVudGVyQWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2UtaW47XG4gIGAsXG4gIGV4aXQ6IGNzc2BcbiAgICBvcGFjaXR5OiAxO1xuICBgLFxuICBleGl0QWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMC4wMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDMwMG1zIGVhc2UtaW47XG4gIGAsXG59O1xuXG5jb25zdCBhbmltYXRpb25zID0ge1xuICBsb2FkZXI6IGtleWZyYW1lc2BcbiAgICBmcm9tIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgTG9hZGVyVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjNzY3Njc2O1xuICBtYXJnaW4tdG9wOiA1NXB4O1xuICBsaW5lLWhlaWdodDogMzVweDtcbmA7XG5cbmNvbnN0IExvYWRlckl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBMb2FkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgY3VycmVudEl0ZW06IDAsXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgc2V0QW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmludGVydmFsKSByZXR1cm47XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0SXRlbSA9XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gPT09IGNoaWxkcmVuLmxlbmd0aCAtIDEgPyAwIDogdGhpcy5zdGF0ZS5jdXJyZW50SXRlbSArIDE7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEl0ZW06IG5leHRJdGVtIH0pO1xuICAgIH0sIDUwMDApO1xuICB9O1xuXG4gIHJlbmRlckNoaWxkID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBjdXJyZW50SXRlbSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIDxMb2FkZXJUZXh0PntjaGlsZHJlbn08L0xvYWRlclRleHQ+O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TG9hZGVyVGV4dD5cbiAgICAgICAgICA8Q1NTVHJhbnNpdGlvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt7XG4gICAgICAgICAgICAgIGVudGVyOiBzdHlsZXMuZW50ZXIsXG4gICAgICAgICAgICAgIGVudGVyQWN0aXZlOiBzdHlsZXMuZW50ZXJBY3RpdmUsXG4gICAgICAgICAgICAgIGV4aXQ6IHN0eWxlcy5leGl0LFxuICAgICAgICAgICAgICBleGl0QWN0aXZlOiBzdHlsZXMuZXhpdEFjdGl2ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0aW1lb3V0PXs1MDB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExvYWRlckl0ZW0ga2V5PXtjdXJyZW50SXRlbX0+e2NoaWxkcmVuW2N1cnJlbnRJdGVtXX08L0xvYWRlckl0ZW0+XG4gICAgICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICAgICAgICA8L0xvYWRlclRleHQ+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9Pnt0aGlzLnJlbmRlckNoaWxkKCl9PC9kaXY+O1xuICB9XG59XG5cbmNvbnN0IFN0eWxlZExvYWRlciA9IHN0eWxlZChMb2FkZXIpYFxuICBkaXNwbGF5OiAke3Byb3BzID0+IChwcm9wcy5hY3RpdmUgPyAnYmxvY2snIDogJ25vbmUnKX07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luOiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDEwMDB9O1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcblxuICAmOmJlZm9yZSxcbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHdpZHRoOiAyLjI4NTdyZW07XG4gICAgaGVpZ2h0OiAyLjI4NTdyZW07XG4gICAgbWFyZ2luOiAwIDAgMCAtMS4xNDI5cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwMHJlbTtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci13aWR0aDogMC4yZW07XG4gIH1cblxuICAvKiBTdGF0aWMgU2hhcGUgKi9cbiAgJjpiZWZvcmUge1xuICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG5cbiAgLyogQWN0aXZlIFNoYXBlICovXG4gICY6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogJHthbmltYXRpb25zLmxvYWRlcn0gMC42cyBsaW5lYXI7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYm9yZGVyLWNvbG9yOiAke2NvbG9ycy5hY3RpdmV9IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB0cmFuc3BhcmVudDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkTG9hZGVyO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

class Loader extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      currentItem: 0
    });

    _defineProperty(this, "setAnimation", () => {
      if (this.interval) return;
      const {
        children
      } = this.props;
      this.interval = setInterval(() => {
        const nextItem = this.state.currentItem === children.length - 1 ? 0 : this.state.currentItem + 1;
        this.setState({
          currentItem: nextItem
        });
      }, 5000);
    });

    _defineProperty(this, "renderChild", () => {
      const {
        children
      } = this.props;
      const {
        currentItem
      } = this.state;

      if (!children) {
        return null;
      } else if (typeof children == 'string') {
        return (0, _core.jsx)(LoaderText, null, children);
      } else if (Array.isArray(children)) {
        this.setAnimation();
        return (0, _core.jsx)(LoaderText, null, (0, _core.jsx)(_reactTransitionGroup.CSSTransition, {
          className: {
            enter: styles.enter,
            enterActive: styles.enterActive,
            exit: styles.exit,
            exitActive: styles.exitActive
          },
          timeout: 500
        }, (0, _core.jsx)(LoaderItem, {
          key: currentItem
        }, children[currentItem])));
      }
    });
  }

  componentWillUnmount() {
    if (this.interval) {
      clearInterval(this.interval);
    }
  }

  render() {
    const {
      className
    } = this.props;
    return (0, _core.jsx)("div", {
      className: className
    }, this.renderChild());
  }

}

exports.Loader = Loader;

_defineProperty(Loader, "propTypes", {
  children: _propTypes.default.node,
  className: _propTypes.default.string
});

const StyledLoader = ( /*#__PURE__*/0, _styledBase.default)(Loader, {
  target: "e1rlflmg2",
  label: "StyledLoader"
})("display:", props => props.active ? 'block' : 'none', ";position:absolute;top:50%;left:50%;margin:0;text-align:center;z-index:", _styles.zIndex.zIndex1000, ";transform:translateX(-50%) translateY(-50%);&:before,&:after{content:'';position:absolute;top:0%;left:50%;width:2.2857rem;height:2.2857rem;margin:0 0 0 -1.1429rem;border-radius:500rem;border-style:solid;border-width:0.2em;}&:before{border-color:rgba(0,0,0,0.1);}&:after{animation:", animations.loader, " 0.6s linear;animation-iteration-count:infinite;border-color:", _styles.colors.active, " transparent transparent;box-shadow:0 0 0 1px transparent;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0htQyIsImZpbGUiOiIuLi8uLi9zcmMvTG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgeyBjb2xvcnMsIHpJbmRleCB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBkaXNhYmxlZDogY3NzYFxuICAgIGRpc3BsYXk6IG5vbmU7XG4gIGAsXG4gIGFjdGl2ZTogY3NzYFxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICBgLFxuICBlbnRlcjogY3NzYFxuICAgIG9wYWNpdHk6IDAuMDE7XG4gIGAsXG4gIGVudGVyQWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2UtaW47XG4gIGAsXG4gIGV4aXQ6IGNzc2BcbiAgICBvcGFjaXR5OiAxO1xuICBgLFxuICBleGl0QWN0aXZlOiBjc3NgXG4gICAgb3BhY2l0eTogMC4wMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDMwMG1zIGVhc2UtaW47XG4gIGAsXG59O1xuXG5jb25zdCBhbmltYXRpb25zID0ge1xuICBsb2FkZXI6IGtleWZyYW1lc2BcbiAgICBmcm9tIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgTG9hZGVyVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjNzY3Njc2O1xuICBtYXJnaW4tdG9wOiA1NXB4O1xuICBsaW5lLWhlaWdodDogMzVweDtcbmA7XG5cbmNvbnN0IExvYWRlckl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBMb2FkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgY3VycmVudEl0ZW06IDAsXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgc2V0QW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmludGVydmFsKSByZXR1cm47XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0SXRlbSA9XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudEl0ZW0gPT09IGNoaWxkcmVuLmxlbmd0aCAtIDEgPyAwIDogdGhpcy5zdGF0ZS5jdXJyZW50SXRlbSArIDE7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEl0ZW06IG5leHRJdGVtIH0pO1xuICAgIH0sIDUwMDApO1xuICB9O1xuXG4gIHJlbmRlckNoaWxkID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBjdXJyZW50SXRlbSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIDxMb2FkZXJUZXh0PntjaGlsZHJlbn08L0xvYWRlclRleHQ+O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TG9hZGVyVGV4dD5cbiAgICAgICAgICA8Q1NTVHJhbnNpdGlvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXt7XG4gICAgICAgICAgICAgIGVudGVyOiBzdHlsZXMuZW50ZXIsXG4gICAgICAgICAgICAgIGVudGVyQWN0aXZlOiBzdHlsZXMuZW50ZXJBY3RpdmUsXG4gICAgICAgICAgICAgIGV4aXQ6IHN0eWxlcy5leGl0LFxuICAgICAgICAgICAgICBleGl0QWN0aXZlOiBzdHlsZXMuZXhpdEFjdGl2ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0aW1lb3V0PXs1MDB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExvYWRlckl0ZW0ga2V5PXtjdXJyZW50SXRlbX0+e2NoaWxkcmVuW2N1cnJlbnRJdGVtXX08L0xvYWRlckl0ZW0+XG4gICAgICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICAgICAgICA8L0xvYWRlclRleHQ+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9Pnt0aGlzLnJlbmRlckNoaWxkKCl9PC9kaXY+O1xuICB9XG59XG5cbmNvbnN0IFN0eWxlZExvYWRlciA9IHN0eWxlZChMb2FkZXIpYFxuICBkaXNwbGF5OiAke3Byb3BzID0+IChwcm9wcy5hY3RpdmUgPyAnYmxvY2snIDogJ25vbmUnKX07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luOiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDEwMDB9O1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcblxuICAmOmJlZm9yZSxcbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHdpZHRoOiAyLjI4NTdyZW07XG4gICAgaGVpZ2h0OiAyLjI4NTdyZW07XG4gICAgbWFyZ2luOiAwIDAgMCAtMS4xNDI5cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwMHJlbTtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci13aWR0aDogMC4yZW07XG4gIH1cblxuICAvKiBTdGF0aWMgU2hhcGUgKi9cbiAgJjpiZWZvcmUge1xuICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG5cbiAgLyogQWN0aXZlIFNoYXBlICovXG4gICY6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogJHthbmltYXRpb25zLmxvYWRlcn0gMC42cyBsaW5lYXI7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYm9yZGVyLWNvbG9yOiAke2NvbG9ycy5hY3RpdmV9IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB0cmFuc3BhcmVudDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkTG9hZGVyO1xuIl19 */"));
var _default = StyledLoader;
exports.default = _default;