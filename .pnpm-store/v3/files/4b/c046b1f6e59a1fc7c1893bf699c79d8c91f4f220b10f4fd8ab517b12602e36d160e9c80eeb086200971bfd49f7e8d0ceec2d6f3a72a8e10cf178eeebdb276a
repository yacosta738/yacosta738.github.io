
      import module2 from 'module';
      import path2 from 'path';
      import * as url2 from 'url';
      const require = module2.createRequire(import.meta.url);
      const __filename = url2.fileURLToPath(import.meta.url);
      const __dirname = path2.dirname(__filename);
      
import g,{t as y}from"i18next";import{fileURLToPath as c}from"url";import p from"@proload/core";import h from"@proload/plugin-tsm";var d=async(t,e)=>{let s=c(t),n;if(e){let o=/^\.*\//.test(e)?e:`./${e}`;n=c(new URL(o,t))}return p.use([h]),await p("astro-i18next",{mustExist:!1,cwd:s,filePath:n})},x=(t,e)=>{let s=t.indexOf(e);t.splice(s,1),t.unshift(e)},$=(t,e,s=null)=>{let n=y(t,{ns:s});if(n===t)return console.warn(`WARNING(astro-i18next): missing translation key ${t}.`),e;let o=/<([\w\d]+)([^>]*)>/gi,r=e.match(o);if(!r)return console.warn("WARNING(astro-i18next): default slot does not include any HTML tag to interpolate! You should use the `t` function directly."),n;let l=[];r.forEach(i=>{let[,u,L]=o.exec(i);l.push({name:u,attributes:L}),o.exec("")});let a=n;for(let i=0;i<l.length;i++){let u=l[i];a=a.replaceAll(`<${i}>`,`<${u.name}${u.attributes}>`),a=a.replaceAll(`</${i}>`,`</${u.name}>`)}return a},m=(t="/",e=null,s=import.meta.env.BASE_URL)=>{if(e||(e=g.language),t=t.replace(/^\/+|\/+$/g,""),t=t===""?"/":"/"+t+"/",s=s.replace(/^\/+|\/+$/g,""),s=s===""?"/":"/"+s+"/",t=t.startsWith(s)?t.slice(s.length):t.slice(1),!g.options.supportedLngs.includes(e))return console.warn(`WARNING(astro-i18next): "${e}" locale is not supported, add it to the supportedLngs in your astro config.`),s+t;let n=t.split("/");if(JSON.stringify(n)===JSON.stringify([""])||JSON.stringify(n)===JSON.stringify(["",""]))return e===g.options.supportedLngs[0]?s:`${s}${e}/`;let o=[...g.options.supportedLngs];o.slice(1);for(let r of o)if(n[0]===r){n.shift();break}return e!==g.options.supportedLngs[0]&&(n=[e,...n]),s+n.join("/")},A=(t,e=null,s=import.meta.env.BASE_URL)=>{let[n,,o,...r]=t.split("/");return n+"//"+o+m(r.join("/"),e,s)},I=t=>{t=t.replace(/^\/+/g,"");let e=t.split("/");if(JSON.stringify(e)===JSON.stringify([""])||JSON.stringify(e)===JSON.stringify(["",""]))return g.options.supportedLngs[0];let s=[...g.options.supportedLngs];s.slice(1);for(let n of s)if(e[0]===n)return n;return g.options.supportedLngs[0]},f=t=>{let e=Array.isArray(t),s=e?"[":"{";for(let n in t){if(t[n]===null||t[n]===void 0)continue;let o=null;switch(typeof t[n]){case"string":{o=`"${t[n]}"`;break}case"number":case"boolean":{o=t[n];break}case"object":{o=f(t[n]);break}case"function":{o=t[n].toString().replace(/\s+/g," ");break}case"symbol":{o=`Symbol("${t[n].description}")`;break}default:break}s+=e?`${o},`:`"${n}": ${o},`}return`${s}${e?"]":"}"}`};var P=t=>{let e=t==null?void 0:t.configPath;return{name:"astro-i18next",hooks:{"astro:config:setup":async({config:s,injectScript:n})=>{let o=await d(s.root,e);if(e&&!(o!=null&&o.value))throw new Error(`[astro-i18next]: Could not find a config file at ${JSON.stringify(e)}. Does the file exist?`);let r=o==null?void 0:o.value;if(!r.defaultLanguage||r.defaultLanguage==="")throw new Error("[astro-i18next]: you must set a `baseLanguage` in your astroI18nextConfig!");r.supportedLanguages||(r.supportedLanguages=[r.defaultLanguage]),r.supportedLanguages.includes(r.defaultLanguage)||r.supportedLanguages.unshift(r.defaultLanguage),r.supportedLanguages[0]!==r.defaultLanguage&&x(r.supportedLanguages,r.defaultLanguage),r.i18next.supportedLngs=[...r.supportedLanguages],r.i18next.fallbackLng=[...r.supportedLanguages];let l='import i18next from "i18next";',a="i18next";if(r.i18nextPlugins&&Object.keys(r.i18nextPlugins).length>0){for(let i of Object.keys(r.i18nextPlugins))l+=`import ${i} from "${r.i18nextPlugins[i]}";`;for(let i of Object.keys(r.i18nextPlugins))a+=`.use(${i.replace(/[{}]/g,"")})`}a+=`.init(${f(r.i18next)});`,n("page-ssr",l+a)}}}};export{P as default,I as detectLocaleFromPath,$ as interpolate,m as localizePath,A as localizeUrl};
