"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderBlock = renderBlock;
exports.renderInline = renderInline;
exports.renderMark = renderMark;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _VoidBlock = _interopRequireDefault(require("./components/VoidBlock"));

var _Shortcode = _interopRequireDefault(require("./components/Shortcode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const bottomMargin = '16px';
const headerStyles = `
  font-weight: 700;
  line-height: 1;
`;
const StyledH1 = (0, _styledBase.default)("h1", {
  target: "e19otniy0",
  label: "StyledH1"
})(headerStyles, ";font-size:32px;margin-top:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH2 = (0, _styledBase.default)("h2", {
  target: "e19otniy1",
  label: "StyledH2"
})(headerStyles, ";font-size:24px;margin-top:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH3 = (0, _styledBase.default)("h3", {
  target: "e19otniy2",
  label: "StyledH3"
})(headerStyles, ";font-size:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH4 = (0, _styledBase.default)("h4", {
  target: "e19otniy3",
  label: "StyledH4"
})(headerStyles, ";font-size:18px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvcmVuZGVyZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlDMEIiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9yZW5kZXJlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kaXNwbGF5LW5hbWUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbG9ycywgbGVuZ3RocyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgVm9pZEJsb2NrIGZyb20gJy4vY29tcG9uZW50cy9Wb2lkQmxvY2snO1xuaW1wb3J0IFNob3J0Y29kZSBmcm9tICcuL2NvbXBvbmVudHMvU2hvcnRjb2RlJztcblxuY29uc3QgYm90dG9tTWFyZ2luID0gJzE2cHgnO1xuXG5jb25zdCBoZWFkZXJTdHlsZXMgPSBgXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuYDtcblxuY29uc3QgU3R5bGVkSDEgPSBzdHlsZWQuaDFgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAzMnB4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDIgPSBzdHlsZWQuaDJgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyNHB4O1xuICBtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDMgPSBzdHlsZWQuaDNgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDQgPSBzdHlsZWQuaDRgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRINSA9IHN0eWxlZC5oNWBcbiAgJHtoZWFkZXJTdHlsZXN9O1xuICBmb250LXNpemU6IDE2cHg7XG4gIG1hcmdpbi10b3A6IDhweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEg2ID0gU3R5bGVkSDUud2l0aENvbXBvbmVudCgnaDYnKTtcblxuY29uc3QgU3R5bGVkUCA9IHN0eWxlZC5wYFxuICBtYXJnaW4tYm90dG9tOiAke2JvdHRvbU1hcmdpbn07XG5gO1xuXG5jb25zdCBTdHlsZWRCbG9ja1F1b3RlID0gc3R5bGVkLmJsb2NrcXVvdGVgXG4gIHBhZGRpbmctbGVmdDogMTZweDtcbiAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMDtcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuYDtcblxuY29uc3QgU3R5bGVkUHJlID0gc3R5bGVkLnByZWBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG5cbiAgJiA+IGNvZGUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICBjb2xvcjogI2NjYztcbiAgICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBTdHlsZWRDb2RlID0gc3R5bGVkLmNvZGVgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmJhY2tncm91bmR9O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgcGFkZGluZzogMCAycHg7XG4gIGZvbnQtc2l6ZTogODUlO1xuYDtcblxuY29uc3QgU3R5bGVkVWwgPSBzdHlsZWQudWxgXG4gIG1hcmdpbi1ib3R0b206ICR7Ym90dG9tTWFyZ2lufTtcbiAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkT2wgPSBTdHlsZWRVbC53aXRoQ29tcG9uZW50KCdvbCcpO1xuXG5jb25zdCBTdHlsZWRMaSA9IHN0eWxlZC5saWBcbiAgJiA+IHA6Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi10b3A6IDhweDtcbiAgfVxuXG4gICYgPiBwOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQSA9IHN0eWxlZC5hYFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuYDtcblxuY29uc3QgU3R5bGVkSHIgPSBzdHlsZWQuaHJgXG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkVGFibGUgPSBzdHlsZWQudGFibGVgXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5gO1xuXG5jb25zdCBTdHlsZWRUZCA9IHN0eWxlZC50ZGBcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XG4gIHBhZGRpbmc6IDhweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmA7XG5cbi8qKlxuICogU2xhdGUgdXNlcyBSZWFjdCBjb21wb25lbnRzIHRvIHJlbmRlciBlYWNoIHR5cGUgb2Ygbm9kZSB0aGF0IGl0IHJlY2VpdmVzLlxuICogVGhpcyBpcyB0aGUgY2xvc2VzdCB0aGluZyBTbGF0ZSBoYXMgdG8gYSBzY2hlbWEgZGVmaW5pdGlvbi4gVGhlIHR5cGVzIGFyZSBzZXRcbiAqIGJ5IHVzIHdoZW4gd2UgbWFudWFsbHkgZGVzZXJpYWxpemUgZnJvbSBSZW1hcmsncyBNREFTVCB0byBTbGF0ZSdzIEFTVC5cbiAqL1xuXG4vKipcbiAqIE1hcmsgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBCb2xkKHByb3BzKSB7XG4gIHJldHVybiA8c3Ryb25nPntwcm9wcy5jaGlsZHJlbn08L3N0cm9uZz47XG59XG5cbmZ1bmN0aW9uIEl0YWxpYyhwcm9wcykge1xuICByZXR1cm4gPGVtPntwcm9wcy5jaGlsZHJlbn08L2VtPjtcbn1cblxuZnVuY3Rpb24gU3RyaWtldGhyb3VnaChwcm9wcykge1xuICByZXR1cm4gPHM+e3Byb3BzLmNoaWxkcmVufTwvcz47XG59XG5cbmZ1bmN0aW9uIENvZGUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRDb2RlPntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+O1xufVxuXG4vKipcbiAqIE5vZGUgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBQYXJhZ3JhcGgocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRQIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRQPjtcbn1cblxuZnVuY3Rpb24gTGlzdEl0ZW0ocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRMaSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkTGk+O1xufVxuXG5mdW5jdGlvbiBRdW90ZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEJsb2NrUXVvdGUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEJsb2NrUXVvdGU+O1xufVxuXG5mdW5jdGlvbiBDb2RlQmxvY2socHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkUHJlPlxuICAgICAgPFN0eWxlZENvZGUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+XG4gICAgPC9TdHlsZWRQcmU+XG4gICk7XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdPbmUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRIMSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDE+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nVHdvKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDIgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgyPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ1RocmVlKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDMgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgzPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ0ZvdXIocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDQ+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nRml2ZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEg1IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRINT47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdTaXgocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINiB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDY+O1xufVxuXG5mdW5jdGlvbiBUYWJsZShwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxTdHlsZWRUYWJsZT5cbiAgICAgIDx0Ym9keSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdGJvZHk+XG4gICAgPC9TdHlsZWRUYWJsZT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gVGFibGVSb3cocHJvcHMpIHtcbiAgcmV0dXJuIDx0ciB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdHI+O1xufVxuXG5mdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRUZCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkVGQ+O1xufVxuXG5mdW5jdGlvbiBUaGVtYXRpY0JyZWFrKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEhyXG4gICAgICB7Li4ucHJvcHMuYXR0cmlidXRlc31cbiAgICAgIGNzcz17XG4gICAgICAgIHByb3BzLmVkaXRvci5pc1NlbGVjdGVkKHByb3BzLm5vZGUpICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgICAgIGBcbiAgICAgIH1cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBCcmVhayhwcm9wcykge1xuICByZXR1cm4gPGJyIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSAvPjtcbn1cblxuZnVuY3Rpb24gQnVsbGV0ZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkVWwgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFVsPjtcbn1cblxuZnVuY3Rpb24gTnVtYmVyZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZE9sIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSBzdGFydD17cHJvcHMubm9kZS5kYXRhLmdldCgnc3RhcnQnKSB8fCAxfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1N0eWxlZE9sPlxuICApO1xufVxuXG5mdW5jdGlvbiBMaW5rKHByb3BzKSB7XG4gIGNvbnN0IGRhdGEgPSBwcm9wcy5ub2RlLmdldCgnZGF0YScpO1xuICBjb25zdCB1cmwgPSBkYXRhLmdldCgndXJsJyk7XG4gIGNvbnN0IHRpdGxlID0gZGF0YS5nZXQoJ3RpdGxlJykgfHwgdXJsO1xuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEEgaHJlZj17dXJsfSB0aXRsZT17dGl0bGV9IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1N0eWxlZEE+XG4gICk7XG59XG5cbmZ1bmN0aW9uIEltYWdlKHByb3BzKSB7XG4gIGNvbnN0IGRhdGEgPSBwcm9wcy5ub2RlLmdldCgnZGF0YScpO1xuICBjb25zdCBtYXJrcyA9IGRhdGEuZ2V0KCdtYXJrcycpO1xuICBjb25zdCB1cmwgPSBkYXRhLmdldCgndXJsJyk7XG4gIGNvbnN0IHRpdGxlID0gZGF0YS5nZXQoJ3RpdGxlJyk7XG4gIGNvbnN0IGFsdCA9IGRhdGEuZ2V0KCdhbHQnKTtcbiAgY29uc3QgaW1hZ2UgPSA8aW1nIHNyYz17dXJsfSB0aXRsZT17dGl0bGV9IGFsdD17YWx0fSB7Li4ucHJvcHMuYXR0cmlidXRlc30gLz47XG4gIGNvbnN0IHJlc3VsdCA9ICFtYXJrc1xuICAgID8gaW1hZ2VcbiAgICA6IG1hcmtzLnJlZHVjZSgoYWNjLCBtYXJrKSA9PiB7XG4gICAgICAgIHJldHVybiByZW5kZXJNYXJrKHsgbWFyaywgY2hpbGRyZW46IGFjYyB9KTtcbiAgICAgIH0sIGltYWdlKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck1hcmsoKSB7XG4gIHJldHVybiBwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5tYXJrLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2JvbGQnOlxuICAgICAgICByZXR1cm4gPEJvbGQgey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2l0YWxpYyc6XG4gICAgICAgIHJldHVybiA8SXRhbGljIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdzdHJpa2V0aHJvdWdoJzpcbiAgICAgICAgcmV0dXJuIDxTdHJpa2V0aHJvdWdoIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdjb2RlJzpcbiAgICAgICAgcmV0dXJuIDxDb2RlIHsuLi5wcm9wc30gLz47XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVySW5saW5lKCkge1xuICByZXR1cm4gcHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMubm9kZS50eXBlKSB7XG4gICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgcmV0dXJuIDxMaW5rIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdpbWFnZSc6XG4gICAgICAgIHJldHVybiA8SW1hZ2Ugey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2JyZWFrJzpcbiAgICAgICAgcmV0dXJuIDxCcmVhayB7Li4ucHJvcHN9IC8+O1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckJsb2NrKHsgY2xhc3NOYW1lV3JhcHBlciwgY29kZUJsb2NrQ29tcG9uZW50IH0pIHtcbiAgcmV0dXJuIHByb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLm5vZGUudHlwZSkge1xuICAgICAgY2FzZSAncGFyYWdyYXBoJzpcbiAgICAgICAgcmV0dXJuIDxQYXJhZ3JhcGggey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2xpc3QtaXRlbSc6XG4gICAgICAgIHJldHVybiA8TGlzdEl0ZW0gey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ3F1b3RlJzpcbiAgICAgICAgcmV0dXJuIDxRdW90ZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnY29kZS1ibG9jayc6XG4gICAgICAgIGlmIChjb2RlQmxvY2tDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgICA8U2hvcnRjb2RlXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lV3JhcHBlcj17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgICAgICAgICAgICB0eXBlT3ZlcmxvYWQ9XCJjb2RlLWJsb2NrXCJcbiAgICAgICAgICAgICAgICBkYXRhS2V5PXtmYWxzZX1cbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1ZvaWRCbG9jaz5cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8Q29kZUJsb2NrIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdoZWFkaW5nLW9uZSc6XG4gICAgICAgIHJldHVybiA8SGVhZGluZ09uZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy10d28nOlxuICAgICAgICByZXR1cm4gPEhlYWRpbmdUd28gey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2hlYWRpbmctdGhyZWUnOlxuICAgICAgICByZXR1cm4gPEhlYWRpbmdUaHJlZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy1mb3VyJzpcbiAgICAgICAgcmV0dXJuIDxIZWFkaW5nRm91ciB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy1maXZlJzpcbiAgICAgICAgcmV0dXJuIDxIZWFkaW5nRml2ZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy1zaXgnOlxuICAgICAgICByZXR1cm4gPEhlYWRpbmdTaXggey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgcmV0dXJuIDxUYWJsZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAndGFibGUtcm93JzpcbiAgICAgICAgcmV0dXJuIDxUYWJsZVJvdyB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAndGFibGUtY2VsbCc6XG4gICAgICAgIHJldHVybiA8VGFibGVDZWxsIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICd0aGVtYXRpYy1icmVhayc6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgPFRoZW1hdGljQnJlYWsgZWRpdG9yPXtwcm9wcy5lZGl0b3J9IG5vZGU9e3Byb3BzLm5vZGV9IC8+XG4gICAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICAgICk7XG4gICAgICBjYXNlICdidWxsZXRlZC1saXN0JzpcbiAgICAgICAgcmV0dXJuIDxCdWxsZXRlZExpc3Qgey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ251bWJlcmVkLWxpc3QnOlxuICAgICAgICByZXR1cm4gPE51bWJlcmVkTGlzdCB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnc2hvcnRjb2RlJzpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8Vm9pZEJsb2NrIHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8U2hvcnRjb2RlIGNsYXNzTmFtZVdyYXBwZXI9e2NsYXNzTmFtZVdyYXBwZXJ9IHsuLi5wcm9wc30gLz5cbiAgICAgICAgICA8L1ZvaWRCbG9jaz5cbiAgICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0= */"));
const StyledH5 = (0, _styledBase.default)("h5", {
  target: "e19otniy4",
  label: "StyledH5"
})(headerStyles, ";font-size:16px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH6 = StyledH5.withComponent('h6', {
  target: "e19otniy15",
  label: "StyledH6"
});
const StyledP = (0, _styledBase.default)("p", {
  target: "e19otniy5",
  label: "StyledP"
})("margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledBlockQuote = (0, _styledBase.default)("blockquote", {
  target: "e19otniy6",
  label: "StyledBlockQuote"
})("padding-left:16px;border-left:3px solid ", _netlifyCmsUiDefault.colors.background, ";margin-left:0;margin-right:0;margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvcmVuZGVyZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1EMEMiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9yZW5kZXJlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kaXNwbGF5LW5hbWUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbG9ycywgbGVuZ3RocyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgVm9pZEJsb2NrIGZyb20gJy4vY29tcG9uZW50cy9Wb2lkQmxvY2snO1xuaW1wb3J0IFNob3J0Y29kZSBmcm9tICcuL2NvbXBvbmVudHMvU2hvcnRjb2RlJztcblxuY29uc3QgYm90dG9tTWFyZ2luID0gJzE2cHgnO1xuXG5jb25zdCBoZWFkZXJTdHlsZXMgPSBgXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuYDtcblxuY29uc3QgU3R5bGVkSDEgPSBzdHlsZWQuaDFgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAzMnB4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDIgPSBzdHlsZWQuaDJgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyNHB4O1xuICBtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDMgPSBzdHlsZWQuaDNgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDQgPSBzdHlsZWQuaDRgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRINSA9IHN0eWxlZC5oNWBcbiAgJHtoZWFkZXJTdHlsZXN9O1xuICBmb250LXNpemU6IDE2cHg7XG4gIG1hcmdpbi10b3A6IDhweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEg2ID0gU3R5bGVkSDUud2l0aENvbXBvbmVudCgnaDYnKTtcblxuY29uc3QgU3R5bGVkUCA9IHN0eWxlZC5wYFxuICBtYXJnaW4tYm90dG9tOiAke2JvdHRvbU1hcmdpbn07XG5gO1xuXG5jb25zdCBTdHlsZWRCbG9ja1F1b3RlID0gc3R5bGVkLmJsb2NrcXVvdGVgXG4gIHBhZGRpbmctbGVmdDogMTZweDtcbiAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMDtcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuYDtcblxuY29uc3QgU3R5bGVkUHJlID0gc3R5bGVkLnByZWBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG5cbiAgJiA+IGNvZGUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICBjb2xvcjogI2NjYztcbiAgICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBTdHlsZWRDb2RlID0gc3R5bGVkLmNvZGVgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmJhY2tncm91bmR9O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgcGFkZGluZzogMCAycHg7XG4gIGZvbnQtc2l6ZTogODUlO1xuYDtcblxuY29uc3QgU3R5bGVkVWwgPSBzdHlsZWQudWxgXG4gIG1hcmdpbi1ib3R0b206ICR7Ym90dG9tTWFyZ2lufTtcbiAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkT2wgPSBTdHlsZWRVbC53aXRoQ29tcG9uZW50KCdvbCcpO1xuXG5jb25zdCBTdHlsZWRMaSA9IHN0eWxlZC5saWBcbiAgJiA+IHA6Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi10b3A6IDhweDtcbiAgfVxuXG4gICYgPiBwOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQSA9IHN0eWxlZC5hYFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuYDtcblxuY29uc3QgU3R5bGVkSHIgPSBzdHlsZWQuaHJgXG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkVGFibGUgPSBzdHlsZWQudGFibGVgXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5gO1xuXG5jb25zdCBTdHlsZWRUZCA9IHN0eWxlZC50ZGBcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XG4gIHBhZGRpbmc6IDhweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmA7XG5cbi8qKlxuICogU2xhdGUgdXNlcyBSZWFjdCBjb21wb25lbnRzIHRvIHJlbmRlciBlYWNoIHR5cGUgb2Ygbm9kZSB0aGF0IGl0IHJlY2VpdmVzLlxuICogVGhpcyBpcyB0aGUgY2xvc2VzdCB0aGluZyBTbGF0ZSBoYXMgdG8gYSBzY2hlbWEgZGVmaW5pdGlvbi4gVGhlIHR5cGVzIGFyZSBzZXRcbiAqIGJ5IHVzIHdoZW4gd2UgbWFudWFsbHkgZGVzZXJpYWxpemUgZnJvbSBSZW1hcmsncyBNREFTVCB0byBTbGF0ZSdzIEFTVC5cbiAqL1xuXG4vKipcbiAqIE1hcmsgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBCb2xkKHByb3BzKSB7XG4gIHJldHVybiA8c3Ryb25nPntwcm9wcy5jaGlsZHJlbn08L3N0cm9uZz47XG59XG5cbmZ1bmN0aW9uIEl0YWxpYyhwcm9wcykge1xuICByZXR1cm4gPGVtPntwcm9wcy5jaGlsZHJlbn08L2VtPjtcbn1cblxuZnVuY3Rpb24gU3RyaWtldGhyb3VnaChwcm9wcykge1xuICByZXR1cm4gPHM+e3Byb3BzLmNoaWxkcmVufTwvcz47XG59XG5cbmZ1bmN0aW9uIENvZGUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRDb2RlPntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+O1xufVxuXG4vKipcbiAqIE5vZGUgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBQYXJhZ3JhcGgocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRQIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRQPjtcbn1cblxuZnVuY3Rpb24gTGlzdEl0ZW0ocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRMaSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkTGk+O1xufVxuXG5mdW5jdGlvbiBRdW90ZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEJsb2NrUXVvdGUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEJsb2NrUXVvdGU+O1xufVxuXG5mdW5jdGlvbiBDb2RlQmxvY2socHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkUHJlPlxuICAgICAgPFN0eWxlZENvZGUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+XG4gICAgPC9TdHlsZWRQcmU+XG4gICk7XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdPbmUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRIMSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDE+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nVHdvKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDIgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgyPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ1RocmVlKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDMgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgzPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ0ZvdXIocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDQ+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nRml2ZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEg1IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRINT47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdTaXgocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINiB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDY+O1xufVxuXG5mdW5jdGlvbiBUYWJsZShwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxTdHlsZWRUYWJsZT5cbiAgICAgIDx0Ym9keSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdGJvZHk+XG4gICAgPC9TdHlsZWRUYWJsZT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gVGFibGVSb3cocHJvcHMpIHtcbiAgcmV0dXJuIDx0ciB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdHI+O1xufVxuXG5mdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRUZCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkVGQ+O1xufVxuXG5mdW5jdGlvbiBUaGVtYXRpY0JyZWFrKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEhyXG4gICAgICB7Li4ucHJvcHMuYXR0cmlidXRlc31cbiAgICAgIGNzcz17XG4gICAgICAgIHByb3BzLmVkaXRvci5pc1NlbGVjdGVkKHByb3BzLm5vZGUpICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgICAgIGBcbiAgICAgIH1cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBCcmVhayhwcm9wcykge1xuICByZXR1cm4gPGJyIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSAvPjtcbn1cblxuZnVuY3Rpb24gQnVsbGV0ZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkVWwgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFVsPjtcbn1cblxuZnVuY3Rpb24gTnVtYmVyZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZE9sIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSBzdGFydD17cHJvcHMubm9kZS5kYXRhLmdldCgnc3RhcnQnKSB8fCAxfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1N0eWxlZE9sPlxuICApO1xufVxuXG5mdW5jdGlvbiBMaW5rKHByb3BzKSB7XG4gIGNvbnN0IGRhdGEgPSBwcm9wcy5ub2RlLmdldCgnZGF0YScpO1xuICBjb25zdCB1cmwgPSBkYXRhLmdldCgndXJsJyk7XG4gIGNvbnN0IHRpdGxlID0gZGF0YS5nZXQoJ3RpdGxlJykgfHwgdXJsO1xuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEEgaHJlZj17dXJsfSB0aXRsZT17dGl0bGV9IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1N0eWxlZEE+XG4gICk7XG59XG5cbmZ1bmN0aW9uIEltYWdlKHByb3BzKSB7XG4gIGNvbnN0IGRhdGEgPSBwcm9wcy5ub2RlLmdldCgnZGF0YScpO1xuICBjb25zdCBtYXJrcyA9IGRhdGEuZ2V0KCdtYXJrcycpO1xuICBjb25zdCB1cmwgPSBkYXRhLmdldCgndXJsJyk7XG4gIGNvbnN0IHRpdGxlID0gZGF0YS5nZXQoJ3RpdGxlJyk7XG4gIGNvbnN0IGFsdCA9IGRhdGEuZ2V0KCdhbHQnKTtcbiAgY29uc3QgaW1hZ2UgPSA8aW1nIHNyYz17dXJsfSB0aXRsZT17dGl0bGV9IGFsdD17YWx0fSB7Li4ucHJvcHMuYXR0cmlidXRlc30gLz47XG4gIGNvbnN0IHJlc3VsdCA9ICFtYXJrc1xuICAgID8gaW1hZ2VcbiAgICA6IG1hcmtzLnJlZHVjZSgoYWNjLCBtYXJrKSA9PiB7XG4gICAgICAgIHJldHVybiByZW5kZXJNYXJrKHsgbWFyaywgY2hpbGRyZW46IGFjYyB9KTtcbiAgICAgIH0sIGltYWdlKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck1hcmsoKSB7XG4gIHJldHVybiBwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5tYXJrLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2JvbGQnOlxuICAgICAgICByZXR1cm4gPEJvbGQgey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2l0YWxpYyc6XG4gICAgICAgIHJldHVybiA8SXRhbGljIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdzdHJpa2V0aHJvdWdoJzpcbiAgICAgICAgcmV0dXJuIDxTdHJpa2V0aHJvdWdoIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdjb2RlJzpcbiAgICAgICAgcmV0dXJuIDxDb2RlIHsuLi5wcm9wc30gLz47XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVySW5saW5lKCkge1xuICByZXR1cm4gcHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMubm9kZS50eXBlKSB7XG4gICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgcmV0dXJuIDxMaW5rIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdpbWFnZSc6XG4gICAgICAgIHJldHVybiA8SW1hZ2Ugey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2JyZWFrJzpcbiAgICAgICAgcmV0dXJuIDxCcmVhayB7Li4ucHJvcHN9IC8+O1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckJsb2NrKHsgY2xhc3NOYW1lV3JhcHBlciwgY29kZUJsb2NrQ29tcG9uZW50IH0pIHtcbiAgcmV0dXJuIHByb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLm5vZGUudHlwZSkge1xuICAgICAgY2FzZSAncGFyYWdyYXBoJzpcbiAgICAgICAgcmV0dXJuIDxQYXJhZ3JhcGggey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2xpc3QtaXRlbSc6XG4gICAgICAgIHJldHVybiA8TGlzdEl0ZW0gey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ3F1b3RlJzpcbiAgICAgICAgcmV0dXJuIDxRdW90ZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnY29kZS1ibG9jayc6XG4gICAgICAgIGlmIChjb2RlQmxvY2tDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgICA8U2hvcnRjb2RlXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lV3JhcHBlcj17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgICAgICAgICAgICB0eXBlT3ZlcmxvYWQ9XCJjb2RlLWJsb2NrXCJcbiAgICAgICAgICAgICAgICBkYXRhS2V5PXtmYWxzZX1cbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1ZvaWRCbG9jaz5cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8Q29kZUJsb2NrIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdoZWFkaW5nLW9uZSc6XG4gICAgICAgIHJldHVybiA8SGVhZGluZ09uZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy10d28nOlxuICAgICAgICByZXR1cm4gPEhlYWRpbmdUd28gey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2hlYWRpbmctdGhyZWUnOlxuICAgICAgICByZXR1cm4gPEhlYWRpbmdUaHJlZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy1mb3VyJzpcbiAgICAgICAgcmV0dXJuIDxIZWFkaW5nRm91ciB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy1maXZlJzpcbiAgICAgICAgcmV0dXJuIDxIZWFkaW5nRml2ZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnaGVhZGluZy1zaXgnOlxuICAgICAgICByZXR1cm4gPEhlYWRpbmdTaXggey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgcmV0dXJuIDxUYWJsZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAndGFibGUtcm93JzpcbiAgICAgICAgcmV0dXJuIDxUYWJsZVJvdyB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAndGFibGUtY2VsbCc6XG4gICAgICAgIHJldHVybiA8VGFibGVDZWxsIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICd0aGVtYXRpYy1icmVhayc6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgPFRoZW1hdGljQnJlYWsgZWRpdG9yPXtwcm9wcy5lZGl0b3J9IG5vZGU9e3Byb3BzLm5vZGV9IC8+XG4gICAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICAgICk7XG4gICAgICBjYXNlICdidWxsZXRlZC1saXN0JzpcbiAgICAgICAgcmV0dXJuIDxCdWxsZXRlZExpc3Qgey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ251bWJlcmVkLWxpc3QnOlxuICAgICAgICByZXR1cm4gPE51bWJlcmVkTGlzdCB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnc2hvcnRjb2RlJzpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8Vm9pZEJsb2NrIHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8U2hvcnRjb2RlIGNsYXNzTmFtZVdyYXBwZXI9e2NsYXNzTmFtZVdyYXBwZXJ9IHsuLi5wcm9wc30gLz5cbiAgICAgICAgICA8L1ZvaWRCbG9jaz5cbiAgICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0= */"));
const StyledPre = (0, _styledBase.default)("pre", {
  target: "e19otniy7",
  label: "StyledPre"
})("margin-bottom:", bottomMargin, ";white-space:pre-wrap;& > code{display:block;width:100%;overflow-y:auto;background-color:#000;color:#ccc;border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";padding:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledCode = (0, _styledBase.default)("code", {
  target: "e19otniy8",
  label: "StyledCode"
})("background-color:", _netlifyCmsUiDefault.colors.background, ";border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";padding:0 2px;font-size:85%;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledUl = (0, _styledBase.default)("ul", {
  target: "e19otniy9",
  label: "StyledUl"
})("margin-bottom:", bottomMargin, ";padding-left:30px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledOl = StyledUl.withComponent('ol', {
  target: "e19otniy16",
  label: "StyledOl"
});
const StyledLi = (0, _styledBase.default)("li", {
  target: "e19otniy10",
  label: "StyledLi"
})(process.env.NODE_ENV === "production" ? {
  name: "1eoco3j",
  styles: "& > p:first-child{margin-top:8px;}& > p:last-child{margin-bottom:8px;}"
} : {
  name: "1eoco3j",
  styles: "& > p:first-child{margin-top:8px;}& > p:last-child{margin-bottom:8px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledA = (0, _styledBase.default)("a", {
  target: "e19otniy11",
  label: "StyledA"
})(process.env.NODE_ENV === "production" ? {
  name: "r1lz23",
  styles: "text-decoration:underline;font-size:inherit;"
} : {
  name: "r1lz23",
  styles: "text-decoration:underline;font-size:inherit;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledHr = (0, _styledBase.default)("hr", {
  target: "e19otniy12",
  label: "StyledHr"
})(process.env.NODE_ENV === "production" ? {
  name: "pqqqdc",
  styles: "border:1px solid;margin-bottom:16px;"
} : {
  name: "pqqqdc",
  styles: "border:1px solid;margin-bottom:16px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTable = (0, _styledBase.default)("table", {
  target: "e19otniy13",
  label: "StyledTable"
})(process.env.NODE_ENV === "production" ? {
  name: "1uhv8nx",
  styles: "border-collapse:collapse;"
} : {
  name: "1uhv8nx",
  styles: "border-collapse:collapse;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTd = (0, _styledBase.default)("td", {
  target: "e19otniy14",
  label: "StyledTd"
})(process.env.NODE_ENV === "production" ? {
  name: "1fi1vzc",
  styles: "border:2px solid black;padding:8px;text-align:left;"
} : {
  name: "1fi1vzc",
  styles: "border:2px solid black;padding:8px;text-align:left;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
/**
 * Slate uses React components to render each type of node that it receives.
 * This is the closest thing Slate has to a schema definition. The types are set
 * by us when we manually deserialize from Remark's MDAST to Slate's AST.
 */

/**
 * Mark Components
 */

function Bold(props) {
  return (0, _core.jsx)("strong", null, props.children);
}

function Italic(props) {
  return (0, _core.jsx)("em", null, props.children);
}

function Strikethrough(props) {
  return (0, _core.jsx)("s", null, props.children);
}

function Code(props) {
  return (0, _core.jsx)(StyledCode, null, props.children);
}
/**
 * Node Components
 */


function Paragraph(props) {
  return (0, _core.jsx)(StyledP, props.attributes, props.children);
}

function ListItem(props) {
  return (0, _core.jsx)(StyledLi, props.attributes, props.children);
}

function Quote(props) {
  return (0, _core.jsx)(StyledBlockQuote, props.attributes, props.children);
}

function CodeBlock(props) {
  return (0, _core.jsx)(StyledPre, null, (0, _core.jsx)(StyledCode, props.attributes, props.children));
}

function HeadingOne(props) {
  return (0, _core.jsx)(StyledH1, props.attributes, props.children);
}

function HeadingTwo(props) {
  return (0, _core.jsx)(StyledH2, props.attributes, props.children);
}

function HeadingThree(props) {
  return (0, _core.jsx)(StyledH3, props.attributes, props.children);
}

function HeadingFour(props) {
  return (0, _core.jsx)(StyledH4, props.attributes, props.children);
}

function HeadingFive(props) {
  return (0, _core.jsx)(StyledH5, props.attributes, props.children);
}

function HeadingSix(props) {
  return (0, _core.jsx)(StyledH6, props.attributes, props.children);
}

function Table(props) {
  return (0, _core.jsx)(StyledTable, null, (0, _core.jsx)("tbody", props.attributes, props.children));
}

function TableRow(props) {
  return (0, _core.jsx)("tr", props.attributes, props.children);
}

function TableCell(props) {
  return (0, _core.jsx)(StyledTd, props.attributes, props.children);
}

function ThematicBreak(props) {
  return (0, _core.jsx)(StyledHr, _extends({}, props.attributes, {
    css: props.editor.isSelected(props.node) && /*#__PURE__*/(0, _core.css)("box-shadow:0 0 0 2px ", _netlifyCmsUiDefault.colors.active, ";border-radius:8px;color:", _netlifyCmsUiDefault.colors.active, ";;label:ThematicBreak;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }));
}

function Break(props) {
  return (0, _core.jsx)("br", props.attributes);
}

function BulletedList(props) {
  return (0, _core.jsx)(StyledUl, props.attributes, props.children);
}

function NumberedList(props) {
  return (0, _core.jsx)(StyledOl, _extends({}, props.attributes, {
    start: props.node.data.get('start') || 1
  }), props.children);
}

function Link(props) {
  const data = props.node.get('data');
  const url = data.get('url');
  const title = data.get('title') || url;
  return (0, _core.jsx)(StyledA, _extends({
    href: url,
    title: title
  }, props.attributes), props.children);
}

function Image(props) {
  const data = props.node.get('data');
  const marks = data.get('marks');
  const url = data.get('url');
  const title = data.get('title');
  const alt = data.get('alt');
  const image = (0, _core.jsx)("img", _extends({
    src: url,
    title: title,
    alt: alt
  }, props.attributes));
  const result = !marks ? image : marks.reduce((acc, mark) => {
    return renderMark({
      mark,
      children: acc
    });
  }, image);
  return result;
}

function renderMark() {
  return props => {
    switch (props.mark.type) {
      case 'bold':
        return (0, _core.jsx)(Bold, props);

      case 'italic':
        return (0, _core.jsx)(Italic, props);

      case 'strikethrough':
        return (0, _core.jsx)(Strikethrough, props);

      case 'code':
        return (0, _core.jsx)(Code, props);
    }
  };
}

function renderInline() {
  return props => {
    switch (props.node.type) {
      case 'link':
        return (0, _core.jsx)(Link, props);

      case 'image':
        return (0, _core.jsx)(Image, props);

      case 'break':
        return (0, _core.jsx)(Break, props);
    }
  };
}

function renderBlock(_ref) {
  let {
    classNameWrapper,
    codeBlockComponent
  } = _ref;
  return props => {
    switch (props.node.type) {
      case 'paragraph':
        return (0, _core.jsx)(Paragraph, props);

      case 'list-item':
        return (0, _core.jsx)(ListItem, props);

      case 'quote':
        return (0, _core.jsx)(Quote, props);

      case 'code-block':
        if (codeBlockComponent) {
          return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(_Shortcode.default, _extends({
            classNameWrapper: classNameWrapper,
            typeOverload: "code-block",
            dataKey: false
          }, props)));
        }

        return (0, _core.jsx)(CodeBlock, props);

      case 'heading-one':
        return (0, _core.jsx)(HeadingOne, props);

      case 'heading-two':
        return (0, _core.jsx)(HeadingTwo, props);

      case 'heading-three':
        return (0, _core.jsx)(HeadingThree, props);

      case 'heading-four':
        return (0, _core.jsx)(HeadingFour, props);

      case 'heading-five':
        return (0, _core.jsx)(HeadingFive, props);

      case 'heading-six':
        return (0, _core.jsx)(HeadingSix, props);

      case 'table':
        return (0, _core.jsx)(Table, props);

      case 'table-row':
        return (0, _core.jsx)(TableRow, props);

      case 'table-cell':
        return (0, _core.jsx)(TableCell, props);

      case 'thematic-break':
        return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(ThematicBreak, {
          editor: props.editor,
          node: props.node
        }));

      case 'bulleted-list':
        return (0, _core.jsx)(BulletedList, props);

      case 'numbered-list':
        return (0, _core.jsx)(NumberedList, props);

      case 'shortcode':
        return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(_Shortcode.default, _extends({
          classNameWrapper: classNameWrapper
        }, props)));
    }
  };
}