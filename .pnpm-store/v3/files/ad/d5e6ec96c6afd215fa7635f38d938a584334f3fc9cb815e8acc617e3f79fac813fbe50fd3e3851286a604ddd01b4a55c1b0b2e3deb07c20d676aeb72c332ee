"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@emotion/core");

var _reactDatetime = _interopRequireDefault(require("react-datetime/css/react-datetime.css"));

var _reactDatetime2 = _interopRequireDefault(require("react-datetime"));

var _moment = _interopRequireDefault(require("moment"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _ref = process.env.NODE_ENV === "production" ? {
  name: "6zq5jn-NowButton",
  styles: "position:absolute;right:20px;transform:translateY(-40px);width:fit-content;z-index:1;;label:NowButton;"
} : {
  name: "6zq5jn-NowButton",
  styles: "position:absolute;right:20px;transform:translateY(-40px);width:fit-content;z-index:1;;label:NowButton;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWWMiLCJmaWxlIjoiLi4vLi4vc3JjL0RhdGVUaW1lQ29udHJvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBqc3gsIGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHJlYWN0RGF0ZVRpbWVTdHlsZXMgZnJvbSAncmVhY3QtZGF0ZXRpbWUvY3NzL3JlYWN0LWRhdGV0aW1lLmNzcyc7XG5pbXBvcnQgRGF0ZVRpbWUgZnJvbSAncmVhY3QtZGF0ZXRpbWUnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgYnV0dG9ucyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuXG5mdW5jdGlvbiBOb3dCdXR0b24oeyB0LCBoYW5kbGVDaGFuZ2UgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHJpZ2h0OiAyMHB4O1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTQwcHgpO1xuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICBgfVxuICAgID5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgJHtidXR0b25zLmJ1dHRvbn1cbiAgICAgICAgICAke2J1dHRvbnMud2lkZ2V0fVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKG1vbWVudCgpKTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLm5vdycpfVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGVUaW1lQ29udHJvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZmllbGQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBmb3JJRDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWVXcmFwcGVyOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2V0QWN0aXZlU3R5bGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0SW5hY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICB9O1xuXG4gIGdldEZvcm1hdHMoKSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBmb3JtYXQgPSBmaWVsZC5nZXQoJ2Zvcm1hdCcpO1xuXG4gICAgLy8gZGF0ZUZvcm1hdCBhbmQgdGltZUZvcm1hdCBhcmUgc3RyaWN0bHkgZm9yIG1vZGlmeWluZ1xuICAgIC8vIGlucHV0IGZpZWxkIHdpdGggdGhlIGRhdGUvdGltZSBwaWNrZXJzXG4gICAgY29uc3QgZGF0ZUZvcm1hdCA9IGZpZWxkLmdldCgnZGF0ZV9mb3JtYXQnKTtcbiAgICAvLyBzaG93IHRpbWUtcGlja2VyPyBmYWxzZSBoaWRlcyBpdCwgdHJ1ZSBzaG93cyBpdCB1c2luZyBkZWZhdWx0IGZvcm1hdFxuICAgIGxldCB0aW1lRm9ybWF0ID0gZmllbGQuZ2V0KCd0aW1lX2Zvcm1hdCcpO1xuICAgIGlmICh0eXBlb2YgdGltZUZvcm1hdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRpbWVGb3JtYXQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmb3JtYXQsXG4gICAgICBkYXRlRm9ybWF0LFxuICAgICAgdGltZUZvcm1hdCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZmllbGQuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGdldFBpY2tlclV0YygpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHBpY2tlclV0YyA9IGZpZWxkLmdldCgncGlja2VyX3V0YycpO1xuICAgIHJldHVybiBwaWNrZXJVdGM7XG4gIH1cblxuICBmb3JtYXRzID0gdGhpcy5nZXRGb3JtYXRzKCk7XG4gIGRlZmF1bHRWYWx1ZSA9IHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XG4gIHBpY2tlclV0YyA9IHRoaXMuZ2V0UGlja2VyVXRjKCk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBkYXRlIGFzIGRlZmF1bHQgdmFsdWUgaWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQgYW5kIGRlZmF1bHQgaXMgYWJzZW50LiBBblxuICAgICAqIGVtcHR5IGRlZmF1bHQgc3RyaW5nIG1lYW5zIHRoZSB2YWx1ZSBpcyBpbnRlbnRpb25hbGx5IGJsYW5rLlxuICAgICAqL1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCA/IG5ldyBEYXRlKCkgOiB0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBEYXRlIGlzIHZhbGlkIGlmIGRhdGV0aW1lIGlzIGEgbW9tZW50IG9yIERhdGUgb2JqZWN0IG90aGVyd2lzZSBpdCdzIGEgc3RyaW5nLlxuICAvLyBIYW5kbGUgdGhlIGVtcHR5IGNhc2UsIGlmIHRoZSB1c2VyIHdhbnRzIHRvIGVtcHR5IHRoZSBmaWVsZC5cbiAgaXNWYWxpZERhdGUgPSBkYXRldGltZSA9PlxuICAgIG1vbWVudC5pc01vbWVudChkYXRldGltZSkgfHwgZGF0ZXRpbWUgaW5zdGFuY2VvZiBEYXRlIHx8IGRhdGV0aW1lID09PSAnJztcblxuICBoYW5kbGVDaGFuZ2UgPSBkYXRldGltZSA9PiB7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkYXRlIG9ubHkgaWYgaXQgaXMgdmFsaWQuXG4gICAgICovXG4gICAgaWYgKCF0aGlzLmlzVmFsaWREYXRlKGRhdGV0aW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBmb3JtYXQgfSA9IHRoaXMuZm9ybWF0cztcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2UgYSBmb3JtYXR0ZWQgc3RyaW5nIG9ubHkgaWYgYSBmb3JtYXQgaXMgc2V0IGluIHRoZSBjb25maWcuXG4gICAgICogT3RoZXJ3aXNlIHByb2R1Y2UgYSBkYXRlIG9iamVjdC5cbiAgICAgKi9cbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IGRhdGV0aW1lID8gbW9tZW50KGRhdGV0aW1lKS5mb3JtYXQoZm9ybWF0KSA6ICcnO1xuICAgICAgb25DaGFuZ2UoZm9ybWF0dGVkVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1vbWVudC5pc01vbWVudChkYXRldGltZSkgPyBkYXRldGltZS50b0RhdGUoKSA6IGRhdGV0aW1lO1xuICAgICAgb25DaGFuZ2UodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvbkNsb3NlID0gZGF0ZXRpbWUgPT4ge1xuICAgIGNvbnN0IHsgc2V0SW5hY3RpdmVTdHlsZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZShkYXRldGltZSkpIHtcbiAgICAgIGNvbnN0IHBhcnNlZERhdGUgPSBtb21lbnQoZGF0ZXRpbWUpO1xuXG4gICAgICBpZiAocGFyc2VkRGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoZGF0ZXRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmFsZXJ0KCdUaGUgZGF0ZSB5b3UgZW50ZXJlZCBpcyBpbnZhbGlkLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldEluYWN0aXZlU3R5bGUoKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlLCB0LCBpc0Rpc2FibGVkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZm9ybWF0LCBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0IH0gPSB0aGlzLmZvcm1hdHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke3JlYWN0RGF0ZVRpbWVTdHlsZXN9O1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPERhdGVUaW1lXG4gICAgICAgICAgZGF0ZUZvcm1hdD17ZGF0ZUZvcm1hdH1cbiAgICAgICAgICB0aW1lRm9ybWF0PXt0aW1lRm9ybWF0fVxuICAgICAgICAgIHZhbHVlPXttb21lbnQodmFsdWUsIGZvcm1hdCl9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIG9uT3Blbj17c2V0QWN0aXZlU3R5bGV9XG4gICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfVxuICAgICAgICAgIGlucHV0UHJvcHM9e3sgY2xhc3NOYW1lOiBjbGFzc05hbWVXcmFwcGVyLCBpZDogZm9ySUQgfX1cbiAgICAgICAgICB1dGM9e3RoaXMucGlja2VyVXRjfVxuICAgICAgICAvPlxuICAgICAgICB7IWlzRGlzYWJsZWQgJiYgPE5vd0J1dHRvbiB0PXt0fSBoYW5kbGVDaGFuZ2U9e3YgPT4gdGhpcy5oYW5kbGVDaGFuZ2Uodil9IC8+fVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

function NowButton({
  t,
  handleChange
}) {
  return (0, _core.jsx)("div", {
    css: _ref
  }, (0, _core.jsx)("button", {
    css: /*#__PURE__*/(0, _core.css)(_netlifyCmsUiDefault.buttons.button, " ", _netlifyCmsUiDefault.buttons.widget, ";label:NowButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUJnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgcmVhY3REYXRlVGltZVN0eWxlcyBmcm9tICdyZWFjdC1kYXRldGltZS9jc3MvcmVhY3QtZGF0ZXRpbWUuY3NzJztcbmltcG9ydCBEYXRlVGltZSBmcm9tICdyZWFjdC1kYXRldGltZSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBidXR0b25zIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmZ1bmN0aW9uIE5vd0J1dHRvbih7IHQsIGhhbmRsZUNoYW5nZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDIwcHg7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNDBweCk7XG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke2J1dHRvbnMuYnV0dG9ufVxuICAgICAgICAgICR7YnV0dG9ucy53aWRnZXR9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UobW9tZW50KCkpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7dCgnZWRpdG9yLmVkaXRvcldpZGdldHMuZGF0ZXRpbWUubm93Jyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIH07XG5cbiAgZ2V0Rm9ybWF0cygpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGZpZWxkLmdldCgnZm9ybWF0Jyk7XG5cbiAgICAvLyBkYXRlRm9ybWF0IGFuZCB0aW1lRm9ybWF0IGFyZSBzdHJpY3RseSBmb3IgbW9kaWZ5aW5nXG4gICAgLy8gaW5wdXQgZmllbGQgd2l0aCB0aGUgZGF0ZS90aW1lIHBpY2tlcnNcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gZmllbGQuZ2V0KCdkYXRlX2Zvcm1hdCcpO1xuICAgIC8vIHNob3cgdGltZS1waWNrZXI/IGZhbHNlIGhpZGVzIGl0LCB0cnVlIHNob3dzIGl0IHVzaW5nIGRlZmF1bHQgZm9ybWF0XG4gICAgbGV0IHRpbWVGb3JtYXQgPSBmaWVsZC5nZXQoJ3RpbWVfZm9ybWF0Jyk7XG4gICAgaWYgKHR5cGVvZiB0aW1lRm9ybWF0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGltZUZvcm1hdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdCxcbiAgICAgIGRhdGVGb3JtYXQsXG4gICAgICB0aW1lRm9ybWF0LFxuICAgIH07XG4gIH1cblxuICBnZXREZWZhdWx0VmFsdWUoKSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBmaWVsZC5nZXQoJ2RlZmF1bHQnKTtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgZ2V0UGlja2VyVXRjKCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcGlja2VyVXRjID0gZmllbGQuZ2V0KCdwaWNrZXJfdXRjJyk7XG4gICAgcmV0dXJuIHBpY2tlclV0YztcbiAgfVxuXG4gIGZvcm1hdHMgPSB0aGlzLmdldEZvcm1hdHMoKTtcbiAgZGVmYXVsdFZhbHVlID0gdGhpcy5nZXREZWZhdWx0VmFsdWUoKTtcbiAgcGlja2VyVXRjID0gdGhpcy5nZXRQaWNrZXJVdGMoKTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IGRhdGUgYXMgZGVmYXVsdCB2YWx1ZSBpZiBubyB2YWx1ZSBpcyBwcm92aWRlZCBhbmQgZGVmYXVsdCBpcyBhYnNlbnQuIEFuXG4gICAgICogZW1wdHkgZGVmYXVsdCBzdHJpbmcgbWVhbnMgdGhlIHZhbHVlIGlzIGludGVudGlvbmFsbHkgYmxhbmsuXG4gICAgICovXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSh0aGlzLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkID8gbmV3IERhdGUoKSA6IHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICAgIH0sIDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIERhdGUgaXMgdmFsaWQgaWYgZGF0ZXRpbWUgaXMgYSBtb21lbnQgb3IgRGF0ZSBvYmplY3Qgb3RoZXJ3aXNlIGl0J3MgYSBzdHJpbmcuXG4gIC8vIEhhbmRsZSB0aGUgZW1wdHkgY2FzZSwgaWYgdGhlIHVzZXIgd2FudHMgdG8gZW1wdHkgdGhlIGZpZWxkLlxuICBpc1ZhbGlkRGF0ZSA9IGRhdGV0aW1lID0+XG4gICAgbW9tZW50LmlzTW9tZW50KGRhdGV0aW1lKSB8fCBkYXRldGltZSBpbnN0YW5jZW9mIERhdGUgfHwgZGF0ZXRpbWUgPT09ICcnO1xuXG4gIGhhbmRsZUNoYW5nZSA9IGRhdGV0aW1lID0+IHtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRhdGUgb25seSBpZiBpdCBpcyB2YWxpZC5cbiAgICAgKi9cbiAgICBpZiAoIXRoaXMuaXNWYWxpZERhdGUoZGF0ZXRpbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGZvcm1hdCB9ID0gdGhpcy5mb3JtYXRzO1xuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZSBhIGZvcm1hdHRlZCBzdHJpbmcgb25seSBpZiBhIGZvcm1hdCBpcyBzZXQgaW4gdGhlIGNvbmZpZy5cbiAgICAgKiBPdGhlcndpc2UgcHJvZHVjZSBhIGRhdGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gZGF0ZXRpbWUgPyBtb21lbnQoZGF0ZXRpbWUpLmZvcm1hdChmb3JtYXQpIDogJyc7XG4gICAgICBvbkNoYW5nZShmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbW9tZW50LmlzTW9tZW50KGRhdGV0aW1lKSA/IGRhdGV0aW1lLnRvRGF0ZSgpIDogZGF0ZXRpbWU7XG4gICAgICBvbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9uQ2xvc2UgPSBkYXRldGltZSA9PiB7XG4gICAgY29uc3QgeyBzZXRJbmFjdGl2ZVN0eWxlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWREYXRlKGRhdGV0aW1lKSkge1xuICAgICAgY29uc3QgcGFyc2VkRGF0ZSA9IG1vbWVudChkYXRldGltZSk7XG5cbiAgICAgIGlmIChwYXJzZWREYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZShkYXRldGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuYWxlcnQoJ1RoZSBkYXRlIHlvdSBlbnRlcmVkIGlzIGludmFsaWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW5hY3RpdmVTdHlsZSgpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGZvcklELCB2YWx1ZSwgY2xhc3NOYW1lV3JhcHBlciwgc2V0QWN0aXZlU3R5bGUsIHQsIGlzRGlzYWJsZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBmb3JtYXQsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQgfSA9IHRoaXMuZm9ybWF0cztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7cmVhY3REYXRlVGltZVN0eWxlc307XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8RGF0ZVRpbWVcbiAgICAgICAgICBkYXRlRm9ybWF0PXtkYXRlRm9ybWF0fVxuICAgICAgICAgIHRpbWVGb3JtYXQ9e3RpbWVGb3JtYXR9XG4gICAgICAgICAgdmFsdWU9e21vbWVudCh2YWx1ZSwgZm9ybWF0KX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgb25PcGVuPXtzZXRBY3RpdmVTdHlsZX1cbiAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XG4gICAgICAgICAgaW5wdXRQcm9wcz17eyBjbGFzc05hbWU6IGNsYXNzTmFtZVdyYXBwZXIsIGlkOiBmb3JJRCB9fVxuICAgICAgICAgIHV0Yz17dGhpcy5waWNrZXJVdGN9XG4gICAgICAgIC8+XG4gICAgICAgIHshaXNEaXNhYmxlZCAmJiA8Tm93QnV0dG9uIHQ9e3R9IGhhbmRsZUNoYW5nZT17diA9PiB0aGlzLmhhbmRsZUNoYW5nZSh2KX0gLz59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXX0= */")),
    onClick: () => {
      handleChange((0, _moment.default)());
    }
  }, t('editor.editorWidgets.datetime.now')));
}

class DateTimeControl extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "formats", this.getFormats());

    _defineProperty(this, "defaultValue", this.getDefaultValue());

    _defineProperty(this, "pickerUtc", this.getPickerUtc());

    _defineProperty(this, "isValidDate", datetime => _moment.default.isMoment(datetime) || datetime instanceof Date || datetime === '');

    _defineProperty(this, "handleChange", datetime => {
      /**
       * Set the date only if it is valid.
       */
      if (!this.isValidDate(datetime)) {
        return;
      }

      const {
        onChange
      } = this.props;
      const {
        format
      } = this.formats;
      /**
       * Produce a formatted string only if a format is set in the config.
       * Otherwise produce a date object.
       */

      if (format) {
        const formattedValue = datetime ? (0, _moment.default)(datetime).format(format) : '';
        onChange(formattedValue);
      } else {
        const value = _moment.default.isMoment(datetime) ? datetime.toDate() : datetime;
        onChange(value);
      }
    });

    _defineProperty(this, "onClose", datetime => {
      const {
        setInactiveStyle
      } = this.props;

      if (!this.isValidDate(datetime)) {
        const parsedDate = (0, _moment.default)(datetime);

        if (parsedDate.isValid()) {
          this.handleChange(datetime);
        } else {
          window.alert('The date you entered is invalid.');
        }
      }

      setInactiveStyle();
    });
  }

  getFormats() {
    const {
      field
    } = this.props;
    const format = field.get('format'); // dateFormat and timeFormat are strictly for modifying
    // input field with the date/time pickers

    const dateFormat = field.get('date_format'); // show time-picker? false hides it, true shows it using default format

    let timeFormat = field.get('time_format');

    if (typeof timeFormat === 'undefined') {
      timeFormat = true;
    }

    return {
      format,
      dateFormat,
      timeFormat
    };
  }

  getDefaultValue() {
    const {
      field
    } = this.props;
    const defaultValue = field.get('default');
    return defaultValue;
  }

  getPickerUtc() {
    const {
      field
    } = this.props;
    const pickerUtc = field.get('picker_utc');
    return pickerUtc;
  }

  componentDidMount() {
    const {
      value
    } = this.props;
    /**
     * Set the current date as default value if no value is provided and default is absent. An
     * empty default string means the value is intentionally blank.
     */

    if (value === undefined) {
      setTimeout(() => {
        this.handleChange(this.defaultValue === undefined ? new Date() : this.defaultValue);
      }, 0);
    }
  } // Date is valid if datetime is a moment or Date object otherwise it's a string.
  // Handle the empty case, if the user wants to empty the field.


  render() {
    const {
      forID,
      value,
      classNameWrapper,
      setActiveStyle,
      t,
      isDisabled
    } = this.props;
    const {
      format,
      dateFormat,
      timeFormat
    } = this.formats;
    return (0, _core.jsx)("div", {
      css: /*#__PURE__*/(0, _core.css)(_reactDatetime.default, ";position:relative;;label:DateTimeControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUpnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgcmVhY3REYXRlVGltZVN0eWxlcyBmcm9tICdyZWFjdC1kYXRldGltZS9jc3MvcmVhY3QtZGF0ZXRpbWUuY3NzJztcbmltcG9ydCBEYXRlVGltZSBmcm9tICdyZWFjdC1kYXRldGltZSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBidXR0b25zIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmZ1bmN0aW9uIE5vd0J1dHRvbih7IHQsIGhhbmRsZUNoYW5nZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDIwcHg7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNDBweCk7XG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke2J1dHRvbnMuYnV0dG9ufVxuICAgICAgICAgICR7YnV0dG9ucy53aWRnZXR9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UobW9tZW50KCkpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7dCgnZWRpdG9yLmVkaXRvcldpZGdldHMuZGF0ZXRpbWUubm93Jyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIH07XG5cbiAgZ2V0Rm9ybWF0cygpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGZpZWxkLmdldCgnZm9ybWF0Jyk7XG5cbiAgICAvLyBkYXRlRm9ybWF0IGFuZCB0aW1lRm9ybWF0IGFyZSBzdHJpY3RseSBmb3IgbW9kaWZ5aW5nXG4gICAgLy8gaW5wdXQgZmllbGQgd2l0aCB0aGUgZGF0ZS90aW1lIHBpY2tlcnNcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gZmllbGQuZ2V0KCdkYXRlX2Zvcm1hdCcpO1xuICAgIC8vIHNob3cgdGltZS1waWNrZXI/IGZhbHNlIGhpZGVzIGl0LCB0cnVlIHNob3dzIGl0IHVzaW5nIGRlZmF1bHQgZm9ybWF0XG4gICAgbGV0IHRpbWVGb3JtYXQgPSBmaWVsZC5nZXQoJ3RpbWVfZm9ybWF0Jyk7XG4gICAgaWYgKHR5cGVvZiB0aW1lRm9ybWF0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGltZUZvcm1hdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdCxcbiAgICAgIGRhdGVGb3JtYXQsXG4gICAgICB0aW1lRm9ybWF0LFxuICAgIH07XG4gIH1cblxuICBnZXREZWZhdWx0VmFsdWUoKSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBmaWVsZC5nZXQoJ2RlZmF1bHQnKTtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgZ2V0UGlja2VyVXRjKCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcGlja2VyVXRjID0gZmllbGQuZ2V0KCdwaWNrZXJfdXRjJyk7XG4gICAgcmV0dXJuIHBpY2tlclV0YztcbiAgfVxuXG4gIGZvcm1hdHMgPSB0aGlzLmdldEZvcm1hdHMoKTtcbiAgZGVmYXVsdFZhbHVlID0gdGhpcy5nZXREZWZhdWx0VmFsdWUoKTtcbiAgcGlja2VyVXRjID0gdGhpcy5nZXRQaWNrZXJVdGMoKTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IGRhdGUgYXMgZGVmYXVsdCB2YWx1ZSBpZiBubyB2YWx1ZSBpcyBwcm92aWRlZCBhbmQgZGVmYXVsdCBpcyBhYnNlbnQuIEFuXG4gICAgICogZW1wdHkgZGVmYXVsdCBzdHJpbmcgbWVhbnMgdGhlIHZhbHVlIGlzIGludGVudGlvbmFsbHkgYmxhbmsuXG4gICAgICovXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSh0aGlzLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkID8gbmV3IERhdGUoKSA6IHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICAgIH0sIDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIERhdGUgaXMgdmFsaWQgaWYgZGF0ZXRpbWUgaXMgYSBtb21lbnQgb3IgRGF0ZSBvYmplY3Qgb3RoZXJ3aXNlIGl0J3MgYSBzdHJpbmcuXG4gIC8vIEhhbmRsZSB0aGUgZW1wdHkgY2FzZSwgaWYgdGhlIHVzZXIgd2FudHMgdG8gZW1wdHkgdGhlIGZpZWxkLlxuICBpc1ZhbGlkRGF0ZSA9IGRhdGV0aW1lID0+XG4gICAgbW9tZW50LmlzTW9tZW50KGRhdGV0aW1lKSB8fCBkYXRldGltZSBpbnN0YW5jZW9mIERhdGUgfHwgZGF0ZXRpbWUgPT09ICcnO1xuXG4gIGhhbmRsZUNoYW5nZSA9IGRhdGV0aW1lID0+IHtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRhdGUgb25seSBpZiBpdCBpcyB2YWxpZC5cbiAgICAgKi9cbiAgICBpZiAoIXRoaXMuaXNWYWxpZERhdGUoZGF0ZXRpbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGZvcm1hdCB9ID0gdGhpcy5mb3JtYXRzO1xuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZSBhIGZvcm1hdHRlZCBzdHJpbmcgb25seSBpZiBhIGZvcm1hdCBpcyBzZXQgaW4gdGhlIGNvbmZpZy5cbiAgICAgKiBPdGhlcndpc2UgcHJvZHVjZSBhIGRhdGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gZGF0ZXRpbWUgPyBtb21lbnQoZGF0ZXRpbWUpLmZvcm1hdChmb3JtYXQpIDogJyc7XG4gICAgICBvbkNoYW5nZShmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbW9tZW50LmlzTW9tZW50KGRhdGV0aW1lKSA/IGRhdGV0aW1lLnRvRGF0ZSgpIDogZGF0ZXRpbWU7XG4gICAgICBvbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9uQ2xvc2UgPSBkYXRldGltZSA9PiB7XG4gICAgY29uc3QgeyBzZXRJbmFjdGl2ZVN0eWxlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWREYXRlKGRhdGV0aW1lKSkge1xuICAgICAgY29uc3QgcGFyc2VkRGF0ZSA9IG1vbWVudChkYXRldGltZSk7XG5cbiAgICAgIGlmIChwYXJzZWREYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZShkYXRldGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuYWxlcnQoJ1RoZSBkYXRlIHlvdSBlbnRlcmVkIGlzIGludmFsaWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW5hY3RpdmVTdHlsZSgpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGZvcklELCB2YWx1ZSwgY2xhc3NOYW1lV3JhcHBlciwgc2V0QWN0aXZlU3R5bGUsIHQsIGlzRGlzYWJsZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBmb3JtYXQsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQgfSA9IHRoaXMuZm9ybWF0cztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7cmVhY3REYXRlVGltZVN0eWxlc307XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8RGF0ZVRpbWVcbiAgICAgICAgICBkYXRlRm9ybWF0PXtkYXRlRm9ybWF0fVxuICAgICAgICAgIHRpbWVGb3JtYXQ9e3RpbWVGb3JtYXR9XG4gICAgICAgICAgdmFsdWU9e21vbWVudCh2YWx1ZSwgZm9ybWF0KX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgb25PcGVuPXtzZXRBY3RpdmVTdHlsZX1cbiAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XG4gICAgICAgICAgaW5wdXRQcm9wcz17eyBjbGFzc05hbWU6IGNsYXNzTmFtZVdyYXBwZXIsIGlkOiBmb3JJRCB9fVxuICAgICAgICAgIHV0Yz17dGhpcy5waWNrZXJVdGN9XG4gICAgICAgIC8+XG4gICAgICAgIHshaXNEaXNhYmxlZCAmJiA8Tm93QnV0dG9uIHQ9e3R9IGhhbmRsZUNoYW5nZT17diA9PiB0aGlzLmhhbmRsZUNoYW5nZSh2KX0gLz59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXX0= */"))
    }, (0, _core.jsx)(_reactDatetime2.default, {
      dateFormat: dateFormat,
      timeFormat: timeFormat,
      value: (0, _moment.default)(value, format),
      onChange: this.handleChange,
      onOpen: setActiveStyle,
      onClose: this.onClose,
      inputProps: {
        className: classNameWrapper,
        id: forID
      },
      utc: this.pickerUtc
    }), !isDisabled && (0, _core.jsx)(NowButton, {
      t: t,
      handleChange: v => this.handleChange(v)
    }));
  }

}

exports.default = DateTimeControl;

_defineProperty(DateTimeControl, "propTypes", {
  field: _propTypes.default.object.isRequired,
  forID: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  value: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])
});