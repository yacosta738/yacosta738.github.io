"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NestedCollection = void 0;
exports.getTreeData = getTreeData;
exports.updateNode = updateNode;
exports.walk = walk;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _core = require("@emotion/core");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _path = require("path");

var _netlifyCmsLibWidgets = require("netlify-cms-lib-widgets");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _entries = require("../../reducers/entries");

var _collections = require("../../reducers/collections");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const {
  addFileTemplateFields
} = _netlifyCmsLibWidgets.stringTemplate;
const NodeTitleContainer = (0, _styledBase.default)("div", {
  target: "eqdmagz0",
  label: "NodeTitleContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1n2mv2k",
  styles: "display:flex;justify-content:center;align-items:center;"
} : {
  name: "1n2mv2k",
  styles: "display:flex;justify-content:center;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const NodeTitle = (0, _styledBase.default)("div", {
  target: "eqdmagz1",
  label: "NodeTitle"
})(process.env.NODE_ENV === "production" ? {
  name: "15ro776",
  styles: "margin-right:4px;"
} : {
  name: "15ro776",
  styles: "margin-right:4px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Caret = (0, _styledBase.default)("div", {
  target: "eqdmagz2",
  label: "Caret"
})(process.env.NODE_ENV === "production" ? {
  name: "wmzlvu",
  styles: "position:relative;top:2px;"
} : {
  name: "wmzlvu",
  styles: "position:relative;top:2px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CaretDown = ( /*#__PURE__*/0, _styledBase.default)(Caret, {
  target: "eqdmagz3",
  label: "CaretDown"
})(_netlifyCmsUiDefault.components.caretDown, ";color:currentColor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CaretRight = ( /*#__PURE__*/0, _styledBase.default)(Caret, {
  target: "eqdmagz4",
  label: "CaretRight"
})(_netlifyCmsUiDefault.components.caretRight, ";color:currentColor;left:2px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TreeNavLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.NavLink, {
  target: "eqdmagz5",
  label: "TreeNavLink"
})("display:flex;font-size:14px;font-weight:500;align-items:center;padding:8px;padding-left:", props => props.depth * 20 + 12, "px;border-left:2px solid #fff;", _netlifyCmsUiDefault.Icon, "{margin-right:8px;flex-shrink:0;}", props => /*#__PURE__*/(0, _core.css)("&:hover,&:active,&.", props.activeClassName, "{color:", _netlifyCmsUiDefault.colors.active, ";background-color:", _netlifyCmsUiDefault.colors.activeBackground, ";border-left-color:#4863c6;};label:TreeNavLink;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

function getNodeTitle(node) {
  var _node$children$find;

  const title = node.isRoot ? node.title : ((_node$children$find = node.children.find(c => !c.isDir && c.title)) === null || _node$children$find === void 0 ? void 0 : _node$children$find.title) || node.title;
  return title;
}

function TreeNode(props) {
  const {
    collection,
    treeData,
    depth = 0,
    onToggle
  } = props;
  const collectionName = collection.get('name');
  const sortedData = (0, _sortBy2.default)(treeData, getNodeTitle);
  return sortedData.map(node => {
    var _node$children$;

    const leaf = node.children.length <= 1 && !((_node$children$ = node.children[0]) !== null && _node$children$ !== void 0 && _node$children$.isDir) && depth > 0;

    if (leaf) {
      return null;
    }

    let to = `/collections/${collectionName}`;

    if (depth > 0) {
      to = `${to}/filter${node.path}`;
    }

    const title = getNodeTitle(node);
    const hasChildren = depth === 0 || node.children.some(c => c.children.some(c => c.isDir));
    return (0, _core.jsx)(_react.default.Fragment, {
      key: node.path
    }, (0, _core.jsx)(TreeNavLink, {
      exact: true,
      to: to,
      activeClassName: "sidebar-active",
      onClick: () => onToggle({
        node,
        expanded: !node.expanded
      }),
      depth: depth,
      "data-testid": node.path
    }, (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
      type: "write"
    }), (0, _core.jsx)(NodeTitleContainer, null, (0, _core.jsx)(NodeTitle, null, title), hasChildren && (node.expanded ? (0, _core.jsx)(CaretDown, null) : (0, _core.jsx)(CaretRight, null)))), node.expanded && (0, _core.jsx)(TreeNode, {
      collection: collection,
      depth: depth + 1,
      treeData: node.children,
      onToggle: onToggle
    }));
  });
}

TreeNode.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  depth: _propTypes.default.number,
  treeData: _propTypes.default.array.isRequired,
  onToggle: _propTypes.default.func.isRequired
};

function walk(treeData, callback) {
  function traverse(children) {
    for (const child of children) {
      callback(child);
      traverse(child.children);
    }
  }

  return traverse(treeData);
}

function getTreeData(collection, entries) {
  const collectionFolder = collection.get('folder');
  const rootFolder = '/';
  const entriesObj = entries.toJS().map(e => _objectSpread(_objectSpread({}, e), {}, {
    path: e.path.slice(collectionFolder.length)
  }));
  const dirs = entriesObj.reduce((acc, entry) => {
    let dir = (0, _path.dirname)(entry.path);

    while (!acc[dir] && dir && dir !== rootFolder) {
      const parts = dir.split(_path.sep);
      acc[dir] = parts.pop();
      dir = parts.length && parts.join(_path.sep);
    }

    return acc;
  }, {});

  if (collection.getIn(['nested', 'summary'])) {
    collection = collection.set('summary', collection.getIn(['nested', 'summary']));
  } else {
    collection = collection.delete('summary');
  }

  const flatData = [{
    title: collection.get('label'),
    path: rootFolder,
    isDir: true,
    isRoot: true
  }, ...Object.entries(dirs).map(_ref => {
    let [key, value] = _ref;
    return {
      title: value,
      path: key,
      isDir: true,
      isRoot: false
    };
  }), ...entriesObj.map((e, index) => {
    let entryMap = entries.get(index);
    entryMap = entryMap.set('data', addFileTemplateFields(entryMap.get('path'), entryMap.get('data')));
    const title = (0, _collections.selectEntryCollectionTitle)(collection, entryMap);
    return _objectSpread(_objectSpread({}, e), {}, {
      title,
      isDir: false,
      isRoot: false
    });
  })];
  const parentsToChildren = flatData.reduce((acc, node) => {
    const parent = node.path === rootFolder ? '' : (0, _path.dirname)(node.path);

    if (acc[parent]) {
      acc[parent].push(node);
    } else {
      acc[parent] = [node];
    }

    return acc;
  }, {});

  function reducer(acc, value) {
    const node = value;
    let children = [];

    if (parentsToChildren[node.path]) {
      children = parentsToChildren[node.path].reduce(reducer, []);
    }

    acc.push(_objectSpread(_objectSpread({}, node), {}, {
      children
    }));
    return acc;
  }

  const treeData = parentsToChildren[''].reduce(reducer, []);
  return treeData;
}

function updateNode(treeData, node, callback) {
  let stop = false;

  function updater(nodes) {
    if (stop) {
      return nodes;
    }

    for (let i = 0; i < nodes.length; i++) {
      if (nodes[i].path === node.path) {
        nodes[i] = callback(node);
        stop = true;
        return nodes;
      }
    }

    nodes.forEach(node => updater(node.children));
    return nodes;
  }

  return updater([...treeData]);
}

class NestedCollection extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "onToggle", _ref2 => {
      let {
        node,
        expanded
      } = _ref2;

      if (!this.state.selected || this.state.selected.path === node.path || expanded) {
        const treeData = updateNode(this.state.treeData, node, node => _objectSpread(_objectSpread({}, node), {}, {
          expanded
        }));
        this.setState({
          treeData,
          selected: node,
          useFilter: false
        });
      } else {
        // don't collapse non selected nodes when clicked
        this.setState({
          selected: node,
          useFilter: false
        });
      }
    });

    this.state = {
      treeData: getTreeData(this.props.collection, this.props.entries),
      selected: null,
      useFilter: true
    };
  }

  componentDidUpdate(prevProps) {
    const {
      collection,
      entries,
      filterTerm
    } = this.props;

    if (collection !== prevProps.collection || entries !== prevProps.entries || filterTerm !== prevProps.filterTerm) {
      const expanded = {};
      walk(this.state.treeData, node => {
        if (node.expanded) {
          expanded[node.path] = true;
        }
      });
      const treeData = getTreeData(collection, entries);
      const path = `/${filterTerm}`;
      walk(treeData, node => {
        if (expanded[node.path] || this.state.useFilter && path.startsWith(node.path)) {
          node.expanded = true;
        }
      });
      this.setState({
        treeData
      });
    }
  }

  render() {
    const {
      treeData
    } = this.state;
    const {
      collection
    } = this.props;
    return (0, _core.jsx)(TreeNode, {
      collection: collection,
      treeData: treeData,
      onToggle: this.onToggle
    });
  }

}

exports.NestedCollection = NestedCollection;

_defineProperty(NestedCollection, "propTypes", {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entries: _reactImmutableProptypes.default.list.isRequired,
  filterTerm: _propTypes.default.string
});

function mapStateToProps(state, ownProps) {
  const {
    collection
  } = ownProps;
  const entries = (0, _entries.selectEntries)(state.entries, collection) || (0, _immutable.List)();
  return {
    entries
  };
}

var _default = (0, _reactRedux.connect)(mapStateToProps, null)(NestedCollection);

exports.default = _default;